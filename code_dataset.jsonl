{"text": "// file: azure-pipelines.yml\n// service: azure-pipelines.yml\n# Starter pipeline\n# Start with a minimal pipeline that you can customize to build and deploy your code.\n# Add steps that build, run tests, deploy, and more:\n# https://aka.ms/yaml\n\ntrigger:\n- main\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n- task: UseDotNet@2\n  displayName: 'Use Version 6 .NET Core sdk'\n  inputs:\n    packageType: 'sdk'\n    version: '6.0.x'\n    includePreviewVersions: true\n\n- task: NuGetCommand@2\n  inputs:\n    command: 'restore'\n    restoreSolution: '**/*.sln'\n    feedsToUse: 'select'\n    vstsFeed: '7d5ec33f-f11e-4559-8655-b3cb893bf55a'\n\n- task: DotNetCoreCLI@2\n  displayName: 'Build'\n  inputs:\n    command: 'build'\n    projects: '**/*.csproj'\n    arguments: '--output $(Build.BinariesDirectory)/publish_output --configuration Release'\n\n- task: DotNetCoreCLI@2\n  displayName: 'Test'\n  inputs:\n    command: test\n    projects: '**/*Tests/*.csproj'\n    arguments: '--configuration $(buildConfiguration)'\n    \n\n- task: ArchiveFiles@2\n  inputs:\n    rootFolderOrFile: '$(Build.BinariesDirectory)/publish_output'\n    includeRootFolder: false\n    archiveType: 'zip'\n    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'\n    replaceExistingArchive: true\n    \n\n- task: PublishBuildArtifacts@1\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)'\n    ArtifactName: 'drop'\n    publishLocation: 'Container'"}
{"text": "// file: README.md\n// service: README.md\n# Introduction \nAzure Function Microservice processing Remundo Contracting related commands. It pulls messages out of a queue, process and append results to an event store database.\n  \n![Processing](./remundo-processing.png)\n\n# Configuration\n\nCreate a file called local.settings.json and add the following content.\n  \n```\n{\n    \"IsEncrypted\": false,\n  \"Values\": {\n    \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",\n    \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet\",\n    \"CloudRequestSource\": \"pricing-uk\",\n    \"EventCategory\": \"RemundoPricingUk\",\n    \"EventStore_Link\": \"<tcp_connectionstring_to_eventstore>\",\n    \"EventStore_Username\": \"\",\n    \"EventStore_Password\": \"\",\n    \"ServiceBusConnectionString\": \"<connectionstring_without_queuename>\",\n    \"QueueName\": \"<queuename>\"\n  }\n}\n```  \nThis file contains sensitive information and should be ignored by git. Ask your colleagues for the values. Once the function is deployed, the above settings will be in environment variables."}
{"text": "// file: .github/workflows/main.yml\n// service: .github\nname: main\n\non:\n  push:\n    branches: [main]\n    tags: [\"v*\"]\n    paths-ignore: [README.md]\n\nenv:\n  GITHUB_REF: ${{ github.ref }}\n  GITHUB_REF_TYPE: ${{ github.ref_type }}\njobs:\n  test:\n    uses: remundo-xml/Remundo.Actions/.github/workflows/test.yml@6662-2\n    secrets:\n      XML_NUGET_USER: ${{ secrets.XML_NUGET_USER }}\n      XML_NUGET_TOKEN: ${{ secrets.PAT_TOKEN }}\n      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n    with:\n      DOTNET_VERSION: \"6.0.x\"\n\n  set-vars:\n    uses: remundo-xml/Remundo.Actions/.github/workflows/vars.yml@main\n    with:\n      IMAGE_NAME: remundo-pricing-europe\n\n  build:\n    uses: remundo-xml/Remundo.Actions/.github/workflows/build.yml@main\n    needs: [set-vars, test]\n    secrets:\n      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}\n    with:\n      IMAGE_TAG: ${{ needs.set-vars.outputs.IMAGE_TAG }}\n      IMAGE_name: ${{ needs.set-vars.outputs.IMAGE_NAME }}\n\n  deploy:\n    uses: remundo-xml/Remundo.Actions/.github/workflows/gitops.yml@gitops-via-app\n    needs: [set-vars, build]\n    with:\n      IMAGE_NAME: ${{ needs.set-vars.outputs.IMAGE_NAME }}\n      IMAGE_TAG: ${{ needs.set-vars.outputs.IMAGE_TAG }}\n      ENVIRONMENT: ${{ needs.set-vars.outputs.ENVIRONMENT }}\n    secrets:\n      API_KEY: ${{ secrets.API_KEY }}\n      IAC_APP_ID: ${{ secrets.IAC_APP_ID }}\n      IAC_PRIVATE_KEY: ${{ secrets.IAC_PRIVATE_KEY }}"}
{"text": "// file: .github/workflows/pr.yml\n// service: .github\nname: pr\n\non:\n  pull_request:\n    branches:\n      - main\n    paths-ignore:\n      - README.md\n\njobs:\n  test:\n    uses: remundo-xml/Remundo.Actions/.github/workflows/test.yml@6662-2\n    secrets:\n      XML_NUGET_USER: ${{ secrets.XML_NUGET_USER }}\n      XML_NUGET_TOKEN: ${{ secrets.PAT_TOKEN }}\n      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n    with:\n      DOTNET_VERSION: \"6.0.x\""}
{"text": "// file: .vs/ProjectSettings.json\n// service: .vs\n{\n  \"CurrentProjectSetting\": null\n}"}
{"text": "// file: .vs/VSWorkspaceState.json\n// service: .vs\n{\n  \"ExpandedNodes\": [\n    \"\",\n    \"\\\\.github\",\n    \"\\\\.github\\\\workflows\",\n    \"\\\\src\",\n    \"\\\\src\\\\Remundo.Pricing.Console\",\n    \"\\\\src\\\\Remundo.Pricing.Domain\",\n    \"\\\\src\\\\Remundo.Pricing.Domain\\\\Aggregates\"\n  ],\n  \"SelectedNode\": \"\\\\Dockerfile\",\n  \"PreviewInSolutionExplorer\": false\n}"}
{"text": "// file: .vs/Remundo.Pricing.Europe/v17/DocumentLayout.json\n// service: .vs\n{\n  \"Version\": 1,\n  \"WorkspaceRootPath\": \"C:\\\\code\\\\Remundo.Pricing.Europe\\\\\",\n  \"Documents\": [],\n  \"DocumentGroupContainers\": [\n    {\n      \"Orientation\": 0,\n      \"VerticalTabListWidth\": 256,\n      \"DocumentGroups\": [\n        {\n          \"DockedWidth\": 200,\n          \"SelectedChildIndex\": -1,\n          \"Children\": [\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:0:0:{3ae79031-e1bc-11d0-8f78-00a0c9110057}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:129:0:{1fc202d4-d401-403c-9834-5b218574bb67}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:130:0:{1fc202d4-d401-403c-9834-5b218574bb67}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:129:0:{13b12e3e-c1b4-4539-9371-4fe9a0d523fc}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:130:0:{116d2292-e37d-41cd-a077-ebacac4c8cc4}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:128:0:{116d2292-e37d-41cd-a077-ebacac4c8cc4}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:1:0:{d212f56b-c48a-434c-a121-1c5d80b59b9f}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:0:0:{e1b7d1f8-9b3c-49b1-8f4f-bfc63a88835d}\"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}"}
{"text": "// file: src/.vs/Remundo.Pricing/v17/DocumentLayout.backup.json\n// service: src\n{\n  \"Version\": 1,\n  \"WorkspaceRootPath\": \"C:\\\\code\\\\Remundo.Pricing.Europe\\\\src\\\\\",\n  \"Documents\": [\n    {\n      \"AbsoluteMoniker\": \"D:0:0:{5839B41D-633A-4251-B563-6BCD567EEA63}|Remundo.Pricing.Console\\\\Remundo.Pricing.Console.csproj|c:\\\\code\\\\remundo.pricing.europe\\\\src\\\\remundo.pricing.console\\\\local.settings.json||{90A6B3A7-C1A3-4009-A288-E2FF89E96FA0}\",\n      \"RelativeMoniker\": \"D:0:0:{5839B41D-633A-4251-B563-6BCD567EEA63}|Remundo.Pricing.Console\\\\Remundo.Pricing.Console.csproj|solutionrelative:remundo.pricing.console\\\\local.settings.json||{90A6B3A7-C1A3-4009-A288-E2FF89E96FA0}\"\n    },\n    {\n      \"AbsoluteMoniker\": \"D:0:0:{5839B41D-633A-4251-B563-6BCD567EEA63}|Remundo.Pricing.Console\\\\Remundo.Pricing.Console.csproj|c:\\\\code\\\\remundo.pricing.europe\\\\src\\\\remundo.pricing.console\\\\program.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}\",\n      \"RelativeMoniker\": \"D:0:0:{5839B41D-633A-4251-B563-6BCD567EEA63}|Remundo.Pricing.Console\\\\Remundo.Pricing.Console.csproj|solutionrelative:remundo.pricing.console\\\\program.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}\"\n    },\n    {\n      \"AbsoluteMoniker\": \"D:0:0:{5839B41D-633A-4251-B563-6BCD567EEA63}|Remundo.Pricing.Console\\\\Remundo.Pricing.Console.csproj|c:\\\\code\\\\remundo.pricing.europe\\\\src\\\\remundo.pricing.console\\\\application.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}\",\n      \"RelativeMoniker\": \"D:0:0:{5839B41D-633A-4251-B563-6BCD567EEA63}|Remundo.Pricing.Console\\\\Remundo.Pricing.Console.csproj|solutionrelative:remundo.pricing.console\\\\application.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}\"\n    },\n    {\n      \"AbsoluteMoniker\": \"D:0:0:{A2FE74E1-B743-11D0-AE1A-00A0C90FFFC3}|\\u003CMiscFiles\\u003E|C:\\\\code\\\\Remundo.Pricing.Europe\\\\Dockerfile||{8B382828-6202-11D1-8870-0000F87579D2}\"\n    },\n    {\n      \"AbsoluteMoniker\": \"D:0:0:{A7DFA4AE-B059-46C3-A842-F52AA2BCC7B9}|Remundo.Pricing.Domain\\\\Remundo.Pricing.Domain.csproj|c:\\\\code\\\\remundo.pricing.europe\\\\src\\\\remundo.pricing.domain\\\\aggregates\\\\bulgaria.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}\",\n      \"RelativeMoniker\": \"D:0:0:{A7DFA4AE-B059-46C3-A842-F52AA2BCC7B9}|Remundo.Pricing.Domain\\\\Remundo.Pricing.Domain.csproj|solutionrelative:remundo.pricing.domain\\\\aggregates\\\\bulgaria.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}\"\n    }\n  ],\n  \"DocumentGroupContainers\": [\n    {\n      \"Orientation\": 0,\n      \"VerticalTabListWidth\": 256,\n      \"DocumentGroups\": [\n        {\n          \"DockedWidth\": 200,\n          \"SelectedChildIndex\": 12,\n          \"Children\": [\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:132:0:{1fc202d4-d401-403c-9834-5b218574bb67}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:131:0:{13b12e3e-c1b4-4539-9371-4fe9a0d523fc}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:0:0:{3ae79031-e1bc-11d0-8f78-00a0c9110057}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:130:0:{116d2292-e37d-41cd-a077-ebacac4c8cc4}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:2:0:{34c7837f-3b3a-449c-bdf0-bdad86cbaf4a}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:3:0:{dcc4ea97-1c0c-482b-b205-e541c0df9728}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:0:0:{f5cd1b51-c771-5648-966f-646d419b1e7c}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:129:0:{116d2292-e37d-41cd-a077-ebacac4c8cc4}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:130:0:{1fc202d4-d401-403c-9834-5b218574bb67}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:129:0:{13b12e3e-c1b4-4539-9371-4fe9a0d523fc}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:128:0:{13b12e3e-c1b4-4539-9371-4fe9a0d523fc}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:0:0:{e1b7d1f8-9b3c-49b1-8f4f-bfc63a88835d}\"\n            },\n            {\n              \"$type\": \"Document\",\n              \"DocumentIndex\": 0,\n              \"Title\": \"local.settings.json\",\n              \"DocumentMoniker\": \"C:\\\\code\\\\Remundo.Pricing.Europe\\\\src\\\\Remundo.Pricing.Console\\\\local.settings.json\",\n              \"RelativeDocumentMoniker\": \"Remundo.Pricing.Console\\\\local.settings.json\",\n              \"ToolTip\": \"C:\\\\code\\\\Remundo.Pricing.Europe\\\\src\\\\Remundo.Pricing.Console\\\\local.settings.json\",\n              \"RelativeToolTip\": \"Remundo.Pricing.Console\\\\local.settings.json\",\n              \"ViewState\": \"AgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n              \"Icon\": \"ae27a6b0-e345-4288-96df-5eaf394ee369.001642|\",\n              \"WhenOpened\": \"2025-07-10T11:22:04.009Z\",\n              \"EditorCaption\": \"\"\n            },\n            {\n              \"$type\": \"Document\",\n              \"DocumentIndex\": 3,\n              \"Title\": \"Dockerfile\",\n              \"DocumentMoniker\": \"C:\\\\code\\\\Remundo.Pricing.Europe\\\\Dockerfile\",\n              \"RelativeDocumentMoniker\": \"..\\\\Dockerfile\",\n              \"ToolTip\": \"C:\\\\code\\\\Remundo.Pricing.Europe\\\\Dockerfile\",\n              \"RelativeToolTip\": \"..\\\\Dockerfile\",\n              \"ViewState\": \"AgIAAAAAAAAAAAAAAAAAABEAAAABAAAAAAAAAA==\",\n              \"Icon\": \"ae27a6b0-e345-4288-96df-5eaf394ee369.001001|\",\n              \"WhenOpened\": \"2025-07-10T09:50:39.2Z\",\n              \"EditorCaption\": \"\"\n            },\n            {\n              \"$type\": \"Document\",\n              \"DocumentIndex\": 1,\n              \"Title\": \"Program.cs\",\n              \"DocumentMoniker\": \"C:\\\\code\\\\Remundo.Pricing.Europe\\\\src\\\\Remundo.Pricing.Console\\\\Program.cs\",\n              \"RelativeDocumentMoniker\": \"Remundo.Pricing.Console\\\\Program.cs\",\n              \"ToolTip\": \"C:\\\\code\\\\Remundo.Pricing.Europe\\\\src\\\\Remundo.Pricing.Console\\\\Program.cs\",\n              \"RelativeToolTip\": \"Remundo.Pricing.Console\\\\Program.cs\",\n              \"ViewState\": \"AgIAACcAAAAAAAAAAAAowEEAAAAQAAAAAAAAAA==\",\n              \"Icon\": \"ae27a6b0-e345-4288-96df-5eaf394ee369.000738|\",\n              \"WhenOpened\": \"2025-07-09T20:36:29.076Z\",\n              \"EditorCaption\": \"\"\n            },\n            {\n              \"$type\": \"Document\",\n              \"DocumentIndex\": 2,\n              \"Title\": \"Application.cs\",\n              \"DocumentMoniker\": \"C:\\\\code\\\\Remundo.Pricing.Europe\\\\src\\\\Remundo.Pricing.Console\\\\Application.cs\",\n              \"RelativeDocumentMoniker\": \"Remundo.Pricing.Console\\\\Application.cs\",\n              \"ToolTip\": \"C:\\\\code\\\\Remundo.Pricing.Europe\\\\src\\\\Remundo.Pricing.Console\\\\Application.cs\",\n              \"RelativeToolTip\": \"Remundo.Pricing.Console\\\\Application.cs\",\n              \"ViewState\": \"AgIAAAMAAAAAAAAAAAAmwCkAAAAAAAAAAAAAAA==\",\n              \"Icon\": \"ae27a6b0-e345-4288-96df-5eaf394ee369.000738|\",\n              \"WhenOpened\": \"2025-07-09T20:36:27.076Z\",\n              \"EditorCaption\": \"\"\n            },\n            {\n              \"$type\": \"Document\",\n              \"DocumentIndex\": 4,\n              \"Title\": \"Bulgaria.cs\",\n              \"DocumentMoniker\": \"C:\\\\code\\\\Remundo.Pricing.Europe\\\\src\\\\Remundo.Pricing.Domain\\\\Aggregates\\\\Bulgaria.cs\",\n              \"RelativeDocumentMoniker\": \"Remundo.Pricing.Domain\\\\Aggregates\\\\Bulgaria.cs\",\n              \"ToolTip\": \"C:\\\\code\\\\Remundo.Pricing.Europe\\\\src\\\\Remundo.Pricing.Domain\\\\Aggregates\\\\Bulgaria.cs\",\n              \"RelativeToolTip\": \"Remundo.Pricing.Domain\\\\Aggregates\\\\Bulgaria.cs\",\n              \"ViewState\": \"AgIAAAAAAAAAAAAAAAAAABsAAAAIAAAAAAAAAA==\",\n              \"Icon\": \"ae27a6b0-e345-4288-96df-5eaf394ee369.000738|\",\n              \"WhenOpened\": \"2025-07-09T17:38:50.307Z\",\n              \"EditorCaption\": \"\"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}"}
{"text": "// file: src/.vs/Remundo.Pricing/v17/DocumentLayout.json\n// service: src\n{\n  \"Version\": 1,\n  \"WorkspaceRootPath\": \"C:\\\\code\\\\Remundo.Pricing.Europe\\\\src\\\\\",\n  \"Documents\": [\n    {\n      \"AbsoluteMoniker\": \"D:0:0:{5839B41D-633A-4251-B563-6BCD567EEA63}|Remundo.Pricing.Console\\\\Remundo.Pricing.Console.csproj|c:\\\\code\\\\remundo.pricing.europe\\\\src\\\\remundo.pricing.console\\\\local.settings.json||{90A6B3A7-C1A3-4009-A288-E2FF89E96FA0}\",\n      \"RelativeMoniker\": \"D:0:0:{5839B41D-633A-4251-B563-6BCD567EEA63}|Remundo.Pricing.Console\\\\Remundo.Pricing.Console.csproj|solutionrelative:remundo.pricing.console\\\\local.settings.json||{90A6B3A7-C1A3-4009-A288-E2FF89E96FA0}\"\n    },\n    {\n      \"AbsoluteMoniker\": \"D:0:0:{5839B41D-633A-4251-B563-6BCD567EEA63}|Remundo.Pricing.Console\\\\Remundo.Pricing.Console.csproj|c:\\\\code\\\\remundo.pricing.europe\\\\src\\\\remundo.pricing.console\\\\program.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}\",\n      \"RelativeMoniker\": \"D:0:0:{5839B41D-633A-4251-B563-6BCD567EEA63}|Remundo.Pricing.Console\\\\Remundo.Pricing.Console.csproj|solutionrelative:remundo.pricing.console\\\\program.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}\"\n    },\n    {\n      \"AbsoluteMoniker\": \"D:0:0:{5839B41D-633A-4251-B563-6BCD567EEA63}|Remundo.Pricing.Console\\\\Remundo.Pricing.Console.csproj|c:\\\\code\\\\remundo.pricing.europe\\\\src\\\\remundo.pricing.console\\\\application.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}\",\n      \"RelativeMoniker\": \"D:0:0:{5839B41D-633A-4251-B563-6BCD567EEA63}|Remundo.Pricing.Console\\\\Remundo.Pricing.Console.csproj|solutionrelative:remundo.pricing.console\\\\application.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}\"\n    },\n    {\n      \"AbsoluteMoniker\": \"D:0:0:{A2FE74E1-B743-11D0-AE1A-00A0C90FFFC3}|\\u003CMiscFiles\\u003E|C:\\\\code\\\\Remundo.Pricing.Europe\\\\Dockerfile||{8B382828-6202-11D1-8870-0000F87579D2}\"\n    },\n    {\n      \"AbsoluteMoniker\": \"D:0:0:{A7DFA4AE-B059-46C3-A842-F52AA2BCC7B9}|Remundo.Pricing.Domain\\\\Remundo.Pricing.Domain.csproj|c:\\\\code\\\\remundo.pricing.europe\\\\src\\\\remundo.pricing.domain\\\\aggregates\\\\bulgaria.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}\",\n      \"RelativeMoniker\": \"D:0:0:{A7DFA4AE-B059-46C3-A842-F52AA2BCC7B9}|Remundo.Pricing.Domain\\\\Remundo.Pricing.Domain.csproj|solutionrelative:remundo.pricing.domain\\\\aggregates\\\\bulgaria.cs||{A6C744A8-0E4A-4FC6-886A-064283054674}\"\n    }\n  ],\n  \"DocumentGroupContainers\": [\n    {\n      \"Orientation\": 0,\n      \"VerticalTabListWidth\": 256,\n      \"DocumentGroups\": [\n        {\n          \"DockedWidth\": 200,\n          \"SelectedChildIndex\": 11,\n          \"Children\": [\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:132:0:{1fc202d4-d401-403c-9834-5b218574bb67}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:131:0:{13b12e3e-c1b4-4539-9371-4fe9a0d523fc}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:0:0:{3ae79031-e1bc-11d0-8f78-00a0c9110057}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:130:0:{116d2292-e37d-41cd-a077-ebacac4c8cc4}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:2:0:{34c7837f-3b3a-449c-bdf0-bdad86cbaf4a}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:3:0:{dcc4ea97-1c0c-482b-b205-e541c0df9728}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:0:0:{f5cd1b51-c771-5648-966f-646d419b1e7c}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:129:0:{116d2292-e37d-41cd-a077-ebacac4c8cc4}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:130:0:{1fc202d4-d401-403c-9834-5b218574bb67}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:129:0:{13b12e3e-c1b4-4539-9371-4fe9a0d523fc}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:128:0:{13b12e3e-c1b4-4539-9371-4fe9a0d523fc}\"\n            },\n            {\n              \"$type\": \"Document\",\n              \"DocumentIndex\": 0,\n              \"Title\": \"local.settings.json\",\n              \"DocumentMoniker\": \"C:\\\\code\\\\Remundo.Pricing.Europe\\\\src\\\\Remundo.Pricing.Console\\\\local.settings.json\",\n              \"RelativeDocumentMoniker\": \"Remundo.Pricing.Console\\\\local.settings.json\",\n              \"ToolTip\": \"C:\\\\code\\\\Remundo.Pricing.Europe\\\\src\\\\Remundo.Pricing.Console\\\\local.settings.json\",\n              \"RelativeToolTip\": \"Remundo.Pricing.Console\\\\local.settings.json\",\n              \"ViewState\": \"AgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n              \"Icon\": \"ae27a6b0-e345-4288-96df-5eaf394ee369.001642|\",\n              \"WhenOpened\": \"2025-07-10T11:22:04.009Z\",\n              \"EditorCaption\": \"\"\n            },\n            {\n              \"$type\": \"Document\",\n              \"DocumentIndex\": 3,\n              \"Title\": \"Dockerfile\",\n              \"DocumentMoniker\": \"C:\\\\code\\\\Remundo.Pricing.Europe\\\\Dockerfile\",\n              \"RelativeDocumentMoniker\": \"..\\\\Dockerfile\",\n              \"ToolTip\": \"C:\\\\code\\\\Remundo.Pricing.Europe\\\\Dockerfile\",\n              \"RelativeToolTip\": \"..\\\\Dockerfile\",\n              \"ViewState\": \"AgIAAAAAAAAAAAAAAAAAABEAAAABAAAAAAAAAA==\",\n              \"Icon\": \"ae27a6b0-e345-4288-96df-5eaf394ee369.001001|\",\n              \"WhenOpened\": \"2025-07-10T09:50:39.2Z\"\n            },\n            {\n              \"$type\": \"Document\",\n              \"DocumentIndex\": 1,\n              \"Title\": \"Program.cs\",\n              \"DocumentMoniker\": \"C:\\\\code\\\\Remundo.Pricing.Europe\\\\src\\\\Remundo.Pricing.Console\\\\Program.cs\",\n              \"RelativeDocumentMoniker\": \"Remundo.Pricing.Console\\\\Program.cs\",\n              \"ToolTip\": \"C:\\\\code\\\\Remundo.Pricing.Europe\\\\src\\\\Remundo.Pricing.Console\\\\Program.cs\",\n              \"RelativeToolTip\": \"Remundo.Pricing.Console\\\\Program.cs\",\n              \"ViewState\": \"AgIAACcAAAAAAAAAAAAowEEAAAAQAAAAAAAAAA==\",\n              \"Icon\": \"ae27a6b0-e345-4288-96df-5eaf394ee369.000738|\",\n              \"WhenOpened\": \"2025-07-09T20:36:29.076Z\"\n            },\n            {\n              \"$type\": \"Document\",\n              \"DocumentIndex\": 2,\n              \"Title\": \"Application.cs\",\n              \"DocumentMoniker\": \"C:\\\\code\\\\Remundo.Pricing.Europe\\\\src\\\\Remundo.Pricing.Console\\\\Application.cs\",\n              \"RelativeDocumentMoniker\": \"Remundo.Pricing.Console\\\\Application.cs\",\n              \"ToolTip\": \"C:\\\\code\\\\Remundo.Pricing.Europe\\\\src\\\\Remundo.Pricing.Console\\\\Application.cs\",\n              \"RelativeToolTip\": \"Remundo.Pricing.Console\\\\Application.cs\",\n              \"ViewState\": \"AgIAAAMAAAAAAAAAAAAmwCkAAAAAAAAAAAAAAA==\",\n              \"Icon\": \"ae27a6b0-e345-4288-96df-5eaf394ee369.000738|\",\n              \"WhenOpened\": \"2025-07-09T20:36:27.076Z\"\n            },\n            {\n              \"$type\": \"Document\",\n              \"DocumentIndex\": 4,\n              \"Title\": \"Bulgaria.cs\",\n              \"DocumentMoniker\": \"C:\\\\code\\\\Remundo.Pricing.Europe\\\\src\\\\Remundo.Pricing.Domain\\\\Aggregates\\\\Bulgaria.cs\",\n              \"RelativeDocumentMoniker\": \"Remundo.Pricing.Domain\\\\Aggregates\\\\Bulgaria.cs\",\n              \"ToolTip\": \"C:\\\\code\\\\Remundo.Pricing.Europe\\\\src\\\\Remundo.Pricing.Domain\\\\Aggregates\\\\Bulgaria.cs\",\n              \"RelativeToolTip\": \"Remundo.Pricing.Domain\\\\Aggregates\\\\Bulgaria.cs\",\n              \"ViewState\": \"AgIAAAAAAAAAAAAAAAAAABsAAAAIAAAAAAAAAA==\",\n              \"Icon\": \"ae27a6b0-e345-4288-96df-5eaf394ee369.000738|\",\n              \"WhenOpened\": \"2025-07-09T17:38:50.307Z\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:1:0:{d212f56b-c48a-434c-a121-1c5d80b59b9f}\"\n            },\n            {\n              \"$type\": \"Bookmark\",\n              \"Name\": \"ST:0:0:{e1b7d1f8-9b3c-49b1-8f4f-bfc63a88835d}\"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}"}
{"text": "// file: src/Remundo.Pricing.Adapter/CloudEventRequestExtensions.cs\n// service: src\n﻿using CloudEventData;\n\nnamespace Remundo.Pricing.Adapter\n{\n    public static class CloudEventRequestExtensions\n    {\n        public static string GetDefaultTenant(this CloudEventRequest r)\n        {\n            return \"XML-INT\";\n        }\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Adapter/ConnectionBuilder.cs\n// service: src\nusing EventStore.ClientAPI;\nusing EventStore.ClientAPI.SystemData;\nusing Microsoft.Extensions.Configuration;\nusing System.Net;\nusing ILogger = NLog.ILogger;\n\nnamespace Remundo.Pricing.Adapter\n{\n    public class ConnectionBuilder : IConnectionBuilder\n    {\n        private readonly ILogger _logger;\n        public Uri ConnectionString { get; }\n        public ConnectionSettings ConnectionSettings { get; }\n        public string ConnectionName { get; }\n        public UserCredentials Credentials { get; }\n        public IEventStoreConnection Connection { get; }\n        public IEventStoreConnection Build(bool openConnection = true)\n        {\n            var conn = EventStoreConnection.Create(ConnectionSettings, ConnectionString, ConnectionName);\n            conn.Disconnected += Conn_Disconnected;\n            conn.Reconnecting += Conn_Reconnecting;\n            conn.Connected += Conn_Connected;\n            if (openConnection)\n                conn.ConnectAsync().Wait();\n\n            return conn;\n        }\n\n        public ConnectionBuilder(Settings settings, ILogger logger)\n        {\n            ConnectionString = new Uri(settings.EventStore_Link);\n            Credentials = new UserCredentials(settings.EventStore_Username, settings.EventStore_Password);\n            ConnectionSettings = BuildConnectionSettings(Credentials);\n            ConnectionName = $\"{settings.CloudRequestSource}-conn\";\n            Connection = Build(false);\n            _logger = logger;\n        }\n\n        private void Conn_Connected(object sender, ClientConnectionEventArgs e)\n        {\n            _logger.Debug($\"Connected to EventStore RemoteEndPoint:'{e.RemoteEndPoint}';ConnectionName:'{e.Connection.ConnectionName}'\");\n        }\n\n        private void Conn_Reconnecting(object sender, ClientReconnectingEventArgs e)\n        {\n            _logger.Debug($\"Reconnecting to EventStore ConnectionName:'{e.Connection.ConnectionName}'\");\n        }\n\n        private void Conn_Disconnected(object sender, ClientConnectionEventArgs e)\n        {\n            _logger.Debug($\"Disconnected from EventStore RemoteEndPoint:'{e.RemoteEndPoint}';ConnectionName:'{e.Connection.ConnectionName}'\");\n        }\n\n        public static ConnectionSettings BuildConnectionSettings(UserCredentials userCredentials)\n        {\n            var connectionSettingsBuilder = ConnectionSettings.Create()\n                .SetDefaultUserCredentials(userCredentials);\n            //.KeepReconnecting().KeepRetrying();\n            return connectionSettingsBuilder.Build();\n        }\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Adapter/IConnectionBuilder.cs\n// service: src\nusing EventStore.ClientAPI;\nusing EventStore.ClientAPI.SystemData;\n\nnamespace Remundo.Pricing.Adapter\n{\n    public interface IConnectionBuilder\n    {\n        string ConnectionName { get; }\n        Uri ConnectionString { get; }\n        ConnectionSettings ConnectionSettings { get; }\n        UserCredentials Credentials { get; }\n        IEventStoreConnection Build(bool openConnection = true);\n        IEventStoreConnection Connection { get; }\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Adapter/Settings.cs\n// service: src\n﻿namespace Remundo.Pricing.Adapter\n{\n    public class Settings\n    {\n        public string QueueName { get; set; }\n        public string ServiceBusConnectionString { get; set; }\n        public string CloudRequestSource { get; set; }\n        public string EventCategory { get; set; }\n        public string EventStore_Certificate { get; set; }\n        public string EventStore_CertificatePrivateKey { get; set; }\n        public string EventStore_Link { get; set; }\n        public string EventStore_Username { get; set; }\n        public string EventStore_Password { get; set; }\n        public string RemundoApiToken { get; set; }\n        public string RemundoHostName { get; set; }\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Adapter/Worker.cs\n// service: src\n﻿using System.Collections.ObjectModel;\nusing System.Text;\nusing CloudEventData;\nusing Evento;\nusing NLog;\nusing Remundo.Pricing.Domain.Aggregates;\nusing Remundo.Pricing.Domain.Commands;\nusing Remundo.Pricing.Domain.Services;\n\nnamespace Remundo.Pricing.Adapter;\n\npublic class Worker :\n    IHandle<CalculatePriceSpain>,\n    IHandle<CalculatePriceLuxembourg>,\n    IHandle<CalculatePriceEngland>,\n    IHandle<CalculatePriceIreland>,\n    IHandle<CalculatePricePortugal>,\n    IHandle<CalculatePriceDefault>\n{\n    private readonly IDomainRepository _domainRepository;\n    private readonly ILogger _logger;\n    private readonly IHttpService _httpService;\n    private readonly Dictionary<string, Func<CloudEventRequest, Command>> _deserializers = CreateDeserializersMapping();\n    private readonly IDictionary<string, Func<RecalculatePrice, IAggregate>> _priceRecalculations;\n\n    public Worker(IDomainRepository domainRepository, ILogger logger, IHttpService httpService)\n    {\n        _domainRepository = domainRepository;\n        _logger = logger;\n        _httpService = httpService;\n        _priceRecalculations = new Dictionary<string, Func<RecalculatePrice, IAggregate>>\n        {\n            {\"RecalculatePrice-ES\", HandleRecalculatePriceForSpain},\n            {\"RecalculatePrice-ES-V1\", HandleRecalculatePriceForSpain},\n            {\"RecalculatePriceV2-ES\", HandleRecalculatePriceForSpain},\n            {\"RecalculatePrice-PT\", HandleRecalculatePriceForPortugal},\n            {\"RecalculatePriceV2-PT\", HandleRecalculatePriceForPortugal},\n            {\"RecalculatePrice-LU\", HandleRecalculatePriceForLuxembourg},\n            {\"RecalculatePriceV2-LU\", HandleRecalculatePriceForLuxembourg},\n            {\"RecalculatePrice-GB\", HandleRecalculatePriceForUnitedKingdom},\n            {\"RecalculatePriceV2-GB\", HandleRecalculatePriceForUnitedKingdom},\n            {\"RecalculatePrice-GB-ENG\", HandleRecalculatePriceForEngland},\n            {\"RecalculatePriceV2-GB-ENG\", HandleRecalculatePriceForEngland},\n            {\"RecalculatePrice-IE\", HandleRecalculatePriceForIreland},\n            {\"RecalculatePriceV2-IE\", HandleRecalculatePriceForIreland},\n            {\"RecalculatePriceV2-Default\", HandleRecalculatePriceForDefault},\n            {\"RecalculatePrice-FR\", HandleRecalculatePriceForFrance },\n            {\"RecalculatePriceV2-FR\", HandleRecalculatePriceForFrance },\n            {\"RecalculatePrice-BG\", HandleRecalculatePriceForBulgaria },\n            {\"RecalculatePriceV2-BG\", HandleRecalculatePriceForBulgaria },\n            {\"RecalculatePriceV2-AT\", HandleRecalculatePriceForAustria },\n            {\"RecalculatePriceV2-DE\", HandleRecalculatePriceForGermany },\n            {\"RecalculatePriceV2-IT\", HandleRecalculatePriceForItaly },\n            {\"RecalculatePriceV2-BE\", HandleRecalculatePriceForBelgium },\n            {\"RecalculatePriceV2-SK\", HandleRecalculatePriceForSlovakia },\n            {\"RecalculatePriceV2-CY\", HandleRecalculatePriceForCyprus },\n            {\"RecalculatePriceV2-HR\" , HandleRecalculatePriceForCroatia },\n            {\"RecalculatePriceV2-CZ\" , HandleRecalculatePriceForCzechRepublic },\n            {\"RecalculatePriceV2-CH\" , HandleRecalculatePriceForSwitzerland },\n            {\"RecalculatePriceV2-NL\" , HandleRecalculatePriceForNetherlands },\n            {\"RecalculatePriceV2-DK\" , HandleRecalculatePriceForDenmark },\n        };\n    }\n\n    private Func<RecalculatePrice, IAggregate> GetPriceRecalculation(string type)\n    {\n        if (_priceRecalculations.TryGetValue(type, out var func)) { return func; }\n        var foo = string.Join(\"-\", type.Split('-').Take(type.Split('-').Length - 1));\n        return _priceRecalculations[foo];\n    }\n\n    public void Process(CloudEventRequest cloudRequest)\n    {\n        if (!_deserializers.ContainsKey(cloudRequest.DataSchema.ToString()) &&\n            !_deserializers.ContainsKey($\"{cloudRequest.DataSchema}{cloudRequest.Source}\"))\n            throw new Exception(\n                $\"I can't find a mapper for schema:'{cloudRequest.DataSchema}' source:''{cloudRequest.Source}''\");\n\n        var command = _deserializers.ContainsKey(cloudRequest.DataSchema.ToString())\n            ? _deserializers[cloudRequest.DataSchema.ToString()](cloudRequest)\n            : _deserializers[$\"{cloudRequest.DataSchema}{cloudRequest.Source}\"](cloudRequest);\n\n        if (command == null)\n            throw new Exception(\n                $\"I received CloudRequest Type:'{cloudRequest.Type}' Source:'{cloudRequest.Source}' Schema:'{cloudRequest.DataSchema}' but I was unable to deserialize a Command out of it\");\n\n        if (command.Metadata.Count > 0)\n        {\n            ScopeContext.Clear();\n            var metadataToLog = new ReadOnlyDictionary<string, string>(command.Metadata.ToDictionary(x => x.Key.Replace(\"$\", \"\"), x => x.Value));\n            ScopeContext.PushProperties(metadataToLog);\n        }\n\n        IAggregate aggregate = null;\n        try\n        {\n            switch (command)\n            {\n                case CalculatePriceSpain calculatePriceSpain:\n                    aggregate = Handle(calculatePriceSpain);\n                    break;\n                case CalculatePricePortugal calculatePricePortugal:\n                    aggregate = Handle(calculatePricePortugal);\n                    break;\n                case CalculatePriceLuxembourg calculatePriceLuxembourg:\n                    aggregate = Handle(calculatePriceLuxembourg);\n                    break;\n                case CalculatePriceUnitedKingdom calculatePriceUnitedKingdom:\n                    aggregate = Handle(calculatePriceUnitedKingdom);\n                    break;\n                case CalculatePriceEngland calculatePriceEngland:\n                    aggregate = Handle(calculatePriceEngland);\n                    break;\n                case CalculatePriceIreland calculatePriceIreland:\n                    aggregate = Handle(calculatePriceIreland);\n                    break;\n                case CalculatePriceDefault calculatePriceDefault:\n                    aggregate = Handle(calculatePriceDefault);\n                    break;\n                case CalculatePriceFrance calculatePriceFrance:\n                    aggregate = Handle(calculatePriceFrance);\n                    break;\n                case CalculatePriceGermany calculatePriceGermany:\n                    aggregate = Handle(calculatePriceGermany);\n                    break;\n                case CalculatePriceAustria calculatePriceAustria:\n                    aggregate = Handle(calculatePriceAustria);\n                    break;\n                case CalculatePriceItaly calculatePriceItaly:\n                    aggregate = Handle(calculatePriceItaly);\n                    break;\n                case CalculatePriceBelgium calculatePriceBelgium:\n                    aggregate = Handle(calculatePriceBelgium);\n                    break;\n                case CalculatePriceSlovakia calculatePriceSlovakia:\n                    aggregate = Handle(calculatePriceSlovakia);\n                    break;\n                case CalculatePriceBulgaria calculatePriceBulgaria:\n                    aggregate = Handle(calculatePriceBulgaria);\n                    break;\n                case CalculatePriceCyprus calculatePriceCyprus:\n                    aggregate = Handle(calculatePriceCyprus);\n                    break;\n                case CalculatePriceCroatia calculatePriceCroatia:\n                    aggregate = Handle(calculatePriceCroatia);\n                    break;\n                case CalculatePriceCzechRepublic cmd:\n                    aggregate = Handle(cmd);\n                    break;\n                case CalculatePriceSwitzerland cmd:\n                    aggregate = Handle(cmd);\n                    break;\n                case CalculatePriceNetherlands cmd:\n                    aggregate = Handle(cmd);\n                    break;\n                case CalculatePriceDenmark cmd:\n                    aggregate = Handle(cmd);\n                    break;\n                case RecalculatePrice recalculatePrice:\n                    var fn = GetPriceRecalculation(cloudRequest.Type);\n                    aggregate = fn(recalculatePrice);\n                    break;\n            }\n            // Add here any further command matches\n\n            if (aggregate == null)\n                throw new Exception(\n                    $\"Received CloudRequest Type:'{cloudRequest.Type}' Source:'{cloudRequest.Source}' Schema:'{cloudRequest.DataSchema}' but I can't find an available handler for it\");\n        }\n        finally\n        {\n            if (aggregate != null && aggregate.UncommitedEvents().Any())\n            {\n                var uncommittedEventsList = aggregate.UncommitedEvents().ToList();\n                _domainRepository.Save(aggregate);\n\n                var error = new StringBuilder();\n                foreach (var uncommittedEvent in uncommittedEventsList)\n                {\n                    _logger.Info(\n                        $\"Handled '{cloudRequest.Type}' AggregateId:'{aggregate.AggregateId}' [0]Resulted event:'{uncommittedEvent.GetType()}'\");\n\n                    if (uncommittedEvent.GetType().ToString().EndsWith(\"FailedV1\"))\n                    {\n                        error.Append(HandleFailedEvent(uncommittedEvent, command));\n                    }\n                }\n\n                if (error.Length > 0)\n                {\n                    // TODO do we need our own BusinessException?\n                    throw new Exception(error.ToString());\n                }\n            }\n            else\n                _logger.Info(\n                    $\"Handled CloudRequest Type:'{cloudRequest.Type}' Source:'{cloudRequest.Source}' Schema:'{cloudRequest.DataSchema}' with no events to save\");\n        }\n    }\n\n\n    private string HandleFailedEvent(Event failedEvent, Command command)\n    {\n        var errMessage = string.Empty;\n        var errForLogging = string.Empty;\n        if (failedEvent.GetType().ToString().EndsWith(\"FailedV1\"))\n        {\n            errMessage = !failedEvent.Metadata.ContainsKey(\"remundo-error\")\n                ? $\"Error while processing a '{command.Metadata[\"source\"]}' (no error message has been set in command metadata)\"\n                : $\"Error while processing a '{command.Metadata[\"source\"]}' contracting: {failedEvent.Metadata[\"remundo-error\"]}\";\n            errForLogging = failedEvent.Metadata.ContainsKey(\"remundo-error\") ? failedEvent.Metadata[\"remundo-error\"] : \"undefined\";\n        }\n\n        var errStack = !failedEvent.Metadata.ContainsKey(\"error-stack\")\n            ? string.Empty\n            : $\"StackTrace: {failedEvent.Metadata[\"error-stack\"]}\";\n        var err = $\"{errMessage} - {errStack}\";\n        var correlationId = failedEvent.Metadata.ContainsKey(\"$correlationId\")\n            ? failedEvent.Metadata[\"$correlationId\"]\n            : \"undefined\";"}
{"text": "// file: src/Remundo.Pricing.Adapter/Worker.cs\n// service: src\n$\"Handled '{cloudRequest.Type}' AggregateId:'{aggregate.AggregateId}' [0]Resulted event:'{uncommittedEvent.GetType()}'\");\n\n                    if (uncommittedEvent.GetType().ToString().EndsWith(\"FailedV1\"))\n                    {\n                        error.Append(HandleFailedEvent(uncommittedEvent, command));\n                    }\n                }\n\n                if (error.Length > 0)\n                {\n                    // TODO do we need our own BusinessException?\n                    throw new Exception(error.ToString());\n                }\n            }\n            else\n                _logger.Info(\n                    $\"Handled CloudRequest Type:'{cloudRequest.Type}' Source:'{cloudRequest.Source}' Schema:'{cloudRequest.DataSchema}' with no events to save\");\n        }\n    }\n\n\n    private string HandleFailedEvent(Event failedEvent, Command command)\n    {\n        var errMessage = string.Empty;\n        var errForLogging = string.Empty;\n        if (failedEvent.GetType().ToString().EndsWith(\"FailedV1\"))\n        {\n            errMessage = !failedEvent.Metadata.ContainsKey(\"remundo-error\")\n                ? $\"Error while processing a '{command.Metadata[\"source\"]}' (no error message has been set in command metadata)\"\n                : $\"Error while processing a '{command.Metadata[\"source\"]}' contracting: {failedEvent.Metadata[\"remundo-error\"]}\";\n            errForLogging = failedEvent.Metadata.ContainsKey(\"remundo-error\") ? failedEvent.Metadata[\"remundo-error\"] : \"undefined\";\n        }\n\n        var errStack = !failedEvent.Metadata.ContainsKey(\"error-stack\")\n            ? string.Empty\n            : $\"StackTrace: {failedEvent.Metadata[\"error-stack\"]}\";\n        var err = $\"{errMessage} - {errStack}\";\n        var correlationId = failedEvent.Metadata.ContainsKey(\"$correlationId\")\n            ? failedEvent.Metadata[\"$correlationId\"]\n            : \"undefined\";\n\n        var msgToLog = $\"CorrelationId:'{correlationId}';{errForLogging}\";\n        _logger.Error(msgToLog);\n        return err;\n    }\n\n    private static Dictionary<string, Func<CloudEventRequest, Command>> CreateDeserializersMapping()\n    {\n        var mappers =\n            AppDomain.CurrentDomain.GetAssemblies()\n                .SelectMany(t => t.GetTypes())\n                .Where(t => t.IsClass && !t.IsAbstract && t.Namespace is not null \n                    && t.Namespace.StartsWith(\"Remundo.Pricing.Adapter.Mappers\", StringComparison.Ordinal))\n                .ToList();\n\n        var deserialisers = new Dictionary<string, Func<CloudEventRequest, Command>>();\n\n        foreach (var mapper in mappers)\n        {\n            var instance = Activator.CreateInstance(mapper);\n            var schemaField = mapper?.GetProperty(\"Schema\")?.GetValue(instance)?.ToString();\n\n            var methodInfo = mapper.GetMethod(\"Map\");\n            Command func(CloudEventRequest request) => (Command)methodInfo.Invoke(instance, new object[] { request });\n            deserialisers.Add(schemaField, func);\n        }\n\n        return deserialisers;\n    }\n\n    public IAggregate Handle(CalculatePriceDefault command)\n    {\n        Default aggregate;\n\n        try\n        {\n            aggregate = _domainRepository.GetById<Default>(command.Metadata[\"$correlationId\"]);\n        }\n        catch (AggregateNotFoundException)\n        {\n            aggregate = Default.Create();\n        }\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.CalculatePrice(command, _httpService, calculator);\n\n        return aggregate;\n    }\n\n    public IAggregate Handle(CalculatePriceSpain command)\n    {\n        Spain aggregate;\n\n        try\n        {\n            aggregate = _domainRepository.GetById<Spain>(command.Metadata[\"$correlationId\"]);\n        }\n        catch (AggregateNotFoundException)\n        {\n            aggregate = Spain.Create();\n        }\n\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.CalculatePrice(command, _httpService, calculator);\n\n        return aggregate;\n    }\n\n    public IAggregate Handle(CalculatePricePortugal command)\n    {\n        Portugal aggregate;\n\n        try\n        {\n            aggregate = _domainRepository.GetById<Portugal>(command.Metadata[\"$correlationId\"]);\n        }\n        catch (AggregateNotFoundException)\n        {\n            aggregate = Portugal.Create();\n        }\n\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.CalculatePrice(command, _httpService, calculator);\n\n        return aggregate;\n    }\n\n    public IAggregate Handle(CalculatePriceLuxembourg command)\n    {\n        Luxembourg aggregate;\n\n        try\n        {\n            aggregate = _domainRepository.GetById<Luxembourg>(command.Metadata[\"$correlationId\"]);\n        }\n        catch (AggregateNotFoundException)\n        {\n            aggregate = Luxembourg.Create();\n        }\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.CalculatePrice(command, _httpService, calculator);\n\n        return aggregate;\n    }\n\n    public IAggregate Handle(CalculatePriceUnitedKingdom command)\n    {\n        UnitedKingdom aggregate;\n\n        try\n        {\n            aggregate = _domainRepository.GetById<UnitedKingdom>(command.Metadata[\"$correlationId\"]);\n        }\n        catch (AggregateNotFoundException)\n        {\n            aggregate = UnitedKingdom.Create();\n        }\n\n        var calculator = GetCalculator(command.TenantId);\n\n        aggregate.CalculatePrice(command, _httpService, calculator);\n\n        return aggregate;\n    }\n\n    public IAggregate Handle(CalculatePriceEngland command)\n    {\n        England aggregate;\n\n        try\n        {\n            aggregate = _domainRepository.GetById<England>(command.Metadata[\"$correlationId\"]);\n        }\n        catch (AggregateNotFoundException)\n        {\n            aggregate = England.Create();\n        }\n\n        var calculator = GetCalculator(command.TenantId);\n\n        aggregate.CalculatePrice(command, _httpService, calculator);\n\n        return aggregate;\n    }\n\n    public static ICostsCalculator? GetCalculator(string tenantId)\n    {\n        if (tenantId == null) return null;\n        var type = typeof(ICostsCalculator);\n        var types = AppDomain.CurrentDomain.GetAssemblies()\n            .SelectMany(s => s.GetTypes())\n            .Where(p => type.IsAssignableFrom(p) && !p.IsInterface);\n\n        foreach (var costCalculatorClass in types)\n        {\n            if (tenantId.ToLower().StartsWith(costCalculatorClass.Name.ToLower()))\n            {\n                return Activator.CreateInstance(costCalculatorClass) as ICostsCalculator;\n            }\n        }\n\n        return null;\n    }\n\n    public IAggregate Handle(CalculatePriceFrance command)\n    {\n        France aggregate;\n\n        try\n        {\n            aggregate = _domainRepository.GetById<France>(command.Metadata[\"$correlationId\"]);\n        }\n        catch (AggregateNotFoundException)\n        {\n            aggregate = France.Create();\n        }\n\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.CalculatePrice(command, _httpService, calculator);\n\n        return aggregate;"}
{"text": "// file: src/Remundo.Pricing.Adapter/Worker.cs\n// service: src\nreturn aggregate;\n    }\n\n    public static ICostsCalculator? GetCalculator(string tenantId)\n    {\n        if (tenantId == null) return null;\n        var type = typeof(ICostsCalculator);\n        var types = AppDomain.CurrentDomain.GetAssemblies()\n            .SelectMany(s => s.GetTypes())\n            .Where(p => type.IsAssignableFrom(p) && !p.IsInterface);\n\n        foreach (var costCalculatorClass in types)\n        {\n            if (tenantId.ToLower().StartsWith(costCalculatorClass.Name.ToLower()))\n            {\n                return Activator.CreateInstance(costCalculatorClass) as ICostsCalculator;\n            }\n        }\n\n        return null;\n    }\n\n    public IAggregate Handle(CalculatePriceFrance command)\n    {\n        France aggregate;\n\n        try\n        {\n            aggregate = _domainRepository.GetById<France>(command.Metadata[\"$correlationId\"]);\n        }\n        catch (AggregateNotFoundException)\n        {\n            aggregate = France.Create();\n        }\n\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.CalculatePrice(command, _httpService, calculator);\n\n        return aggregate;\n    }\n\n    public IAggregate Handle(CalculatePriceBulgaria command)\n    {\n        Bulgaria aggregate;\n\n        try\n        {\n            aggregate = _domainRepository.GetById<Bulgaria>(command.Metadata[\"$correlationId\"]);\n        }\n        catch (AggregateNotFoundException)\n        {\n            aggregate = Bulgaria.Create();\n        }\n\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.CalculatePrice(command, _httpService, calculator);\n\n        return aggregate;\n    }\n\n    public IAggregate Handle(CalculatePriceIreland command)\n    {\n        Ireland aggregate;\n\n        try\n        {\n            aggregate = _domainRepository.GetById<Ireland>(command.Metadata[\"$correlationId\"]);\n        }\n        catch (AggregateNotFoundException)\n        {\n            aggregate = Ireland.Create();\n        }\n\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.CalculatePrice(command, _httpService, calculator);\n\n        return aggregate;\n    }\n\n    public IAggregate Handle(CalculatePriceGermany command)\n    {\n        Germany aggregate;\n\n        try\n        {\n            aggregate = _domainRepository.GetById<Germany>(command.Metadata[\"$correlationId\"]);\n        }\n        catch (AggregateNotFoundException)\n        {\n            aggregate = Germany.Create();\n        }\n\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.CalculatePrice(command, _httpService, calculator);\n\n        return aggregate;\n    }\n\n    public IAggregate Handle(CalculatePriceAustria command)\n    {\n        Austria aggregate;\n\n        try\n        {\n            aggregate = _domainRepository.GetById<Austria>(command.Metadata[\"$correlationId\"]);\n        }\n        catch (AggregateNotFoundException)\n        {\n            aggregate = Austria.Create();\n        }\n\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.CalculatePrice(command, _httpService, calculator);\n\n        return aggregate;\n    }\n\n    public IAggregate Handle(CalculatePriceItaly command)\n    {\n        Italy aggregate;\n\n        try\n        {\n            aggregate = _domainRepository.GetById<Italy>(command.Metadata[\"$correlationId\"]);\n        }\n        catch (AggregateNotFoundException)\n        {\n            aggregate = Italy.Create();\n        }\n\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.CalculatePrice(command, _httpService, calculator);\n\n        return aggregate;\n    }\n\n    public IAggregate Handle(CalculatePriceBelgium command)\n    {\n        Belgium aggregate;\n\n        try\n        {\n            aggregate = _domainRepository.GetById<Belgium>(command.Metadata[\"$correlationId\"]);\n        }\n        catch (AggregateNotFoundException)\n        {\n            aggregate = Belgium.Create();\n        }\n\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.CalculatePrice(command, _httpService, calculator);\n\n        return aggregate;\n    }\n\n    public IAggregate Handle(CalculatePriceSlovakia command)\n    {\n        Slovakia aggregate;\n\n        try\n        {\n            aggregate = _domainRepository.GetById<Slovakia>(command.Metadata[\"$correlationId\"]);\n        }\n        catch (AggregateNotFoundException)\n        {\n            aggregate = Slovakia.Create();\n        }\n\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.CalculatePrice(command, _httpService, calculator);\n\n        return aggregate;\n    }\n\n    public IAggregate Handle(CalculatePriceCyprus command)\n    {\n        Cyprus aggregate;\n\n        try\n        {\n            aggregate = _domainRepository.GetById<Cyprus>(command.Metadata[\"$correlationId\"]);\n        }\n        catch (AggregateNotFoundException)\n        {\n            aggregate = Cyprus.Create();\n        }\n\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.CalculatePrice(command, _httpService, calculator);\n\n        return aggregate;\n    }\n\n    public IAggregate Handle(CalculatePriceCroatia command)\n    {\n        Croatia aggregate;\n\n        try\n        {\n            aggregate = _domainRepository.GetById<Croatia>(command.Metadata[\"$correlationId\"]);\n        }\n        catch (AggregateNotFoundException)\n        {\n            aggregate = Croatia.Create();\n        }\n\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.CalculatePrice(command, _httpService, calculator);\n\n        return aggregate;\n    }\n\n    public IAggregate Handle(CalculatePriceCzechRepublic command)\n    {\n        CzechRepublic aggregate;\n\n        try\n        {\n            aggregate = _domainRepository.GetById<CzechRepublic>(command.Metadata[\"$correlationId\"]);"}
{"text": "// file: src/Remundo.Pricing.Adapter/Worker.cs\n// service: src\n{\n            aggregate = _domainRepository.GetById<Cyprus>(command.Metadata[\"$correlationId\"]);\n        }\n        catch (AggregateNotFoundException)\n        {\n            aggregate = Cyprus.Create();\n        }\n\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.CalculatePrice(command, _httpService, calculator);\n\n        return aggregate;\n    }\n\n    public IAggregate Handle(CalculatePriceCroatia command)\n    {\n        Croatia aggregate;\n\n        try\n        {\n            aggregate = _domainRepository.GetById<Croatia>(command.Metadata[\"$correlationId\"]);\n        }\n        catch (AggregateNotFoundException)\n        {\n            aggregate = Croatia.Create();\n        }\n\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.CalculatePrice(command, _httpService, calculator);\n\n        return aggregate;\n    }\n\n    public IAggregate Handle(CalculatePriceCzechRepublic command)\n    {\n        CzechRepublic aggregate;\n\n        try\n        {\n            aggregate = _domainRepository.GetById<CzechRepublic>(command.Metadata[\"$correlationId\"]);\n        }\n        catch (AggregateNotFoundException)\n        {\n            aggregate = CzechRepublic.Create();\n        }\n\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.CalculatePrice(command, _httpService, calculator);\n\n        return aggregate;\n    }\n\n    public IAggregate Handle(CalculatePriceSwitzerland command)\n    {\n        Switzerland aggregate;\n\n        try\n        {\n            aggregate = _domainRepository.GetById<Switzerland>(command.Metadata[\"$correlationId\"]);\n        }\n        catch (AggregateNotFoundException)\n        {\n            aggregate = Switzerland.Create();\n        }\n\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.CalculatePrice(command, _httpService, calculator);\n\n        return aggregate;\n    }\n\n    public IAggregate Handle(CalculatePriceNetherlands command)\n    {\n        Netherlands aggregate;\n\n        try\n        {\n            aggregate = _domainRepository.GetById<Netherlands>(command.Metadata[\"$correlationId\"]);\n        }\n        catch (AggregateNotFoundException)\n        {\n            aggregate = Netherlands.Create();\n        }\n\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.CalculatePrice(command, _httpService, calculator);\n\n        return aggregate;\n    }\n\n    public IAggregate Handle(CalculatePriceDenmark command)\n    {\n        Denmark aggregate;\n\n        try\n        {\n            aggregate = _domainRepository.GetById<Denmark>(command.Metadata[\"$correlationId\"]);\n        }\n        catch (AggregateNotFoundException)\n        {\n            aggregate = Denmark.Create();\n        }\n\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.CalculatePrice(command, _httpService, calculator);\n\n        return aggregate;\n    }\n\n    public IAggregate HandleRecalculatePriceForDefault(RecalculatePrice command)\n    {\n        var aggregate = _domainRepository.GetById<Default>(command.Metadata[\"$correlationId\"]);\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.RecalculatePrice(command, _httpService, calculator);\n        return aggregate;\n    }\n\n    public IAggregate HandleRecalculatePriceForSpain(RecalculatePrice command)\n    {\n        var aggregate = _domainRepository.GetById<Spain>(command.Metadata[\"$correlationId\"]);\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.RecalculatePrice(command, _httpService, calculator);\n        return aggregate;\n    }\n\n    public IAggregate HandleRecalculatePriceForPortugal(RecalculatePrice command)\n    {\n        var aggregate = _domainRepository.GetById<Portugal>(command.Metadata[\"$correlationId\"]);\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.RecalculatePrice(command, _httpService, calculator);\n        return aggregate;\n    }\n\n    public IAggregate HandleRecalculatePriceForLuxembourg(RecalculatePrice command)\n    {\n        var aggregate = _domainRepository.GetById<Luxembourg>(command.Metadata[\"$correlationId\"]);\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.RecalculatePrice(command, _httpService, calculator);\n        return aggregate;\n    }\n    public IAggregate HandleRecalculatePriceForUnitedKingdom(RecalculatePrice command)\n    {\n        var aggregate = _domainRepository.GetById<UnitedKingdom>(command.Metadata[\"$correlationId\"]);\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.RecalculatePrice(command, _httpService, calculator);\n        return aggregate;\n    }\n\n\n    public IAggregate HandleRecalculatePriceForEngland(RecalculatePrice command)\n    {\n        var aggregate = _domainRepository.GetById<England>(command.Metadata[\"$correlationId\"]);\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.RecalculatePrice(command, _httpService, calculator);\n        return aggregate;\n    }\n\n    public IAggregate HandleRecalculatePriceForIreland(RecalculatePrice command)\n    {\n        var aggregate = _domainRepository.GetById<Ireland>(command.Metadata[\"$correlationId\"]);\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.RecalculatePrice(command, _httpService, calculator);\n        return aggregate;\n    }\n\n    public IAggregate HandleRecalculatePriceForFrance(RecalculatePrice command)\n    {\n        var aggregate = _domainRepository.GetById<France>(command.Metadata[\"$correlationId\"]);\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.RecalculatePrice(command, _httpService, calculator);\n        return aggregate;\n    }\n\n    public IAggregate HandleRecalculatePriceForBulgaria(RecalculatePrice command)\n    {\n        var aggregate = _domainRepository.GetById<Bulgaria>(command.Metadata[\"$correlationId\"]);\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.RecalculatePrice(command, _httpService, calculator);\n        return aggregate;\n    }\n\n    public IAggregate HandleRecalculatePriceForGermany(RecalculatePrice command)\n    {\n        var aggregate = _domainRepository.GetById<Germany>(command.Metadata[\"$correlationId\"]);\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.RecalculatePrice(command, _httpService, calculator);\n        return aggregate;\n    }\n\n    public IAggregate HandleRecalculatePriceForAustria(RecalculatePrice command)\n    {\n        var aggregate = _domainRepository.GetById<Austria>(command.Metadata[\"$correlationId\"]);\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.RecalculatePrice(command, _httpService, calculator);\n        return aggregate;\n    }\n\n    public IAggregate HandleRecalculatePriceForBelgium(RecalculatePrice command)\n    {\n        var aggregate = _domainRepository.GetById<Belgium>(command.Metadata[\"$correlationId\"]);\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.RecalculatePrice(command, _httpService, calculator);\n        return aggregate;\n    }\n\n    public IAggregate HandleRecalculatePriceForItaly(RecalculatePrice command)\n    {\n        var aggregate = _domainRepository.GetById<Italy>(command.Metadata[\"$correlationId\"]);\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.RecalculatePrice(command, _httpService, calculator);\n        return aggregate;\n    }\n\n    public IAggregate HandleRecalculatePriceForSlovakia(RecalculatePrice command)\n    {\n        var aggregate = _domainRepository.GetById<Slovakia>(command.Metadata[\"$correlationId\"]);\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.RecalculatePrice(command, _httpService, calculator);\n        return aggregate;\n    }"}
{"text": "// file: src/Remundo.Pricing.Adapter/Worker.cs\n// service: src\npublic IAggregate HandleRecalculatePriceForGermany(RecalculatePrice command)\n    {\n        var aggregate = _domainRepository.GetById<Germany>(command.Metadata[\"$correlationId\"]);\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.RecalculatePrice(command, _httpService, calculator);\n        return aggregate;\n    }\n\n    public IAggregate HandleRecalculatePriceForAustria(RecalculatePrice command)\n    {\n        var aggregate = _domainRepository.GetById<Austria>(command.Metadata[\"$correlationId\"]);\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.RecalculatePrice(command, _httpService, calculator);\n        return aggregate;\n    }\n\n    public IAggregate HandleRecalculatePriceForBelgium(RecalculatePrice command)\n    {\n        var aggregate = _domainRepository.GetById<Belgium>(command.Metadata[\"$correlationId\"]);\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.RecalculatePrice(command, _httpService, calculator);\n        return aggregate;\n    }\n\n    public IAggregate HandleRecalculatePriceForItaly(RecalculatePrice command)\n    {\n        var aggregate = _domainRepository.GetById<Italy>(command.Metadata[\"$correlationId\"]);\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.RecalculatePrice(command, _httpService, calculator);\n        return aggregate;\n    }\n\n    public IAggregate HandleRecalculatePriceForSlovakia(RecalculatePrice command)\n    {\n        var aggregate = _domainRepository.GetById<Slovakia>(command.Metadata[\"$correlationId\"]);\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.RecalculatePrice(command, _httpService, calculator);\n        return aggregate;\n    }\n\n    public IAggregate HandleRecalculatePriceForCyprus(RecalculatePrice command)\n    {\n        var aggregate = _domainRepository.GetById<Cyprus>(command.Metadata[\"$correlationId\"]);\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.RecalculatePrice(command, _httpService, calculator);\n        return aggregate;\n    }\n\n    public IAggregate HandleRecalculatePriceForCroatia(RecalculatePrice command)\n    {\n        var aggregate = _domainRepository.GetById<Croatia>(command.Metadata[\"$correlationId\"]);\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.RecalculatePrice(command, _httpService, calculator);\n        return aggregate;\n    }\n\n    public IAggregate HandleRecalculatePriceForCzechRepublic(RecalculatePrice command)\n    {\n        var aggregate = _domainRepository.GetById<CzechRepublic>(command.Metadata[\"$correlationId\"]);\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.RecalculatePrice(command, _httpService, calculator);\n        return aggregate;\n    }\n\n    public IAggregate HandleRecalculatePriceForSwitzerland(RecalculatePrice command)\n    {\n        var aggregate = _domainRepository.GetById<Switzerland>(command.Metadata[\"$correlationId\"]);\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.RecalculatePrice(command, _httpService, calculator);\n        return aggregate;\n    }\n\n    public IAggregate HandleRecalculatePriceForNetherlands(RecalculatePrice command)\n    {\n        var aggregate = _domainRepository.GetById<Netherlands>(command.Metadata[\"$correlationId\"]);\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.RecalculatePrice(command, _httpService, calculator);\n        return aggregate;\n    }\n\n    public IAggregate HandleRecalculatePriceForDenmark(RecalculatePrice command)\n    {\n        var aggregate = _domainRepository.GetById<Denmark>(command.Metadata[\"$correlationId\"]);\n        var calculator = GetCalculator(command.TenantId);\n        aggregate.RecalculatePrice(command, _httpService, calculator);\n        return aggregate;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Adapter/Mappers/CalculatePriceAustriaMapper.cs\n// service: src\n﻿using CloudEventData;\nusing Evento;\nusing Newtonsoft.Json;\nusing Remundo.Pricing.Domain;\nusing Remundo.Pricing.Domain.Commands;\n\nnamespace Remundo.Pricing.Adapter.Mappers;\n\npublic class CalculatePriceAustriaMapper\n{\n    public Uri Schema => new Uri(\"pricing-AT/1.0\", UriKind.RelativeOrAbsolute);\n    public Uri Source => new Uri(\"pricing-Europe\", UriKind.RelativeOrAbsolute);\n\n    private readonly List<string> _dataContentTypes = new List<string> { \"application/json\", \"application/cloudevents+json\" };\n\n    public Command Map(CloudEventRequest request)\n    {\n        Ensure.NotNull(request, nameof(request));\n        if (!_dataContentTypes.Contains(request.DataContentType))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceAustriaMapper)}' I can't recognize the DataContentType:{request.DataContentType}\");\n        if (!request.DataSchema.Equals(Schema) || !request.Source.Equals(Source))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceAustriaMapper)}' I can't recognize the data (DataSchema:{request.DataSchema};Source:{request.Source})\");\n        CalculatePriceAustria cmd = JsonConvert.DeserializeObject<CalculatePriceAustria>(request.Data.ToString());\n\n        cmd.Metadata = new Dictionary<string, string>\n            {\n                {\"$correlationId\", cmd.CorrelationId},\n                {\"source\", request.Source.ToString()},\n                {\"$applies\", request.Time.ToString(\"O\")},\n                {\"cloudrequest-id\", request.Id},\n                {\"schema\", request.DataSchema.ToString()},\n                {\"content-type\", request.DataContentType},\n                {\"command-type\", request.Type },\n                {\"tenant-id\", cmd.TenantId ?? request.GetDefaultTenant() }\n            };\n        return cmd;\n\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Adapter/Mappers/CalculatePriceBelgiumMapper.cs\n// service: src\n﻿using CloudEventData;\nusing Evento;\nusing Newtonsoft.Json;\nusing Remundo.Pricing.Domain;\nusing Remundo.Pricing.Domain.Commands;\n\nnamespace Remundo.Pricing.Adapter.Mappers;\n\npublic class CalculatePriceBelgiumMapper\n{\n    public Uri Schema => new Uri(\"pricing-BE/1.0\", UriKind.RelativeOrAbsolute);\n    public Uri Source => new Uri(\"pricing-Europe\", UriKind.RelativeOrAbsolute);\n\n    private readonly List<string> _dataContentTypes = new List<string> { \"application/json\", \"application/cloudevents+json\" };\n\n    public Command Map(CloudEventRequest request)\n    {\n        Ensure.NotNull(request, nameof(request));\n        if (!_dataContentTypes.Contains(request.DataContentType))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceBelgiumMapper)}' I can't recognize the DataContentType:{request.DataContentType}\");\n        if (!request.DataSchema.Equals(Schema) || !request.Source.Equals(Source))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceBelgiumMapper)}' I can't recognize the data (DataSchema:{request.DataSchema};Source:{request.Source})\");\n        CalculatePriceBelgium cmd = JsonConvert.DeserializeObject<CalculatePriceBelgium>(request.Data.ToString());\n\n        cmd.Metadata = new Dictionary<string, string>\n            {\n                {\"$correlationId\", cmd.CorrelationId},\n                {\"source\", request.Source.ToString()},\n                {\"$applies\", request.Time.ToString(\"O\")},\n                {\"cloudrequest-id\", request.Id},\n                {\"schema\", request.DataSchema.ToString()},\n                {\"content-type\", request.DataContentType},\n                {\"command-type\", request.Type },\n                {\"tenant-id\", cmd.TenantId ?? request.GetDefaultTenant() }\n            };\n        return cmd;\n\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Adapter/Mappers/CalculatePriceBulgariaMapper.cs\n// service: src\n﻿using CloudEventData;\nusing Evento;\nusing Newtonsoft.Json;\nusing Remundo.Pricing.Domain;\nusing Remundo.Pricing.Domain.Commands;\n\nnamespace Remundo.Pricing.Adapter.Mappers;\n\npublic class CalculatePriceBulgariaMapper\n{\n    public Uri Schema => new Uri(\"pricing-BG/1.0\", UriKind.RelativeOrAbsolute);\n    public Uri Source => new Uri(\"pricing-Europe\", UriKind.RelativeOrAbsolute);\n\n    private readonly List<string> _dataContentTypes = new List<string> { \"application/json\", \"application/cloudevents+json\" };\n\n    public Command Map(CloudEventRequest request)\n    {\n        Ensure.NotNull(request, nameof(request));\n        if (!_dataContentTypes.Contains(request.DataContentType))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceBulgariaMapper)}' I can't recognize the DataContentType:{request.DataContentType}\");\n        if (!request.DataSchema.Equals(Schema) || !request.Source.Equals(Source))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceBulgariaMapper)}' I can't recognize the data (DataSchema:{request.DataSchema};Source:{request.Source})\");\n        CalculatePriceBulgaria cmd = JsonConvert.DeserializeObject<CalculatePriceBulgaria>(request.Data.ToString());\n\n        cmd.Metadata = new Dictionary<string, string>\n            {\n                {\"$correlationId\", cmd.CorrelationId},\n                {\"source\", request.Source.ToString()},\n                {\"$applies\", request.Time.ToString(\"O\")},\n                {\"cloudrequest-id\", request.Id},\n                {\"schema\", request.DataSchema.ToString()},\n                {\"content-type\", request.DataContentType},\n                {\"command-type\", request.Type },\n                {\"tenant-id\", cmd.TenantId ?? request.GetDefaultTenant() }\n            };\n        return cmd;\n\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Adapter/Mappers/CalculatePriceCroatiaMapper.cs\n// service: src\n﻿using CloudEventData;\nusing Evento;\nusing Newtonsoft.Json;\nusing Remundo.Pricing.Domain;\nusing Remundo.Pricing.Domain.Commands;\n\nnamespace Remundo.Pricing.Adapter.Mappers;\npublic class CalculatePriceCroatiaMapper\n{\n    public Uri Schema => new Uri(\"pricing-HR/1.0\", UriKind.RelativeOrAbsolute);\n    public Uri Source => new Uri(\"pricing-Europe\", UriKind.RelativeOrAbsolute);\n\n    private readonly List<string> _dataContentTypes = new List<string> { \"application/json\", \"application/cloudevents+json\" };\n\n    public Command Map(CloudEventRequest request)\n    {\n        Ensure.NotNull(request, nameof(request));\n        if (!_dataContentTypes.Contains(request.DataContentType))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceCroatiaMapper)}' I can't recognize the DataContentType:{request.DataContentType}\");\n        if (!request.DataSchema.Equals(Schema) || !request.Source.Equals(Source))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceCroatiaMapper)}' I can't recognize the data (DataSchema:{request.DataSchema};Source:{request.Source})\");\n        CalculatePriceCroatia cmd = JsonConvert.DeserializeObject<CalculatePriceCroatia>(request.Data.ToString());\n\n        cmd.Metadata = new Dictionary<string, string>\n            {\n                {\"$correlationId\", cmd.CorrelationId},\n                {\"source\", request.Source.ToString()},\n                {\"$applies\", request.Time.ToString(\"O\")},\n                {\"cloudrequest-id\", request.Id},\n                {\"schema\", request.DataSchema.ToString()},\n                {\"content-type\", request.DataContentType},\n                {\"command-type\", request.Type },\n                {\"tenant-id\", cmd.TenantId ?? request.GetDefaultTenant() }\n            };\n        return cmd;\n\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Adapter/Mappers/CalculatePriceCyprusMapper.cs\n// service: src\n﻿using CloudEventData;\nusing Evento;\nusing Newtonsoft.Json;\nusing Remundo.Pricing.Domain;\nusing Remundo.Pricing.Domain.Commands;\n\nnamespace Remundo.Pricing.Adapter.Mappers\n{\n    public class CalculatePriceCyprusMapper\n    {\n        public Uri Schema => new Uri(\"pricing-CY/1.0\", UriKind.RelativeOrAbsolute);\n        public Uri Source => new Uri(\"pricing-Europe\", UriKind.RelativeOrAbsolute);\n\n        private readonly List<string> _dataContentTypes = new List<string> { \"application/json\", \"application/cloudevents+json\" };\n\n        public Command Map(CloudEventRequest request)\n        {\n            Ensure.NotNull(request, nameof(request));\n            if (!_dataContentTypes.Contains(request.DataContentType))\n                throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceCyprusMapper)}' I can't recognize the DataContentType:{request.DataContentType}\");\n            if (!request.DataSchema.Equals(Schema) || !request.Source.Equals(Source))\n                throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceCyprusMapper)}' I can't recognize the data (DataSchema:{request.DataSchema};Source:{request.Source})\");\n            CalculatePriceCyprus cmd = JsonConvert.DeserializeObject<CalculatePriceCyprus>(request.Data.ToString());\n\n            cmd.Metadata = new Dictionary<string, string>\n            {\n                {\"$correlationId\", cmd.CorrelationId},\n                {\"source\", request.Source.ToString()},\n                {\"$applies\", request.Time.ToString(\"O\")},\n                {\"cloudrequest-id\", request.Id},\n                {\"schema\", request.DataSchema.ToString()},\n                {\"content-type\", request.DataContentType},\n                {\"command-type\", request.Type},\n                {\"tenant-id\", cmd.TenantId ?? request.GetDefaultTenant() }\n            };\n            return cmd;\n        }\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Adapter/Mappers/CalculatePriceCzechRepublicMapper.cs\n// service: src\n﻿using CloudEventData;\nusing Evento;\nusing Newtonsoft.Json;\nusing Remundo.Pricing.Domain;\nusing Remundo.Pricing.Domain.Commands;\n\nnamespace Remundo.Pricing.Adapter.Mappers;\n\npublic class CalculatePriceCzechRepublicMapper\n{\n    public Uri Schema => new Uri(\"pricing-CZ/1.0\", UriKind.RelativeOrAbsolute);\n    public Uri Source => new Uri(\"pricing-Europe\", UriKind.RelativeOrAbsolute);\n\n    private readonly List<string> _dataContentTypes = new List<string> { \"application/json\", \"application/cloudevents+json\" };\n\n    public Command Map(CloudEventRequest request)\n    {\n        Ensure.NotNull(request, nameof(request));\n        if (!_dataContentTypes.Contains(request.DataContentType))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceCzechRepublicMapper)}' I can't recognize the DataContentType:{request.DataContentType}\");\n        if (!request.DataSchema.Equals(Schema) || !request.Source.Equals(Source))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceCzechRepublicMapper)}' I can't recognize the data (DataSchema:{request.DataSchema};Source:{request.Source})\");\n        CalculatePriceCzechRepublic cmd = JsonConvert.DeserializeObject<CalculatePriceCzechRepublic>(request.Data.ToString());\n\n        cmd.Metadata = new Dictionary<string, string>\n        {\n            {\"$correlationId\", cmd.CorrelationId},\n            {\"source\", request.Source.ToString()},\n            {\"$applies\", request.Time.ToString(\"O\")},\n            {\"cloudrequest-id\", request.Id},\n            {\"schema\", request.DataSchema.ToString()},\n            {\"content-type\", request.DataContentType},\n            {\"command-type\", request.Type},\n            {\"tenant-id\", cmd.TenantId ?? request.GetDefaultTenant() }\n        };\n        return cmd;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Adapter/Mappers/CalculatePriceDefaultMapper.cs\n// service: src\n﻿using CloudEventData;\nusing Evento;\nusing Newtonsoft.Json;\nusing Remundo.Pricing.Domain;\nusing Remundo.Pricing.Domain.Commands;\n\nnamespace Remundo.Pricing.Adapter.Mappers\n{\n    public class CalculatePriceDefaultMapper\n    {\n        public Uri Schema => new Uri(\"pricing-Default/1.0\", UriKind.RelativeOrAbsolute);\n        public Uri Source => new Uri(\"pricing-Europe\", UriKind.RelativeOrAbsolute);\n\n        private readonly List<string> _dataContentTypes = new List<string> { \"application/json\", \"application/cloudevents+json\" };\n\n        public Command Map(CloudEventRequest request)\n        {\n            Ensure.NotNull(request, nameof(request));\n            if (!_dataContentTypes.Contains(request.DataContentType))\n                throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceDefaultMapper)}' I can't recognize the DataContentType:{request.DataContentType}\");\n            if (!request.DataSchema.Equals(Schema) || !request.Source.Equals(Source))\n                throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceDefaultMapper)}' I can't recognize the data (DataSchema:{request.DataSchema};Source:{request.Source})\");\n            CalculatePriceDefault cmd = JsonConvert.DeserializeObject<CalculatePriceDefault>(request.Data.ToString());\n\n            cmd.Metadata = new Dictionary<string, string>\n            {\n                {\"$correlationId\", cmd.CorrelationId},\n                {\"source\", request.Source.ToString()},\n                {\"$applies\", request.Time.ToString(\"O\")},\n                {\"cloudrequest-id\", request.Id},\n                {\"schema\", request.DataSchema.ToString()},\n                {\"content-type\", request.DataContentType},\n                {\"command-type\", request.Type},\n                {\"tenant-id\", cmd.TenantId ?? request.GetDefaultTenant() }\n            };\n            return cmd;\n        }\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Adapter/Mappers/CalculatePriceDenmarkMapper.cs\n// service: src\n﻿using CloudEventData;\nusing Evento;\nusing Newtonsoft.Json;\nusing Remundo.Pricing.Domain;\nusing Remundo.Pricing.Domain.Commands;\n\nnamespace Remundo.Pricing.Adapter.Mappers;\n\npublic class CalculatePriceDenmarkMapper\n{\n    public Uri Schema => new Uri(\"pricing-DK/1.0\", UriKind.RelativeOrAbsolute);\n    public Uri Source => new Uri(\"pricing-Europe\", UriKind.RelativeOrAbsolute);\n\n    private readonly List<string> _dataContentTypes = new List<string> { \"application/json\", \"application/cloudevents+json\" };\n\n    public Command Map(CloudEventRequest request)\n    {\n        Ensure.NotNull(request, nameof(request));\n        if (!_dataContentTypes.Contains(request.DataContentType))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceDenmarkMapper)}' I can't recognize the DataContentType:{request.DataContentType}\");\n        if (!request.DataSchema.Equals(Schema) || !request.Source.Equals(Source))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceDenmarkMapper)}' I can't recognize the data (DataSchema:{request.DataSchema};Source:{request.Source})\");\n        CalculatePriceDenmark cmd = JsonConvert.DeserializeObject<CalculatePriceDenmark>(request.Data.ToString());\n\n        cmd.Metadata = new Dictionary<string, string>\n            {\n                {\"$correlationId\", cmd.CorrelationId},\n                {\"source\", request.Source.ToString()},\n                {\"$applies\", request.Time.ToString(\"O\")},\n                {\"cloudrequest-id\", request.Id},\n                {\"schema\", request.DataSchema.ToString()},\n                {\"content-type\", request.DataContentType},\n                {\"command-type\", request.Type },\n                {\"tenant-id\", cmd.TenantId ?? request.GetDefaultTenant() }\n            };\n        return cmd;\n\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Adapter/Mappers/CalculatePriceEnglandMapper.cs\n// service: src\n﻿using CloudEventData;\nusing Evento;\nusing Newtonsoft.Json;\nusing Remundo.Pricing.Domain;\nusing Remundo.Pricing.Domain.Commands;\n\nnamespace Remundo.Pricing.Adapter.Mappers;\n\npublic class CalculatePriceEnglandMapper\n{\n    public Uri Schema => new Uri(\"pricing-GB-ENG/1.0\", UriKind.RelativeOrAbsolute);\n    public Uri Source => new Uri(\"pricing-Europe\", UriKind.RelativeOrAbsolute);\n\n    private readonly List<string> _dataContentTypes = new List<string> { \"application/json\", \"application/cloudevents+json\" };\n\n    public Command Map(CloudEventRequest request)\n    {\n        Ensure.NotNull(request, nameof(request));\n        if (!_dataContentTypes.Contains(request.DataContentType))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceEnglandMapper)}' I can't recognize the DataContentType:{request.DataContentType}\");\n        if (!request.DataSchema.Equals(Schema) || !request.Source.Equals(Source))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceEnglandMapper)}' I can't recognize the data (DataSchema:{request.DataSchema};Source:{request.Source})\");\n        CalculatePriceEngland cmd = JsonConvert.DeserializeObject<CalculatePriceEngland>(request.Data.ToString());\n\n        cmd.Metadata = new Dictionary<string, string>\n            {\n                {\"$correlationId\", cmd.CorrelationId},\n                {\"source\", request.Source.ToString()},\n                {\"$applies\", request.Time.ToString(\"O\")},\n                {\"cloudrequest-id\", request.Id},\n                {\"schema\", request.DataSchema.ToString()},\n                {\"content-type\", request.DataContentType},\n                {\"command-type\", request.Type },\n                {\"tenant-id\", cmd.TenantId ?? request.GetDefaultTenant() }\n            };\n        return cmd;\n\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Adapter/Mappers/CalculatePriceFranceMapper.cs\n// service: src\n﻿using CloudEventData;\nusing Evento;\nusing Newtonsoft.Json;\nusing Remundo.Pricing.Domain;\nusing Remundo.Pricing.Domain.Commands;\n\nnamespace Remundo.Pricing.Adapter.Mappers;\n\npublic class CalculatePriceFranceMapper\n{\n    public Uri Schema => new Uri(\"pricing-FR/1.0\", UriKind.RelativeOrAbsolute);\n    public Uri Source => new Uri(\"pricing-Europe\", UriKind.RelativeOrAbsolute);\n\n    private readonly List<string> _dataContentTypes = new List<string> { \"application/json\", \"application/cloudevents+json\" };\n\n    public Command Map(CloudEventRequest request)\n    {\n        Ensure.NotNull(request, nameof(request));\n        if (!_dataContentTypes.Contains(request.DataContentType))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceFranceMapper)}' I can't recognize the DataContentType:{request.DataContentType}\");\n        if (!request.DataSchema.Equals(Schema) || !request.Source.Equals(Source))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceFranceMapper)}' I can't recognize the data (DataSchema:{request.DataSchema};Source:{request.Source})\");\n        CalculatePriceFrance cmd = JsonConvert.DeserializeObject<CalculatePriceFrance>(request.Data.ToString());\n\n        cmd.Metadata = new Dictionary<string, string>\n            {\n                {\"$correlationId\", cmd.CorrelationId},\n                {\"source\", request.Source.ToString()},\n                {\"$applies\", request.Time.ToString(\"O\")},\n                {\"cloudrequest-id\", request.Id},\n                {\"schema\", request.DataSchema.ToString()},\n                {\"content-type\", request.DataContentType},\n                {\"command-type\", request.Type },\n                {\"tenant-id\", cmd.TenantId ?? request.GetDefaultTenant() }\n            };\n        return cmd;\n\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Adapter/Mappers/CalculatePriceGermanyMapper.cs\n// service: src\n﻿using CloudEventData;\nusing Evento;\nusing Newtonsoft.Json;\nusing Remundo.Pricing.Domain;\nusing Remundo.Pricing.Domain.Commands;\n\nnamespace Remundo.Pricing.Adapter.Mappers;\n\npublic class CalculatePriceGermanyMapper\n{\n    public Uri Schema => new Uri(\"pricing-DE/1.0\", UriKind.RelativeOrAbsolute);\n    public Uri Source => new Uri(\"pricing-Europe\", UriKind.RelativeOrAbsolute);\n\n    private readonly List<string> _dataContentTypes = new List<string> { \"application/json\", \"application/cloudevents+json\" };\n\n    public Command Map(CloudEventRequest request)\n    {\n        Ensure.NotNull(request, nameof(request));\n        if (!_dataContentTypes.Contains(request.DataContentType))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceGermanyMapper)}' I can't recognize the DataContentType:{request.DataContentType}\");\n        if (!request.DataSchema.Equals(Schema) || !request.Source.Equals(Source))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceGermanyMapper)}' I can't recognize the data (DataSchema:{request.DataSchema};Source:{request.Source})\");\n        CalculatePriceGermany cmd = JsonConvert.DeserializeObject<CalculatePriceGermany>(request.Data.ToString());\n\n        cmd.Metadata = new Dictionary<string, string>\n            {\n                {\"$correlationId\", cmd.CorrelationId},\n                {\"source\", request.Source.ToString()},\n                {\"$applies\", request.Time.ToString(\"O\")},\n                {\"cloudrequest-id\", request.Id},\n                {\"schema\", request.DataSchema.ToString()},\n                {\"content-type\", request.DataContentType},\n                {\"command-type\", request.Type },\n                {\"tenant-id\", cmd.TenantId ?? request.GetDefaultTenant() }\n            };\n        return cmd;\n\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Adapter/Mappers/CalculatePriceIrelandMapper.cs\n// service: src\n﻿using CloudEventData;\nusing Evento;\nusing Newtonsoft.Json;\nusing Remundo.Pricing.Domain;\nusing Remundo.Pricing.Domain.Commands;\n\nnamespace Remundo.Pricing.Adapter.Mappers;\n\npublic class CalculatePriceIrelandMapper\n{\n    public Uri Schema => new Uri(\"pricing-IE/1.0\", UriKind.RelativeOrAbsolute);\n    public Uri Source => new Uri(\"pricing-Europe\", UriKind.RelativeOrAbsolute);\n\n    private readonly List<string> _dataContentTypes = new List<string> { \"application/json\", \"application/cloudevents+json\" };\n\n    public Command Map(CloudEventRequest request)\n    {\n        Ensure.NotNull(request, nameof(request));\n        if (!_dataContentTypes.Contains(request.DataContentType))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceIrelandMapper)}' I can't recognize the DataContentType:{request.DataContentType}\");\n        if (!request.DataSchema.Equals(Schema) || !request.Source.Equals(Source))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceIrelandMapper)}' I can't recognize the data (DataSchema:{request.DataSchema};Source:{request.Source})\");\n        CalculatePriceIreland cmd = JsonConvert.DeserializeObject<CalculatePriceIreland>(request.Data.ToString());\n\n        cmd.Metadata = new Dictionary<string, string>\n        {\n            {\"$correlationId\", cmd.CorrelationId},\n            {\"source\", request.Source.ToString()},\n            {\"$applies\", request.Time.ToString(\"O\")},\n            {\"cloudrequest-id\", request.Id},\n            {\"schema\", request.DataSchema.ToString()},\n            {\"content-type\", request.DataContentType},\n            {\"command-type\", request.Type },\n                {\"tenant-id\", cmd.TenantId ?? request.GetDefaultTenant() }\n        };\n        return cmd;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Adapter/Mappers/CalculatePriceItalyMapper.cs\n// service: src\n﻿using CloudEventData;\nusing Evento;\nusing Newtonsoft.Json;\nusing Remundo.Pricing.Domain;\nusing Remundo.Pricing.Domain.Commands;\n\nnamespace Remundo.Pricing.Adapter.Mappers;\n\npublic class CalculatePriceItalyMapper\n{\n    public Uri Schema => new Uri(\"pricing-IT/1.0\", UriKind.RelativeOrAbsolute);\n    public Uri Source => new Uri(\"pricing-Europe\", UriKind.RelativeOrAbsolute);\n\n    private readonly List<string> _dataContentTypes = new List<string> { \"application/json\", \"application/cloudevents+json\" };\n\n    public Command Map(CloudEventRequest request)\n    {\n        Ensure.NotNull(request, nameof(request));\n        if (!_dataContentTypes.Contains(request.DataContentType))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceItalyMapper)}' I can't recognize the DataContentType:{request.DataContentType}\");\n        if (!request.DataSchema.Equals(Schema) || !request.Source.Equals(Source))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceItalyMapper)}' I can't recognize the data (DataSchema:{request.DataSchema};Source:{request.Source})\");\n        CalculatePriceItaly cmd = JsonConvert.DeserializeObject<CalculatePriceItaly>(request.Data.ToString());\n\n        cmd.Metadata = new Dictionary<string, string>\n            {\n                {\"$correlationId\", cmd.CorrelationId},\n                {\"source\", request.Source.ToString()},\n                {\"$applies\", request.Time.ToString(\"O\")},\n                {\"cloudrequest-id\", request.Id},\n                {\"schema\", request.DataSchema.ToString()},\n                {\"content-type\", request.DataContentType},\n                {\"command-type\", request.Type },\n                {\"tenant-id\", cmd.TenantId ?? request.GetDefaultTenant() }\n            };\n        return cmd;\n\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Adapter/Mappers/CalculatePriceLuxembourgMapper.cs\n// service: src\n﻿using CloudEventData;\nusing Evento;\nusing Newtonsoft.Json;\nusing Remundo.Pricing.Domain;\nusing Remundo.Pricing.Domain.Commands;\n\nnamespace Remundo.Pricing.Adapter.Mappers\n{\n    public class CalculatePriceLuxembourgMapper\n    {\n        public Uri Schema => new Uri(\"pricing-LU/1.0\", UriKind.RelativeOrAbsolute);\n        public Uri Source => new Uri(\"pricing-Europe\", UriKind.RelativeOrAbsolute);\n\n        private readonly List<string> _dataContentTypes = new List<string> { \"application/json\", \"application/cloudevents+json\" };\n\n        public Command Map(CloudEventRequest request)\n        {\n            Ensure.NotNull(request, nameof(request));\n            if (!_dataContentTypes.Contains(request.DataContentType))\n                throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceLuxembourgMapper)}' I can't recognize the DataContentType:{request.DataContentType}\");\n            if (!request.DataSchema.Equals(Schema) || !request.Source.Equals(Source))\n                throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceLuxembourgMapper)}' I can't recognize the data (DataSchema:{request.DataSchema};Source:{request.Source})\");\n            CalculatePriceLuxembourg cmd = JsonConvert.DeserializeObject<CalculatePriceLuxembourg>(request.Data.ToString());\n\n            cmd.Metadata = new Dictionary<string, string>\n            {\n                {\"$correlationId\", cmd.CorrelationId},\n                {\"source\", request.Source.ToString()},\n                {\"$applies\", request.Time.ToString(\"O\")},\n                {\"cloudrequest-id\", request.Id},\n                {\"schema\", request.DataSchema.ToString()},\n                {\"content-type\", request.DataContentType},\n                {\"command-type\", request.Type },\n                {\"tenant-id\", cmd.TenantId ?? request.GetDefaultTenant() }\n            };\n            return cmd;\n        }\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Adapter/Mappers/CalculatePriceNetherlandsMapper.cs\n// service: src\n﻿using CloudEventData;\nusing Evento;\nusing Newtonsoft.Json;\nusing Remundo.Pricing.Domain;\nusing Remundo.Pricing.Domain.Commands;\n\nnamespace Remundo.Pricing.Adapter.Mappers;\n\npublic class CalculatePriceNetherlandsMapper\n{\n    public Uri Schema => new Uri(\"pricing-NL/1.0\", UriKind.RelativeOrAbsolute);\n    public Uri Source => new Uri(\"pricing-Europe\", UriKind.RelativeOrAbsolute);\n\n    private readonly List<string> _dataContentTypes = new List<string> { \"application/json\", \"application/cloudevents+json\" };\n\n    public Command Map(CloudEventRequest request)\n    {\n        Ensure.NotNull(request, nameof(request));\n        if (!_dataContentTypes.Contains(request.DataContentType))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceNetherlandsMapper)}' I can't recognize the DataContentType:{request.DataContentType}\");\n        if (!request.DataSchema.Equals(Schema) || !request.Source.Equals(Source))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceNetherlandsMapper)}' I can't recognize the data (DataSchema:{request.DataSchema};Source:{request.Source})\");\n        CalculatePriceNetherlands cmd = JsonConvert.DeserializeObject<CalculatePriceNetherlands>(request.Data.ToString());\n\n        cmd.Metadata = new Dictionary<string, string>\n            {\n                {\"$correlationId\", cmd.CorrelationId},\n                {\"source\", request.Source.ToString()},\n                {\"$applies\", request.Time.ToString(\"O\")},\n                {\"cloudrequest-id\", request.Id},\n                {\"schema\", request.DataSchema.ToString()},\n                {\"content-type\", request.DataContentType},\n                {\"command-type\", request.Type },\n                {\"tenant-id\", cmd.TenantId ?? request.GetDefaultTenant() }\n            };\n        return cmd;\n\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Adapter/Mappers/CalculatePricePortugalMapper.cs\n// service: src\n﻿using CloudEventData;\nusing Evento;\nusing Newtonsoft.Json;\nusing Remundo.Pricing.Domain;\nusing Remundo.Pricing.Domain.Commands;\n\nnamespace Remundo.Pricing.Adapter.Mappers\n{\n    public class CalculatePricePortugalMapper\n    {\n        public Uri Schema => new Uri(\"pricing-PT/1.0\", UriKind.RelativeOrAbsolute);\n        public Uri Source => new Uri(\"pricing-Europe\", UriKind.RelativeOrAbsolute);\n\n        private readonly List<string> _dataContentTypes = new List<string> { \"application/json\", \"application/cloudevents+json\" };\n\n        public Command Map(CloudEventRequest request)\n        {\n            Ensure.NotNull(request, nameof(request));\n            if (!_dataContentTypes.Contains(request.DataContentType))\n                throw new ArgumentException($\"While running Map in '{nameof(CalculatePricePortugalMapper)}' I can't recognize the DataContentType:{request.DataContentType}\");\n            if (!request.DataSchema.Equals(Schema) || !request.Source.Equals(Source))\n                throw new ArgumentException($\"While running Map in '{nameof(CalculatePricePortugalMapper)}' I can't recognize the data (DataSchema:{request.DataSchema};Source:{request.Source})\");\n            CalculatePricePortugal cmd = JsonConvert.DeserializeObject<CalculatePricePortugal>(request.Data.ToString());\n\n            cmd.Metadata = new Dictionary<string, string>\n            {\n                {\"$correlationId\", cmd.CorrelationId},\n                {\"source\", request.Source.ToString()},\n                {\"$applies\", request.Time.ToString(\"O\")},\n                {\"cloudrequest-id\", request.Id},\n                {\"schema\", request.DataSchema.ToString()},\n                {\"content-type\", request.DataContentType},\n                {\"command-type\", request.Type },\n                {\"tenant-id\", cmd.TenantId ?? request.GetDefaultTenant() }\n            };\n            return cmd;\n        }\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Adapter/Mappers/CalculatePriceSlovakiaMapper.cs\n// service: src\n﻿using CloudEventData;\nusing Evento;\nusing Newtonsoft.Json;\nusing Remundo.Pricing.Domain;\nusing Remundo.Pricing.Domain.Commands;\n\nnamespace Remundo.Pricing.Adapter.Mappers\n{\n    public class CalculatePriceSlovakiaMapper\n    {\n        public Uri Schema => new Uri(\"pricing-SK/1.0\", UriKind.RelativeOrAbsolute);\n        public Uri Source => new Uri(\"pricing-Europe\", UriKind.RelativeOrAbsolute);\n\n        private readonly List<string> _dataContentTypes = new List<string> { \"application/json\", \"application/cloudevents+json\" };\n\n        public Command Map(CloudEventRequest request)\n        {\n            Ensure.NotNull(request, nameof(request));\n            if (!_dataContentTypes.Contains(request.DataContentType))\n                throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceSlovakiaMapper)}' I can't recognize the DataContentType:{request.DataContentType}\");\n            if (!request.DataSchema.Equals(Schema) || !request.Source.Equals(Source))\n                throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceSlovakiaMapper)}' I can't recognize the data (DataSchema:{request.DataSchema};Source:{request.Source})\");\n            var cmd = JsonConvert.DeserializeObject<CalculatePriceSlovakia>(request.Data.ToString());\n\n            cmd.Metadata = new Dictionary<string, string>\n            {\n                {\"$correlationId\", cmd.CorrelationId},\n                {\"source\", request.Source.ToString()},\n                {\"$applies\", request.Time.ToString(\"O\")},\n                {\"cloudrequest-id\", request.Id},\n                {\"schema\", request.DataSchema.ToString()},\n                {\"content-type\", request.DataContentType},\n                {\"command-type\", request.Type},\n                {\"tenant-id\", cmd.TenantId ?? request.GetDefaultTenant() }\n            };\n            return cmd;\n        }\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Adapter/Mappers/CalculatePriceSpainMapper.cs\n// service: src\n﻿using CloudEventData;\nusing Evento;\nusing Newtonsoft.Json;\nusing Remundo.Pricing.Domain;\nusing Remundo.Pricing.Domain.Commands;\n\nnamespace Remundo.Pricing.Adapter.Mappers\n{\n    public class CalculatePriceSpainMapper\n    {\n        public Uri Schema => new Uri(\"pricing-ES/1.0\", UriKind.RelativeOrAbsolute);\n        public Uri Source => new Uri(\"pricing-Europe\", UriKind.RelativeOrAbsolute);\n\n        private readonly List<string> _dataContentTypes = new List<string> { \"application/json\", \"application/cloudevents+json\" };\n\n        public Command Map(CloudEventRequest request)\n        {\n            Ensure.NotNull(request, nameof(request));\n            if (!_dataContentTypes.Contains(request.DataContentType))\n                throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceSpainMapper)}' I can't recognize the DataContentType:{request.DataContentType}\");\n            if (!request.DataSchema.Equals(Schema) || !request.Source.Equals(Source))\n                throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceSpainMapper)}' I can't recognize the data (DataSchema:{request.DataSchema};Source:{request.Source})\");\n            CalculatePriceSpain cmd = JsonConvert.DeserializeObject<CalculatePriceSpain>(request.Data.ToString());\n\n            cmd.Metadata = new Dictionary<string, string>\n            {\n                {\"$correlationId\", cmd.CorrelationId},\n                {\"source\", request.Source.ToString()},\n                {\"$applies\", request.Time.ToString(\"O\")},\n                {\"cloudrequest-id\", request.Id},\n                {\"schema\", request.DataSchema.ToString()},\n                {\"content-type\", request.DataContentType},\n                {\"command-type\", request.Type},\n                {\"tenant-id\", cmd.TenantId ?? request.GetDefaultTenant() }\n            };\n            return cmd;\n        }\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Adapter/Mappers/CalculatePriceSwitzerlandMapper.cs\n// service: src\n﻿using CloudEventData;\nusing Evento;\nusing Newtonsoft.Json;\nusing Remundo.Pricing.Domain;\nusing Remundo.Pricing.Domain.Commands;\n\nnamespace Remundo.Pricing.Adapter.Mappers;\n\npublic class CalculatePriceSwitzerlandMapper\n{\n    public Uri Schema => new Uri(\"pricing-CH/1.0\", UriKind.RelativeOrAbsolute);\n    public Uri Source => new Uri(\"pricing-Europe\", UriKind.RelativeOrAbsolute);\n\n    private readonly List<string> _dataContentTypes = new List<string> { \"application/json\", \"application/cloudevents+json\" };\n\n    public Command Map(CloudEventRequest request)\n    {\n        Ensure.NotNull(request, nameof(request));\n        if (!_dataContentTypes.Contains(request.DataContentType))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceSwitzerlandMapper)}' I can't recognize the DataContentType:{request.DataContentType}\");\n        if (!request.DataSchema.Equals(Schema) || !request.Source.Equals(Source))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceSwitzerlandMapper)}' I can't recognize the data (DataSchema:{request.DataSchema};Source:{request.Source})\");\n        CalculatePriceSwitzerland cmd = JsonConvert.DeserializeObject<CalculatePriceSwitzerland>(request.Data.ToString());\n\n        cmd.Metadata = new Dictionary<string, string>\n            {\n                {\"$correlationId\", cmd.CorrelationId},\n                {\"source\", request.Source.ToString()},\n                {\"$applies\", request.Time.ToString(\"O\")},\n                {\"cloudrequest-id\", request.Id},\n                {\"schema\", request.DataSchema.ToString()},\n                {\"content-type\", request.DataContentType},\n                {\"command-type\", request.Type },\n                {\"tenant-id\", cmd.TenantId ?? request.GetDefaultTenant() }\n            };\n        return cmd;\n\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Adapter/Mappers/CalculatePriceUnitedKingdomMapper.cs\n// service: src\n﻿using CloudEventData;\nusing Evento;\nusing Newtonsoft.Json;\nusing Remundo.Pricing.Domain;\nusing Remundo.Pricing.Domain.Commands;\n\nnamespace Remundo.Pricing.Adapter.Mappers;\n\npublic class CalculatePriceUnitedKingdomMapper\n{\n    public Uri Schema => new Uri(\"pricing-GB/1.0\", UriKind.RelativeOrAbsolute);\n    public Uri Source => new Uri(\"pricing-Europe\", UriKind.RelativeOrAbsolute);\n\n    private readonly List<string> _dataContentTypes = new List<string> { \"application/json\", \"application/cloudevents+json\" };\n\n    public Command Map(CloudEventRequest request)\n    {\n        Ensure.NotNull(request, nameof(request));\n        if (!_dataContentTypes.Contains(request.DataContentType))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceUnitedKingdomMapper)}' I can't recognize the DataContentType:{request.DataContentType}\");\n        if (!request.DataSchema.Equals(Schema) || !request.Source.Equals(Source))\n            throw new ArgumentException($\"While running Map in '{nameof(CalculatePriceUnitedKingdomMapper)}' I can't recognize the data (DataSchema:{request.DataSchema};Source:{request.Source})\");\n        CalculatePriceUnitedKingdom cmd = JsonConvert.DeserializeObject<CalculatePriceUnitedKingdom>(request.Data.ToString());\n\n        cmd.Metadata = new Dictionary<string, string>\n            {\n                {\"$correlationId\", cmd.CorrelationId},\n                {\"source\", request.Source.ToString()},\n                {\"$applies\", request.Time.ToString(\"O\")},\n                {\"cloudrequest-id\", request.Id},\n                {\"schema\", request.DataSchema.ToString()},\n                {\"content-type\", request.DataContentType},\n                {\"command-type\", request.Type },\n                {\"tenant-id\", cmd.TenantId ?? request.GetDefaultTenant() }\n            };\n        return cmd;\n\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Adapter/Mappers/RecalculatePriceMapper.cs\n// service: src\n﻿using CloudEventData;\nusing Evento;\nusing Newtonsoft.Json;\nusing Remundo.Pricing.Domain;\nusing Remundo.Pricing.Domain.Commands;\n\nnamespace Remundo.Pricing.Adapter.Mappers\n{\n    public class RecalculatePriceMapper\n    {\n        public Uri Schema => new Uri(\"recalculateprice/1.0\", UriKind.RelativeOrAbsolute);\n        public Uri Source => new Uri(\"pricing-Europe\", UriKind.RelativeOrAbsolute);\n\n        private readonly List<string> _dataContentTypes = new List<string> { \"application/json\", \"application/cloudevents+json\" };\n\n        public Command Map(CloudEventRequest request)\n        {\n            Ensure.NotNull(request, nameof(request));\n            if (!_dataContentTypes.Contains(request.DataContentType))\n                throw new ArgumentException($\"While running Map in '{nameof(RecalculatePriceMapper)}' I can't recognize the DataContentType:{request.DataContentType}\");\n            if (!request.DataSchema.Equals(Schema) || !request.Source.Equals(Source))\n                throw new ArgumentException($\"While running Map in '{nameof(RecalculatePriceMapper)}' I can't recognize the data (DataSchema:{request.DataSchema};Source:{request.Source})\");\n            RecalculatePrice cmd = JsonConvert.DeserializeObject<RecalculatePrice>(request.Data.ToString());\n\n            cmd.Metadata = new Dictionary<string, string>\n            {\n                {\"$correlationId\", cmd.PriceId},\n                {\"source\", request.Source.ToString()},\n                {\"$applies\", request.Time.ToString(\"O\")},\n                {\"cloudrequest-id\", request.Id},\n                {\"schema\", request.DataSchema.ToString()},\n                {\"content-type\", request.DataContentType},\n                {\"command-type\", request.Type },\n                {\"RecalculatedPrice\", \"true\" },\n                {\"tenant-id\", cmd.TenantId ?? request.GetDefaultTenant() }\n            };\n            return cmd;\n        }\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Console/Application.cs\n// service: src\n﻿using Azure.Messaging.ServiceBus;\nusing CloudEventData;\nusing Evento;\nusing Microsoft.Extensions.Hosting;\nusing Remundo.Pricing.Adapter;\nusing Remundo.Pricing.Domain;\nusing Remundo.Pricing.Domain.Services;\nusing ILogger = NLog.ILogger;\n\nnamespace Remundo.Pricing.Console;\n\npublic class Application : IHostedService\n{\n    private readonly ILogger _logger;\n    private readonly ServiceBusSessionProcessor _processor;\n    private readonly Worker _worker;\n\n    public Application(IDomainRepository domainRepository, IHttpService httpService,\n        ILogger logger, ServiceBusSessionProcessor processor)\n    {\n        _logger = logger;\n        _worker = new Worker(\n                domainRepository,\n                _logger,\n                httpService);\n        _processor = processor;\n        _processor.ProcessMessageAsync += ProcessMessageAsync;\n        _processor.ProcessErrorAsync += ProcessErrorAsync;\n    }\n\n    public async Task StartAsync(CancellationToken cancellationToken)\n    {\n        await _processor.StartProcessingAsync(cancellationToken);\n        _logger.Info(\"Session processing has begun\");\n    }\n\n    public async Task StopAsync(CancellationToken cancellationToken)\n    {\n        await _processor.StopProcessingAsync();\n    }\n\n    private async Task ProcessMessageAsync(ProcessSessionMessageEventArgs args)\n    {\n        try\n        {\n            _logger.Debug(\"Triggered...\");\n\n            var cloudRequest = args.Message.Body.ToObjectFromJson<CloudEventRequest>();\n\n            _worker.Process(cloudRequest);\n\n            await args.CompleteMessageAsync(args.Message);\n\n            _logger.Info($\"C# ServiceBus queue trigger function processed message: {args.Message.MessageId}\");\n        }\n        catch (Exception ex)\n        {\n            var errForServiceBus = ex.GetBaseException().Message.Length > 4096\n                ? ex.GetBaseException().Message[..4096]\n                : ex.GetBaseException().Message;\n\n            var errDescriptionForServiceBus = ex.GetBaseException().StackTrace?.Length > 4096\n                ? ex.GetBaseException().StackTrace?[..4096]\n                : ex.GetBaseException().StackTrace;\n\n            await args.DeadLetterMessageAsync(args.Message, errForServiceBus,\n                errDescriptionForServiceBus);\n        }\n    }\n\n    private async Task ProcessErrorAsync(ProcessErrorEventArgs e)\n    {\n        _logger.Error(e.Exception.ToString());\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Console/CertManager.cs\n// service: src\n﻿using System.Security.Cryptography.X509Certificates;\nusing Org.BouncyCastle.Crypto;\nusing Org.BouncyCastle.OpenSsl;\nusing Org.BouncyCastle.Pkcs;\nusing Org.BouncyCastle.Security;\n\nnamespace Remundo.Pricing.Console;\n\npublic static class CertManager\n{\n    public static X509Certificate2 GetCertificate(string inlineCert, string inlineKey)\n    {\n        return ConvertToX509Certificate2(LoadCertificate(inlineCert), LoadPrivateKey(inlineKey));\n    }\n\n    private static Org.BouncyCastle.X509.X509Certificate LoadCertificate(string cert)\n    {\n        using var reader = new StringReader(cert);\n        var pemReader = new PemReader(reader);\n        return (Org.BouncyCastle.X509.X509Certificate)pemReader.ReadObject();\n    }\n\n    private static AsymmetricKeyParameter LoadPrivateKey(string key)\n    {\n        using var reader = new StringReader(key);\n        var pemReader = new PemReader(reader);\n        var keyObject = pemReader.ReadObject();\n        if (keyObject is AsymmetricCipherKeyPair keyPair)\n            return keyPair.Private;\n        throw new InvalidDataException(\"Invalid private key format\");\n    }\n\n    private static X509Certificate2 ConvertToX509Certificate2(Org.BouncyCastle.X509.X509Certificate cert, AsymmetricKeyParameter privateKey)\n    {\n        using var stream = new MemoryStream();\n        var store = new Pkcs12StoreBuilder().Build();\n        var certificateEntry = new X509CertificateEntry(cert);\n        store.SetCertificateEntry(\"cert\", certificateEntry);\n        store.SetKeyEntry(\"cert\", new AsymmetricKeyEntry(privateKey), new[] { certificateEntry });\n        store.Save(stream, null, new SecureRandom());\n        return new X509Certificate2(stream.ToArray(), (string)null, X509KeyStorageFlags.PersistKeySet | X509KeyStorageFlags.Exportable);\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Console/local.settings.json\n// service: src\n{\n  \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",\n  \"ServiceBusConnectionString\": \"Endpoint=sb://sbns-messaging-dev.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=Rx0Vi1CT7SQb4BXfNTMKcy4E2To0eLOOJspju2aOoN4=\",\n  //\"ServiceBusConnectionString\": \"Endpoint=sb://sbns-messaging-prod.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=mjmk0Rd8oT/XXH+QbbORlkXVO+EXz0Kd4LLp0CuBuWY=\",\n  \"QueueName\": \"james-queue-eu\",\n  \"CloudRequestSource\": \"pricing-Europe\",\n  \"EventStore_Link\": \"esdb://admin:changeit@localhost:2113?tls=false\",\n  //\"EventStore_Link\": \"tcp://admin:8vYWRtaW46Y2hhL2NBd@localhost:1113\",\n  \"EventStore_Username\": \"admin\",\n  \"EventStore_Password\": \"changeit\",\n  \"EventCategory\": \"PricingEurope\",\n  \"CurrencyConversion\": \"dynamic\",\n  \"RedisConnectionString\": \"localhost:6379\",\n  \"RemundoApiKey\": \"HWOIus8bZZBwIAvaEWVAvskx9tsihwQnNvU2yvqi2qyUAzFuHohLLA==\",\n  \"RemundoApiToken\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiIxMjMiLCJyb2xlcyI6WzZdLCJ0ZW5hbnRJZCI6IjEyMyIsImlzSW50ZXJuYWwiOnRydWUsInZlcnNpb24iOiJWMSIsInVhdCI6Ijk5OTktMTItMzFUMjM6NTk6NTkuOTk5OTk5OSJ9.YWff_iHvRFhEBUEW4vzV_wpdHdvSPb9MEmp34tGWxyg\",\n  \"RemundoHostName\": \"http://localhost:7071\"\n}"}
{"text": "// file: src/Remundo.Pricing.Console/Program.cs\n// service: src\n﻿using Azure.Messaging.ServiceBus;\nusing Evento;\nusing Evento.Repository.Grpc;\nusing KurrentDB.Client;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing NLog;\nusing Polly;\nusing Polly.Extensions.Http;\nusing Remundo.Pricing.Adapter;\nusing Remundo.Pricing.Console;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.HttpLib;\nusing ILogger = NLog.ILogger;\n\npublic static class Program\n{\n    public static async Task Main(string[] args)\n    {\n        var host = CreateHostBuilder(args).Build();\n        await host.RunAsync();\n        await host.WaitForShutdownAsync();\n        System.Console.Title = \"Remundo.Pricing.Europe\";\n    }\n\n    public static IHostBuilder CreateHostBuilder(string[] args)\n    {\n        var hostName = \"*\";\n        if (args.Length > 0) hostName = args[0];\n\n        return Host.CreateDefaultBuilder(args)\n            .ConfigureLogging(logging =>\n            {\n                logging.ClearProviders();\n                logging.AddConsole();\n                logging.AddFilter(\"Microsoft.*\", Microsoft.Extensions.Logging.LogLevel.Error);\n                logging.AddFilter(\"System.Net.Http.*\", Microsoft.Extensions.Logging.LogLevel.Error);\n#if DEBUG\n                var configPath = \"nlog-dev.config\";\n#else\n                var configPath = \"nlog.config\";\n#endif\n                LogManager.Setup()\n                    .SetupExtensions(e => e.AutoLoadAssemblies(false))\n                    .LoadConfigurationFromFile(configPath, optional: true);\n            })\n            .ConfigureServices((_, services) =>\n            {\n                var settings = BuildConfig().Get<Settings>();\n                services.AddSingleton(settings);\n                var logger = LogManager.GetLogger($\"Remundo.{settings.EventCategory}\");\n                services.AddSingleton<ILogger>(logger);\n                services.AddHttpClient<IHttpService, HttpService>()\n                    .AddResilienceHandler(\"client\", (p, c) => GetRetryPolicy());\n                services.AddSingleton<IHttpService, HttpService>(x =>\n                {\n                    var settings = x.GetRequiredService<IConfiguration>().Get<Settings>();\n                    var client = x.GetRequiredService<IHttpClientFactory>().CreateClient();\n                    client.DefaultRequestHeaders.Add(\"AuthorizationRemundo\", settings.RemundoApiToken);\n                    return new HttpService(client, settings.RemundoHostName);\n                });\n                //These services are scoped as we want to create a new instance for each function call\n                services.AddScoped<IDomainRepository>(x => BuildDomainRepository(settings));\n                var sbClient = new ServiceBusClient(settings.ServiceBusConnectionString);\n                var processor = sbClient.CreateSessionProcessor(settings.QueueName, new ServiceBusSessionProcessorOptions()\n                {\n                    AutoCompleteMessages = false,\n                    MaxConcurrentSessions = 32,\n                    PrefetchCount = 32\n                });\n                services.AddSingleton(processor);\n                services.AddSingleton<Application>();\n                services.AddHostedService(e => e.GetRequiredService<Application>());\n            });\n    }\n\n    private static IDomainRepository BuildDomainRepository(Settings settings)\n    {\n        var eventStoreClient = BuildEventStoreConnection(settings);\n        return new EventStoreDomainRepository(settings.EventCategory, eventStoreClient);\n    }\n\n    private static KurrentDBClient BuildEventStoreConnection(Settings settings, string suffix = null)\n    {\n        var connSettings = KurrentDBClientSettings.Create(settings.EventStore_Link);\n        connSettings.ConnectionName = $\"{settings.CloudRequestSource}\" +\n                                      $\"{(!string.IsNullOrEmpty(suffix) ? suffix : \"\")}-conn\";\n        connSettings.DefaultCredentials = new UserCredentials(settings.EventStore_Username, settings.EventStore_Password);\n\n        connSettings.CreateHttpMessageHandler = () =>\n        {\n            var handler = new HttpClientHandler();\n            if (string.IsNullOrWhiteSpace(settings.EventStore_Certificate)) return handler;\n            var cert = CertManager.GetCertificate(settings.EventStore_Certificate, settings.EventStore_CertificatePrivateKey);\n            handler.ClientCertificates.Add(cert);\n            handler.ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => true;\n            return handler;\n        };\n        return new KurrentDBClient(connSettings);\n    }\n\n\n    private static IConfigurationRoot BuildConfig()\n    {\n        var builder = new ConfigurationBuilder()\n            .AddJsonFile(\"local.settings.json\", optional: true, reloadOnChange: true)\n            .AddEnvironmentVariables();\n        return builder.Build();\n    }\n\n    private static IAsyncPolicy<HttpResponseMessage> GetRetryPolicy()\n    {\n        return HttpPolicyExtensions\n            .HandleTransientHttpError()\n            .OrResult(msg => msg.StatusCode == System.Net.HttpStatusCode.NotFound)\n            .WaitAndRetryAsync(10, retryAttempt => TimeSpan.FromSeconds(Math.Pow(2,\n                retryAttempt)));\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Ensure.cs\n// service: src\n﻿namespace Remundo.Pricing.Domain\n{\n    public static class Ensure\n    {\n        public static void NotNull<T>(T argument, string argumentName) where T : class\n        {\n            if (argument == null)\n                throw new ArgumentNullException(argumentName);\n        }\n\n        public static void NotNullOrEmpty(string argument, string argumentName)\n        {\n            if (string.IsNullOrEmpty(argument))\n                throw new ArgumentNullException(argument, argumentName);\n        }\n\n        public static void NotNullOrWhiteSpace(string argument, string argumentName)\n        {\n            if (string.IsNullOrWhiteSpace(argument))\n                throw new ArgumentNullException(argument, argumentName);\n        }\n\n        public static void Positive(int number, string argumentName)\n        {\n            if (number <= 0)\n                throw new ArgumentOutOfRangeException(argumentName, argumentName + \" should be positive.\");\n        }\n        public static void Positive(decimal number, string argumentName)\n        {\n            if (number <= 0)\n                throw new ArgumentOutOfRangeException(argumentName, argumentName + \" should be positive.\");\n        }\n\n        public static void Nonnegative(decimal number, string argumentName)\n        {\n            if (number < 0)\n                throw new ArgumentOutOfRangeException(argumentName, argumentName + \" should be non negative.\");\n        }\n\n        public static void Positive(long number, string argumentName)\n        {\n            if (number <= 0)\n                throw new ArgumentOutOfRangeException(argumentName, argumentName + \" should be positive.\");\n        }\n\n        public static void Nonnegative(long number, string argumentName)\n        {\n            if (number < 0)\n                throw new ArgumentOutOfRangeException(argumentName, argumentName + \" should be non negative.\");\n        }\n\n        public static void Nonnegative(int number, string argumentName)\n        {\n            if (number < 0)\n                throw new ArgumentOutOfRangeException(argumentName, argumentName + \" should be non negative.\");\n        }\n        public static void NonLessThan50Years(DateTime date, string argumentName)\n        {\n            if ((date - DateTime.Now).TotalDays > 18250)\n                throw new ArgumentOutOfRangeException(argumentName, argumentName + \" should be a valid date\");\n        }\n\n        public static void NotEmptyGuid(Guid guid, string argumentName)\n        {\n            if (Guid.Empty == guid)\n                throw new ArgumentException(argumentName, argumentName + \" should be non-empty GUID.\");\n        }\n\n        public static void Equal(int expected, int actual, string argumentName)\n        {\n            if (expected != actual)\n                throw new ArgumentException(string.Format(\"{0} expected value: {1}, actual value: {2}\", argumentName, expected, actual));\n        }\n\n        public static void Equal(long expected, long actual, string argumentName)\n        {\n            if (expected != actual)\n                throw new ArgumentException(string.Format(\"{0} expected value: {1}, actual value: {2}\", argumentName, expected, actual));\n        }\n\n        public static void Equal(bool expected, bool actual, string argumentName)\n        {\n            if (expected != actual)\n                throw new ArgumentException(string.Format(\"{0} expected value: {1}, actual value: {2}\", argumentName, expected, actual));\n        }\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Extensions.cs\n// service: src\n﻿namespace Remundo.Pricing.Domain;\n\npublic static class Extensions\n{\n    public static decimal PennyUp(this decimal amount)\n    {\n        return Math.Round(amount, 2, MidpointRounding.ToPositiveInfinity);\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Austria.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Domain.Commands;\nusing Remundo.Pricing.Domain.Utils;\nusing Remundo.Pricing.Domain.Models;\n\nnamespace Remundo.Pricing.Domain.Aggregates;\n\npublic class Austria : PricingEngineBase\n{\n    public override string AggregateId => _correlationId;\n    private string _correlationId;\n\n    private const string IsoCode = \"AT\";\n    private const string Currency = \"EUR\";\n\n    private Price _price;\n\n    public Austria()\n    {\n        RegisterTransition<PriceCalculatedV7>(Apply);\n\n        RegisterTransition<PriceCalculatedV6>(Apply);\n    }\n\n    #region Legacy\n\n    private void Apply(PriceCalculatedV6 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    #endregion\n\n    private void Apply(PriceCalculatedV7 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    public static Austria Create()\n    {\n        return new Austria();\n    }\n\n    public void CalculatePrice(CalculatePriceAustria command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new AustriaEmployerCostCalculator(), calculator);\n        CalculatePriceInternal(command, cxt);\n    }\n\n    public void RecalculatePrice(RecalculatePrice command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new AustriaEmployerCostCalculator(), calculator);\n        RecalculatePriceInternal(command, cxt);\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Belgium.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Domain.Commands;\nusing Remundo.Pricing.Domain.Utils;\nusing Remundo.Pricing.Domain.Models;\n\nnamespace Remundo.Pricing.Domain.Aggregates;\n\npublic class Belgium : PricingEngineBase\n{\n    public override string AggregateId => _correlationId;\n    private string _correlationId;\n\n    private const string IsoCode = \"BE\";\n    private const string Currency = \"EUR\";\n\n    private Price _price;\n\n    public Belgium()\n    {\n        RegisterTransition<PriceCalculatedV7>(Apply);\n\n        RegisterTransition<PriceCalculatedV6>(Apply);\n    }\n\n    #region Legacy\n\n    private void Apply(PriceCalculatedV6 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    #endregion\n\n    private void Apply(PriceCalculatedV7 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    public static Belgium Create()\n    {\n        return new Belgium();\n    }\n\n    public void CalculatePrice(CalculatePriceBelgium command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new BelgiumEmployerCostCalculator(), calculator);\n        CalculatePriceInternal(command, cxt);\n    }\n\n    public void RecalculatePrice(RecalculatePrice command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new BelgiumEmployerCostCalculator(), calculator);\n        RecalculatePriceInternal(command, cxt);\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Bulgaria.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Domain.Commands;\nusing Remundo.Pricing.Domain.Utils;\nusing Remundo.Pricing.Domain.Models;\n\nnamespace Remundo.Pricing.Domain.Aggregates;\n\npublic class Bulgaria : PricingEngineBase\n{\n    public override string AggregateId => _correlationId;\n    private string _correlationId;\n\n    private const string IsoCode = \"BG\";\n    private const string Currency = \"BGN\";\n\n    private Price _price;\n\n    public Bulgaria()\n    {\n        RegisterTransition<PriceCalculatedV7>(Apply);\n\n        RegisterTransition<PriceCalculatedV5>(Apply);\n        RegisterTransition<PriceCalculatedV6>(Apply);\n    }\n\n    #region Legacy\n\n    private void Apply(PriceCalculatedV5 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    private void Apply(PriceCalculatedV6 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    #endregion\n\n    private void Apply(PriceCalculatedV7 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    public static Bulgaria Create()\n    {\n        return new Bulgaria();\n    }\n\n    public void CalculatePrice(CalculatePriceBulgaria command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new BulgariaEmployerCostCalculator(), calculator);\n        CalculatePriceInternal(command, cxt);\n    }\n\n    public void RecalculatePrice(RecalculatePrice command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new BulgariaEmployerCostCalculator(), calculator);\n        RecalculatePriceInternal(command, cxt);\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Croatia.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Domain.Commands;\nusing Remundo.Pricing.Domain.Utils;\nusing System.Reflection.Metadata;\nusing Remundo.Pricing.Domain.Models;\n\nnamespace Remundo.Pricing.Domain.Aggregates;\n\npublic class Croatia : PricingEngineBase\n{\n    public override string AggregateId => _correlationId;\n    private string _correlationId;\n\n    private const string IsoCode = \"HR\";\n    private const string Currency = \"EUR\";\n\n    private Price _price;\n\n    public Croatia()\n    {\n        RegisterTransition<PriceCalculatedV7>(Apply);\n\n        RegisterTransition<PriceCalculatedV6>(Apply);\n    }\n\n    #region Legacy\n\n    private void Apply(PriceCalculatedV6 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    #endregion\n\n    private void Apply(PriceCalculatedV7 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    public static Croatia Create()\n    {\n        return new Croatia();\n    }\n\n    public void CalculatePrice(CalculatePriceCroatia command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new CroatiaEmployerCostCalculator(), calculator);\n        CalculatePriceInternal(command, cxt);\n    }\n\n    public void RecalculatePrice(RecalculatePrice command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new CroatiaEmployerCostCalculator(), calculator);\n        RecalculatePriceInternal(command, cxt);\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Cyprus.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Domain.Commands;\nusing Remundo.Pricing.Domain.Utils;\nusing Remundo.Pricing.Domain.Models;\nusing System.Reflection.Metadata;\n\nnamespace Remundo.Pricing.Domain.Aggregates;\n\npublic class Cyprus : PricingEngineBase\n{\n    public override string AggregateId => _correlationId;\n    private string _correlationId;\n\n    private const string _isoCode = \"CY\";\n    private const string _currency = \"EUR\";\n\n    private Price _price;\n\n    public Cyprus()\n    {\n        RegisterTransition<PriceCalculatedV7>(Apply);\n\n        RegisterTransition<PriceCalculatedV6>(Apply);\n    }\n\n    #region Legacy\n\n    private void Apply(PriceCalculatedV6 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(_currency, _isoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    #endregion\n\n    private void Apply(PriceCalculatedV7 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(_currency, _isoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    public static Cyprus Create()\n    {\n        return new Cyprus();\n    }\n\n    public void CalculatePrice(CalculatePriceCyprus command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(_isoCode, _currency, _price, command.SelectedInsuranceDetails, httpService, new CyprusEmployerCostCalculator(), calculator);\n        CalculatePriceInternal(command, cxt);\n    }\n\n    public void RecalculatePrice(RecalculatePrice command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(_isoCode, _currency, _price, command.SelectedInsuranceDetails, httpService, new CyprusEmployerCostCalculator(), calculator);\n        RecalculatePriceInternal(command, cxt);\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/CzechRepublic.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Domain.Commands;\nusing Remundo.Pricing.Domain.Utils;\n\nnamespace Remundo.Pricing.Domain.Aggregates;\n\npublic class CzechRepublic : PricingEngineBase\n{\n    public override string AggregateId => _correlationId;\n    private string _correlationId;\n\n    private const string IsoCode = \"CZ\";\n    private const string Currency = \"CZK\";\n\n    private Price _price;\n\n    public CzechRepublic()\n    {\n        RegisterTransition<PriceCalculatedV7>(Apply);\n\n        RegisterTransition<PriceCalculatedV6>(Apply);\n    }\n\n    #region Legacy\n\n    private void Apply(PriceCalculatedV6 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    private void Apply(PriceCalculatedV7 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    #endregion\n\n    public static CzechRepublic Create()\n    {\n        return new CzechRepublic();\n    }\n\n    public void CalculatePrice(CalculatePriceCzechRepublic command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new CzechRepublicEmployerCostCalculator(), calculator);\n        CalculatePriceInternal(command, cxt);\n    }\n\n    public void RecalculatePrice(RecalculatePrice command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new CzechRepublicEmployerCostCalculator(), calculator);\n        RecalculatePriceInternal(command, cxt);\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Default.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Commands;\nusing Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Domain.Utils;\nusing Remundo.Pricing.Shared.Events;\n\n\nnamespace Remundo.Pricing.Domain.Aggregates;\n\npublic class Default : PricingEngineBase\n{\n    public override string AggregateId => _correlationId;\n    private string _correlationId;\n\n    private const string IsoCode = \"default\";\n    private const string Currency = \"EUR\";\n\n    private Price _price;\n\n    public Default()\n    {\n        RegisterTransition<PriceCalculatedV7>(Apply);\n\n        RegisterTransition<PriceCalculatedV5>(Apply);\n        RegisterTransition<PriceCalculatedV6>(Apply);\n    }\n\n    #region Legacy\n\n    private void Apply(PriceCalculatedV5 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    private void Apply(PriceCalculatedV6 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    #endregion\n\n    private void Apply(PriceCalculatedV7 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    public static Default Create()\n    {\n        return new Default();\n    }\n\n    public void CalculatePrice(CalculatePriceDefault command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = CreateContext(command.IsoCode, command.LocalCurrencyIsoCode, _price, command.SelectedInsuranceDetails, httpService, new DefaultEmployerCostCalculator(), calculator);\n        CalculatePriceInternal(command, cxt);\n    }\n\n    public void RecalculatePrice(RecalculatePrice command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = CreateContext(command.IsoCode, command.LocalCurrency, _price, command.SelectedInsuranceDetails, httpService, new DefaultEmployerCostCalculator(), calculator);\n        RecalculatePriceInternal(command, cxt);\n    }\n\n    private CountryPricingContext CreateContext(\n      string? isoCode,\n      string? currency,\n      Price price,\n      IDictionary<string, bool>? insuranceFlags,\n      IHttpService httpService,\n      IEmployerCostCalculator employerCostCalculator,\n      ICostsCalculator? calculator)\n    {\n        return new()\n        {\n            HttpService = httpService,\n            CountryIsoCode = isoCode ?? IsoCode,\n            LocalCurrency = currency ?? Currency,\n            Price = price,\n            EmployerCostCalculator = employerCostCalculator,\n            TenantCostsCalculator = calculator,\n            SelectedInsurances = insuranceFlags ?? price?.SelectedInsurances ?? new Dictionary<string, bool>()\n        };\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Denmark.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Domain.Commands;\nusing Remundo.Pricing.Domain.Utils;\nusing Remundo.Pricing.Domain.Models;\n\nnamespace Remundo.Pricing.Domain.Aggregates;\n\npublic class Denmark : PricingEngineBase\n{\n    public override string AggregateId => _correlationId;\n    private string _correlationId;\n\n    private const string IsoCode = \"DK\";\n    private const string Currency = \"DKK\";\n\n    private Price _price;\n\n    public Denmark()\n    {\n        RegisterTransition<PriceCalculatedV7>(Apply);\n\n    }\n\n    private void Apply(PriceCalculatedV7 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    public static Denmark Create()\n    {\n        return new Denmark();\n    }\n\n    public void CalculatePrice(CalculatePriceDenmark command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new DenmarkEmployerCostCalculator(), calculator);\n        CalculatePriceInternal(command, cxt);\n    }\n\n    public void RecalculatePrice(RecalculatePrice command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new DenmarkEmployerCostCalculator(), calculator);\n        RecalculatePriceInternal(command, cxt);\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/England.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Domain.Commands;\nusing Remundo.Pricing.Domain.Utils;\n\nnamespace Remundo.Pricing.Domain.Aggregates;\n\npublic class England : PricingEngineBase\n{\n    public override string AggregateId => _correlationId;\n    private string _correlationId;\n    public virtual string IsoCode => \"GB-ENG\";\n    private const string Currency = \"GBP\";\n    private Price _price;\n\n    public England()\n    {\n        RegisterTransition<PriceCalculatedV7>(Apply);\n\n        RegisterTransition<PriceCalculatedV5>(Apply);\n        RegisterTransition<PriceCalculatedV6>(Apply);\n    }\n\n    #region Legacy\n\n    private void Apply(PriceCalculatedV5 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    private void Apply(PriceCalculatedV6 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    #endregion\n\n    private void Apply(PriceCalculatedV7 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    public static England Create()\n    {\n        return new England();\n    }\n\n    public void CalculatePrice(CalculatePriceEngland command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new EnglandEmployerCostCalculator(), calculator);\n        CalculatePriceInternal(command, cxt);\n    }\n\n    public void RecalculatePrice(RecalculatePrice command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new EnglandEmployerCostCalculator(), calculator);\n        RecalculatePriceInternal(command, cxt);\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/France.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Domain.Commands;\nusing Remundo.Pricing.Domain.Utils;\n\nnamespace Remundo.Pricing.Domain.Aggregates;\n\npublic class France : PricingEngineBase\n{\n    public override string AggregateId => _correlationId;\n    private string _correlationId;\n    private const string IsoCode = \"FR\";\n    private const string Currency = \"EUR\";\n\n    private Price _price;\n\n    public France()\n    {\n        RegisterTransition<PriceCalculatedV7>(Apply);\n\n        RegisterTransition<PriceCalculatedV5>(Apply);\n        RegisterTransition<PriceCalculatedV6>(Apply);\n    }\n\n    #region Legacy\n\n    private void Apply(PriceCalculatedV5 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    private void Apply(PriceCalculatedV6 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    #endregion\n\n    private void Apply(PriceCalculatedV7 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    public static France Create()\n    {\n        return new France();\n    }\n\n    public void CalculatePrice(CalculatePriceFrance command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new FranceEmployerCostCalculator(), calculator);\n        CalculatePriceInternal(command, cxt);\n    }\n\n    public void RecalculatePrice(RecalculatePrice command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new FranceEmployerCostCalculator(), calculator);\n        RecalculatePriceInternal(command, cxt);\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Germany.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Commands;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Domain.Utils;\nusing Remundo.Pricing.Shared.Events;\nusing System.Reflection.Metadata;\n\n\nnamespace Remundo.Pricing.Domain.Aggregates;\n\npublic class Germany : PricingEngineBase\n{\n    public override string AggregateId => _correlationId;\n    private string _correlationId;\n\n    private const string IsoCode = \"DE\";\n    private const string Currency = \"EUR\";\n\n    private Price _price;\n\n    public Germany()\n    {\n        RegisterTransition<PriceCalculatedV7>(Apply);\n\n        RegisterTransition<PriceCalculatedV5>(Apply);\n        RegisterTransition<PriceCalculatedV6>(Apply);\n    }\n\n    #region Legacy\n\n    private void Apply(PriceCalculatedV5 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    private void Apply(PriceCalculatedV6 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    #endregion\n\n    private void Apply(PriceCalculatedV7 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    public static Germany Create()\n    {\n        return new Germany();\n    }\n\n    public void CalculatePrice(CalculatePriceGermany command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new GermanyEmployerCostCalculator(), calculator);\n        CalculatePriceInternal(command, cxt);\n    }\n\n    public void RecalculatePrice(RecalculatePrice command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new GermanyEmployerCostCalculator(), calculator);\n        RecalculatePriceInternal(command, cxt);\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Ireland.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Commands;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Domain.Utils;\nusing Remundo.Pricing.Shared.Events;\nusing System.Reflection.Metadata;\n\nnamespace Remundo.Pricing.Domain.Aggregates;\n\npublic class Ireland : PricingEngineBase\n{\n    public override string AggregateId => _correlationId;\n    private string _correlationId;\n\n    private const string IsoCode = \"IE\";\n    private const string Currency = \"EUR\";\n\n    private static PricingRules _pricingRules;\n    private Price _price;\n    private static IHttpService _httpService;\n\n    public Ireland()\n    {\n        RegisterTransition<PriceCalculatedV7>(Apply);\n\n        RegisterTransition<PriceCalculatedV2>(Apply);\n        RegisterTransition<PriceCalculatedV1>(Apply);\n        RegisterTransition<PriceCalculatedV5>(Apply);\n        RegisterTransition<PriceCalculatedV6>(Apply);\n    }\n\n    #region Legacy\n\n    private void Apply(PriceCalculatedV1 evt)\n    {\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.GrossSalaryElements[\"Base Salary\"],\n            evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.MedicalInsurance, false, evt.LifeInsurance, evt.Allowances);\n    }\n    \n    private void Apply(PriceCalculatedV2 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.GrossSalaryElements[\"Base Salary\"],\n            evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.MedicalInsuranceSelected, evt.DentalInsuranceSelected, evt.DeathInsuranceSelected, evt.Allowances);\n    }\n\n    private void Apply(PriceCalculatedV5 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    private void Apply(PriceCalculatedV6 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    #endregion\n\n    private void Apply(PriceCalculatedV7 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    public static Ireland Create()\n    {\n        return new Ireland();\n    }\n\n\n    public void CalculatePrice(CalculatePriceIreland command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        Ensure.NotNull(command, nameof(command));\n        Ensure.NotNull(command.Metadata, nameof(command.Metadata));\n        Ensure.Nonnegative(command.AnnualSalary, nameof(command.AnnualSalary));\n\n        _httpService = httpService;\n\n        switch (command.Metadata[\"command-type\"])\n        {\n            case \"CalculatePrice\":\n                CalculatePriceV1(command, httpService);\n                break;\n            case \"CalculatePriceV2\":\n                CalculatePriceV2(command, httpService, calculator);\n                break;\n            default:\n                throw new ArgumentException(\"Unknown command type\", command.Metadata[\"command-type\"]);\n        }\n    }\n    public void CalculatePriceV1(CalculatePriceIreland command, IHttpService httpService)\n    {\n        Ensure.NotNull(command, nameof(command));\n        Ensure.NotNull(command.Metadata, nameof(command.Metadata));\n        Ensure.Nonnegative(command.AnnualSalary, nameof(command.AnnualSalary));\n\n        var toCurrencyIsoCode = command.ToCurrencyIsoCode ?? Currency;\n        command.ToCurrencyIsoCode = toCurrencyIsoCode;\n\n        Task<PricingRules> pricingRulesTask = GetPricingRules(command.Metadata[\"tenant-id\"].ToString(), IsoCode, command.OrganisationId, httpService);\n        var exchangeRateTask = GetExchangeRateAsync(command.ToCurrencyIsoCode, Currency, httpService);\n        var exchangeRateEurToUSD = GetExchangeRateAsync(\"EUR\", \"USD\", httpService);\n        var evtExchangeRate = GetExchangeRateAsync(Currency, command.ToCurrencyIsoCode, httpService);\n        Task.WhenAll(pricingRulesTask, exchangeRateTask, exchangeRateEurToUSD, evtExchangeRate).Wait();\n        _pricingRules = pricingRulesTask.Result;\n        command.Allowances = command.Allowances ?? new Dictionary<string, decimal>();\n        var commandInEur = Convert(command, exchangeRateTask.Result);\n        var evt = CalculateLocalCosts(commandInEur, pricingRulesTask.Result, exchangeRateEurToUSD.Result);\n        \n        RaiseEvent(ConvertPriceEventToChosenCurrency(evt, evtExchangeRate.Result));\n    }\n\n    public void CalculatePriceV2(CalculatePriceIreland command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new IrelandEmployerCostCalculator(), calculator);\n        CalculatePriceInternal(command, cxt);\n    }\n\n    public void RecalculatePriceV2(RecalculatePrice command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new IrelandEmployerCostCalculator(), calculator);\n        RecalculatePriceInternal(command, cxt);\n    }\n\n    public void RecalculatePrice(RecalculatePrice command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        _httpService = httpService;\n\n        switch (command.Metadata[\"command-type\"].Split(\"-\")[0])\n        {\n            case \"RecalculatePrice\":\n                RecalculatePriceV1(command, httpService);\n                break;\n            case \"RecalculatePriceV2\":\n                RecalculatePriceV2(command, httpService, calculator);\n                break;\n            default:\n                throw new ArgumentException(\"Unknown command type\", command.Metadata[\"command-type\"]);\n        }\n    }\n\n    public void RecalculatePriceV1(RecalculatePrice command, IHttpService httpService)\n    {\n        Ensure.NotNull(command, nameof(command));\n        Ensure.NotNull(command.PriceId, nameof(command.PriceId));\n        Ensure.NotNull(command.Metadata, nameof(command.Metadata));\n\n\n        var fromCurrencyIsoCode = _price.ToCurrencyIsoCode ?? Currency;\n        var toCurrencyIsoCode = command.ToCurrencyIsoCode ?? _price.ToCurrencyIsoCode ?? Currency;\n\n        var pricingRulesTask = GetPricingRules(command.Metadata[\"tenant-id\"].ToString(), IsoCode, command.OrganisationId ?? _price.OrganisationId, httpService);\n        var exchangeRateTask = GetExchangeRateAsync(fromCurrencyIsoCode, Currency, httpService);\n        var exchangeRateGbpToDesired = GetExchangeRateAsync(\"GBP\", Currency, httpService);\n        var exchangeRateEurToUSD = GetExchangeRateAsync(\"EUR\", \"USD\", httpService);\n        var evtExchangeRate = GetExchangeRateAsync(Currency, toCurrencyIsoCode, httpService);\n        Task.WhenAll(pricingRulesTask, exchangeRateTask, exchangeRateEurToUSD, exchangeRateGbpToDesired, evtExchangeRate).Wait();\n        _pricingRules = pricingRulesTask.Result;\n        var annualSalary = command.AnnualSalary ?? _price.AnnualSalary;\n        var allowances = command.Allowances ?? _price.Allowances;\n        var oneOffDataAmount = command.OneOffDataAmount ?? _price.OneOffDataAmount;\n        var vestingDataAmount = command.VestingDataAmount ?? _price.VestingDataAmount;\n        var vestingDataCliffMonths = command.VestingDataCliffMonths ?? _price.VestingDataCliffMonths;\n        var vestingDataTotalMonths = command.VestingDataTotalMonths ?? _price.VestingDataTotalMonths;\n        var medicalInsuranceSelected = command.MedicalInsurance ?? _price.MedicalInsuranceSelected;\n        var dentalInsuranceSelected = command.DentalInsuranceSelected ?? _price.DentalInsuranceSelected;\n        var deathInsuranceSelected = command.DeathInsuranceSelected ?? _price.DeathInsuranceSelected;\n        //any values that are already entered in a desired currency need to be converted\n        //when a new currency is selected\n\n        CalculatePriceIreland commandInEur = Convert(new CalculatePriceIreland\n        {\n            CorrelationId = command.PriceId,\n            AnnualSalary = annualSalary,\n            ToCurrencyIsoCode = toCurrencyIsoCode,\n            MedicalInsuranceSelected = medicalInsuranceSelected ?? false,\n            DentalInsuranceSelected = dentalInsuranceSelected ?? false,\n            DeathInsuranceSelected = deathInsuranceSelected ?? false,\n            Allowances = allowances,\n            OneOffDataAmount = oneOffDataAmount,\n            VestingDataAmount = vestingDataAmount,\n            VestingDataCliffMonths = vestingDataCliffMonths,\n            VestingDataTotalMonths = vestingDataTotalMonths,\n            Metadata = command.Metadata\n        },  exchangeRateTask.Result);\n\n        var evt = CalculateLocalCosts(commandInEur, pricingRulesTask.Result, exchangeRateEurToUSD.Result);\n        var signingBonusCost = oneOffDataAmount == 0 ? 0 : CalculateSigningBonusCost(commandInEur, evt, pricingRulesTask.Result, exchangeRateEurToUSD.Result);\n        var vestingCost = vestingDataAmount == 0 ? 0 : CalculateVestingCost(commandInEur, evt, pricingRulesTask.Result, exchangeRateEurToUSD.Result);\n        var additionalPaymentsTotal = signingBonusCost + vestingCost;\n\n        var @event = new PriceCalculatedV2(Currency, evt.ConvertedCurrency, evt.IsoCode, evt.TotalCost, evt.GrossSalary, evt.EmployerCost,\n            evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit,\n            evt.AdditionalHolidayCost, evt.EmployerCostElements, evt.GrossSalaryElements, evt.Allowances, additionalPaymentsTotal,\n            signingBonusCost, oneOffDataAmount, vestingCost, vestingDataAmount, vestingDataCliffMonths, vestingDataTotalMonths,\n            evt.MedicalInsuranceSelected, evt.DentalInsuranceSelected, evt.DeathInsuranceSelected,\n            evt.MedicalInsuranceCost, evt.DentalInsuranceCost, evt.DeathInsuranceCost, evt.Metadata);\n\n        var evtInDesiredCurrency = ConvertPriceEventToChosenCurrency(@event, evtExchangeRate.Result);\n        RaiseEvent(evtInDesiredCurrency);\n    }"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Ireland.cs\n// service: src\nvar vestingDataCliffMonths = command.VestingDataCliffMonths ?? _price.VestingDataCliffMonths;\n        var vestingDataTotalMonths = command.VestingDataTotalMonths ?? _price.VestingDataTotalMonths;\n        var medicalInsuranceSelected = command.MedicalInsurance ?? _price.MedicalInsuranceSelected;\n        var dentalInsuranceSelected = command.DentalInsuranceSelected ?? _price.DentalInsuranceSelected;\n        var deathInsuranceSelected = command.DeathInsuranceSelected ?? _price.DeathInsuranceSelected;\n        //any values that are already entered in a desired currency need to be converted\n        //when a new currency is selected\n\n        CalculatePriceIreland commandInEur = Convert(new CalculatePriceIreland\n        {\n            CorrelationId = command.PriceId,\n            AnnualSalary = annualSalary,\n            ToCurrencyIsoCode = toCurrencyIsoCode,\n            MedicalInsuranceSelected = medicalInsuranceSelected ?? false,\n            DentalInsuranceSelected = dentalInsuranceSelected ?? false,\n            DeathInsuranceSelected = deathInsuranceSelected ?? false,\n            Allowances = allowances,\n            OneOffDataAmount = oneOffDataAmount,\n            VestingDataAmount = vestingDataAmount,\n            VestingDataCliffMonths = vestingDataCliffMonths,\n            VestingDataTotalMonths = vestingDataTotalMonths,\n            Metadata = command.Metadata\n        },  exchangeRateTask.Result);\n\n        var evt = CalculateLocalCosts(commandInEur, pricingRulesTask.Result, exchangeRateEurToUSD.Result);\n        var signingBonusCost = oneOffDataAmount == 0 ? 0 : CalculateSigningBonusCost(commandInEur, evt, pricingRulesTask.Result, exchangeRateEurToUSD.Result);\n        var vestingCost = vestingDataAmount == 0 ? 0 : CalculateVestingCost(commandInEur, evt, pricingRulesTask.Result, exchangeRateEurToUSD.Result);\n        var additionalPaymentsTotal = signingBonusCost + vestingCost;\n\n        var @event = new PriceCalculatedV2(Currency, evt.ConvertedCurrency, evt.IsoCode, evt.TotalCost, evt.GrossSalary, evt.EmployerCost,\n            evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit,\n            evt.AdditionalHolidayCost, evt.EmployerCostElements, evt.GrossSalaryElements, evt.Allowances, additionalPaymentsTotal,\n            signingBonusCost, oneOffDataAmount, vestingCost, vestingDataAmount, vestingDataCliffMonths, vestingDataTotalMonths,\n            evt.MedicalInsuranceSelected, evt.DentalInsuranceSelected, evt.DeathInsuranceSelected,\n            evt.MedicalInsuranceCost, evt.DentalInsuranceCost, evt.DeathInsuranceCost, evt.Metadata);\n\n        var evtInDesiredCurrency = ConvertPriceEventToChosenCurrency(@event, evtExchangeRate.Result);\n        RaiseEvent(evtInDesiredCurrency);\n    }\n    \n    private IDictionary<string, decimal> Convert(IDictionary<string, decimal> dict, decimal exchangeRate)\n    {\n        IDictionary<string, decimal> newDict = new Dictionary<string, decimal>();\n        foreach (var x in dict) newDict.Add(x.Key, x.Value * exchangeRate);\n        return newDict;\n    }\n\n    private PriceCalculatedV2 ConvertPriceEventToChosenCurrency(PriceCalculatedV2 priceCalculatedV2, decimal exchangeRate)\n    {\n        var totalCost = priceCalculatedV2.TotalCost * exchangeRate;\n        var grossSalary = priceCalculatedV2.GrossSalary * exchangeRate;\n        var employerCost = priceCalculatedV2.EmployerCost * exchangeRate;\n        var deposit = priceCalculatedV2.Deposit * exchangeRate;\n        var platformFee = priceCalculatedV2.PlatformFeeInLocalCurrency * exchangeRate;\n        var additionalHolidayCost = priceCalculatedV2.AdditionalHolidayCost * exchangeRate;\n        var employerCostElements = Convert(priceCalculatedV2.EmployerCostElements, exchangeRate);\n\n        var grossSalaryElements = Convert(priceCalculatedV2.GrossSalaryElements, exchangeRate);\n        var allowances = Convert(priceCalculatedV2.Allowances, exchangeRate);\n\n        var signingBonusIncludingCosts = priceCalculatedV2.SigningBonusCosts * exchangeRate;\n        var oneOffBonusAmount = priceCalculatedV2.SigningBonusAmount * exchangeRate;\n        var vestingBonusAmount = priceCalculatedV2.VestingBonusAmount * exchangeRate;\n        var additionalPaymentsTotal = priceCalculatedV2.AdditionalPaymentsTotal * exchangeRate;\n        var vestingBonusCosts = priceCalculatedV2.VestingBonusCosts * exchangeRate;\n\n        var dentalInsuranceCost = priceCalculatedV2.DentalInsuranceCost * exchangeRate;\n        var medicalInsuranceNewCost = priceCalculatedV2.MedicalInsuranceCost * exchangeRate;\n        var deathInsuranceCost = priceCalculatedV2.DeathInsuranceCost * exchangeRate;\n\n\n        return new PriceCalculatedV2(Currency, priceCalculatedV2.ConvertedCurrency, IsoCode,\n            totalCost, grossSalary, employerCost, platformFee, platformFee, deposit, additionalHolidayCost, employerCostElements,\n            grossSalaryElements, allowances, additionalPaymentsTotal, signingBonusIncludingCosts, oneOffBonusAmount, vestingBonusCosts,\n            vestingBonusAmount, priceCalculatedV2.VestingBonusCliffMonths,\n            priceCalculatedV2.VestingBonusTotalMonths,\n            priceCalculatedV2.MedicalInsuranceSelected, priceCalculatedV2.DentalInsuranceSelected, priceCalculatedV2.DeathInsuranceSelected,\n            medicalInsuranceNewCost, dentalInsuranceCost, deathInsuranceCost, priceCalculatedV2.Metadata);\n    }\n\n    private CalculatePriceIreland Convert(CalculatePriceIreland command, decimal exchangeRate)\n    {\n        var annualSalary = command.AnnualSalary * exchangeRate;\n        var oneOffDataAmount = command.OneOffDataAmount * exchangeRate;\n        var vestingDataAmount = command.VestingDataAmount * exchangeRate;\n        var allowances = new Dictionary<string, decimal>();\n        foreach (var x in command.Allowances) allowances.Add(x.Key, (x.Value * exchangeRate));\n        return new CalculatePriceIreland\n        {\n            CorrelationId = command.CorrelationId,\n            AnnualSalary = annualSalary,\n            ToCurrencyIsoCode = command.ToCurrencyIsoCode,\n            MedicalInsuranceSelected = command.MedicalInsuranceSelected,\n            DentalInsuranceSelected = command.DentalInsuranceSelected,\n            DeathInsuranceSelected = command.DeathInsuranceSelected,\n            Allowances = allowances,\n            OrganisationId = command.OrganisationId,\n            OneOffDataAmount = oneOffDataAmount,\n            VestingDataAmount = vestingDataAmount,\n            VestingDataCliffMonths = command.VestingDataCliffMonths,\n            VestingDataTotalMonths = command.VestingDataTotalMonths,\n            Metadata = command.Metadata\n        };\n    }\n\n    private PriceCalculatedV2 CalculateLocalCosts(CalculatePriceIreland command, PricingRules pricingRules, decimal exchangeRateEurToUSD, bool considerBonus = false)\n    {\n\n        Ensure.NotNull(command, nameof(command));\n        Ensure.NotNull(command.Metadata, nameof(command.Metadata));\n        Ensure.Nonnegative(command.AnnualSalary, nameof(command.AnnualSalary));\n                \n        decimal grossSalary = 0.0m;\n        decimal annualSalary = command.AnnualSalary;\n        if (considerBonus == true) annualSalary = CalculateSalaryWithBonus(command, annualSalary);\n\n        //Allowances\n        decimal totalallowancecost = command.Allowances.Values.ToList().Sum() * 12;\n\n        grossSalary += totalallowancecost;\n        var grossSalaryElements = new Dictionary<string, decimal>\n        {\n            { \"Base Salary\", annualSalary },\n        };\n        grossSalary += annualSalary;\n        decimal mensualSalary = (grossSalary / 12.0m);\n\n        decimal annualPrsi = CalculatePRSI(grossSalary);\n\n        var employerCostElements = new Dictionary<string, decimal>() {\n            { \"Pay-related Social Insurance\", annualPrsi }\n        };\n\n        var employerCost = employerCostElements.Values.Sum();\n        // Only add allowances if there are any\n\n        if (totalallowancecost > 0) grossSalaryElements.Add(\"Allowances\", (totalallowancecost));\n\n        var exchangeRateUSDToEUR = 1 / exchangeRateEurToUSD;\n\n        var deathInsuranceCost = Helpers.CalculateLifeAndAccidentsInsurance(annualSalary*exchangeRateEurToUSD) * exchangeRateUSDToEUR * 12;\n        var medicalInsuranceCost = Helpers.CalculateMedicalInsurance(\"Ireland\") * 12;\n        var dentalInsuranceCost = Helpers.CalculateDentalAndOpticalInsurance(\"Ireland\") * 12;\n\n        decimal holidayCost = CalculateHolidayCost(grossSalary);\n\n        decimal overhead = 0.04m * (grossSalary + employerCost);\n        employerCostElements.Add(\"EHS/OSHA\", overhead);\n        employerCost = employerCostElements.Values.Sum();\n\n        \n        decimal total = (command.DeathInsuranceSelected ? deathInsuranceCost/12 : 0)\n            + (command.MedicalInsuranceSelected ? medicalInsuranceCost/12 : 0)\n            + (command.DentalInsuranceSelected ? dentalInsuranceCost/12 : 0)\n            + holidayCost\n            + grossSalaryElements.Values.Sum()\n            + employerCost;\n\n        decimal platformFeeConverted = Helpers.CalculatePlatformFee(total, pricingRules, 1);\n        var platformFeeInDesiredCurrency = Helpers.CalculatePlatformFee(total, pricingRules, 1);\n        total += platformFeeConverted;\n\n        decimal deposit;\n        deposit = pricingRules.DepositFactor <= 0 ? 0 : CalculateDeposit(total);\n\n        return new PriceCalculatedV2(Currency, command.ToCurrencyIsoCode, IsoCode, total, grossSalary, employerCost,\n                              platformFeeInDesiredCurrency, platformFeeInDesiredCurrency, deposit, holidayCost, employerCostElements, grossSalaryElements,\n                              command.Allowances, 0, 0, command.OneOffDataAmount, 0,\n                              command.VestingDataAmount, command.VestingDataCliffMonths,\n                              command.VestingDataTotalMonths,\n                              command.MedicalInsuranceSelected, command.DentalInsuranceSelected, command.DeathInsuranceSelected,\n                              Helpers.CalculateMedicalInsurance(\"Ireland\"),\n                              Helpers.CalculateDentalAndOpticalInsurance(\"Ireland\"),\n                              Helpers.CalculateLifeAndAccidentsInsurance(annualSalary*exchangeRateEurToUSD) * exchangeRateUSDToEUR,\n                              command.Metadata);\n    }\n\n   private decimal CalculateSigningBonusCost(CalculatePriceIreland commandInEur, PriceCalculatedV2 evt, PricingRules pricingRules, decimal exchangeEurToUsd)\n    {   //Command with one off salary added to salary\n        var commandCopy = new CalculatePriceIreland(commandInEur);\n        commandCopy.AnnualSalary += commandInEur.OneOffDataAmount;\n        var evtWithOneOffBonus = CalculateLocalCosts(commandCopy, pricingRules, exchangeEurToUsd);\n        return evtWithOneOffBonus.TotalCost - evt.TotalCost;\n    }\n\n    private decimal CalculateVestingCost(CalculatePriceIreland commandInEur, PriceCalculatedV2 evt, PricingRules pricingRules, decimal exchangeEurToUsd)\n    {\n        //Calculate Vesting Bonus Costs\n        var commandCopy = new CalculatePriceIreland(commandInEur);\n        if (commandCopy.VestingDataTotalMonths >= commandCopy.VestingDataCliffMonths)\n        {\n            decimal numberOfPayments = commandInEur.VestingDataTotalMonths / commandInEur.VestingDataCliffMonths;\n            commandCopy.AnnualSalary += (commandInEur.VestingDataAmount / numberOfPayments);\n        }\n        var evtWithVestingBonus = CalculateLocalCosts(commandCopy, pricingRules, exchangeEurToUsd);\n        return evtWithVestingBonus.TotalCost - evt.TotalCost;\n    }\n   \n    private decimal CalculateSalaryWithBonus(CalculatePriceIreland bonus, decimal grossSalary)\n    {\n        if (bonus.VestingDataAmount > 0)\n        {\n            if (bonus.VestingDataTotalMonths > 12)\n            {\n                grossSalary = (bonus.VestingDataAmount * (12.0m / bonus.VestingDataTotalMonths)) + grossSalary;\n            }\n            else\n            {\n                grossSalary += bonus.VestingDataAmount;\n            }\n        }\n        else if (bonus.OneOffDataAmount > 0)\n        {\n            grossSalary += bonus.OneOffDataAmount;\n        }\n        return grossSalary;\n    }\n\n\n    private static decimal CalculatePRSI(decimal grossSalaryInEur)"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Ireland.cs\n// service: src\ncommandCopy.AnnualSalary += commandInEur.OneOffDataAmount;\n        var evtWithOneOffBonus = CalculateLocalCosts(commandCopy, pricingRules, exchangeEurToUsd);\n        return evtWithOneOffBonus.TotalCost - evt.TotalCost;\n    }\n\n    private decimal CalculateVestingCost(CalculatePriceIreland commandInEur, PriceCalculatedV2 evt, PricingRules pricingRules, decimal exchangeEurToUsd)\n    {\n        //Calculate Vesting Bonus Costs\n        var commandCopy = new CalculatePriceIreland(commandInEur);\n        if (commandCopy.VestingDataTotalMonths >= commandCopy.VestingDataCliffMonths)\n        {\n            decimal numberOfPayments = commandInEur.VestingDataTotalMonths / commandInEur.VestingDataCliffMonths;\n            commandCopy.AnnualSalary += (commandInEur.VestingDataAmount / numberOfPayments);\n        }\n        var evtWithVestingBonus = CalculateLocalCosts(commandCopy, pricingRules, exchangeEurToUsd);\n        return evtWithVestingBonus.TotalCost - evt.TotalCost;\n    }\n   \n    private decimal CalculateSalaryWithBonus(CalculatePriceIreland bonus, decimal grossSalary)\n    {\n        if (bonus.VestingDataAmount > 0)\n        {\n            if (bonus.VestingDataTotalMonths > 12)\n            {\n                grossSalary = (bonus.VestingDataAmount * (12.0m / bonus.VestingDataTotalMonths)) + grossSalary;\n            }\n            else\n            {\n                grossSalary += bonus.VestingDataAmount;\n            }\n        }\n        else if (bonus.OneOffDataAmount > 0)\n        {\n            grossSalary += bonus.OneOffDataAmount;\n        }\n        return grossSalary;\n    }\n\n\n    private static decimal CalculatePRSI(decimal grossSalaryInEur)\n    {\n        decimal lowerRateLimit = 21320.0m;\n        decimal prsi;\n\n        if (grossSalaryInEur < lowerRateLimit)\n        {\n            prsi = (grossSalaryInEur * 8.8m) / 100.0m;\n        }\n        else\n        {\n            //This is the way according to excel\n            prsi = (grossSalaryInEur * 11.05m) / 100;\n            \n            //This is the way we were doing it before\n            \n            //var lowerRate = (lowerRateLimit * 8.8m) / 100.0m;\n            //var higherRate = ((grossSalaryInEur - lowerRateLimit) * 11.05m) / 100.0m;\n            //prsi = lowerRate + higherRate;\n        }\n\n        return prsi;\n    }\n\n    private static decimal CalculateDeposit(decimal total)\n    {\n        decimal monthlyTotal = total / 12;\n        return monthlyTotal * (_pricingRules?.DepositFactor ?? 1.5m);\n    }\n\n    private static decimal CalculateHolidayCost(decimal grossSalaryInEur)\n    {\n        if (grossSalaryInEur > 100000)\n        {\n            return (grossSalaryInEur * 0) / 100;\n        }\n\n        return 0;\n    }\n\n    #region Getters\n    private static Task<decimal> GetExchangeRateAsync(string fromCurrency, string toCurrency, IHttpService httpService)\n    {\n        return httpService.GetAsync<decimal>($\"api/currencies/exchange-rates/{fromCurrency}/{toCurrency}\");\n    }\n\n    private static Task<PricingRules> GetPricingRules(string tenantId, string countryIsoCode, string? orgId, IHttpService httpService)\n    {\n        return httpService.GetAsync<PricingRules>($\"api/{tenantId}/reference-data/pricingrules/employee/{countryIsoCode}/organisations/{orgId ?? \"null\"}\");\n    }\n    #endregion\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Italy.cs\n// service: src\n﻿using Evento;\nusing Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Domain.Commands;\nusing Remundo.Pricing.Domain.Utils;\nusing Remundo.Pricing.Domain.Models;\nusing System.Reflection.Metadata;\n\nnamespace Remundo.Pricing.Domain.Aggregates;\n\npublic class Italy : PricingEngineBase\n{\n    public override string AggregateId => _correlationId;\n    private string _correlationId;\n\n    private const string IsoCode = \"IT\";\n    private const string Currency = \"EUR\";\n\n    private Price _price;\n\n    public Italy()\n    {\n        RegisterTransition<PriceCalculatedV7>(Apply);\n\n        RegisterTransition<PriceCalculatedV6>(Apply);\n    }\n\n    private void Apply(PriceCalculatedV6 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    private void Apply(PriceCalculatedV7 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances, evt.ContractTerm);\n    }\n\n    public static Italy Create()\n    {\n        return new Italy();\n    }\n\n    public void CalculatePrice(CalculatePriceItaly command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = CreateContext(IsoCode, Currency, command.ContractTerm, command.ContractType, _price, command.SelectedInsuranceDetails, httpService, new ItalyEmployerCostCalculator(), calculator);\n        CalculatePriceInternal(command, cxt);\n    }\n    \n    public void RecalculatePrice(RecalculatePrice command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = CreateContext(IsoCode, Currency, command.ContractTerm, string.Empty, _price, command.SelectedInsuranceDetails, httpService, new ItalyEmployerCostCalculator(), calculator);\n        RecalculatePriceInternal(command, cxt);\n    }\n\n    public static CountryPricingContext CreateContext(\n        string isoCode,\n        string currency,\n        string? contractTerm,\n        string contractType,\n        Price price,\n        IDictionary<string, bool>? insuranceFlags,\n        IHttpService httpService,\n        IEmployerCostCalculator employerCostCalculator,\n        ICostsCalculator? calculator)\n    {\n        return new()\n        {\n            HttpService = httpService,\n            CountryIsoCode = isoCode,\n            LocalCurrency = currency,\n            ContractTerm = contractTerm ?? price.ContractTerm,\n            ContractType = contractType,\n            Price = price,\n            EmployerCostCalculator = employerCostCalculator,\n            TenantCostsCalculator = calculator,\n            SelectedInsurances = insuranceFlags ?? price?.SelectedInsurances ?? new Dictionary<string, bool>()\n        };\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Luxembourg.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Commands;\nusing Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Domain.Utils;\nusing Remundo.Pricing.Shared.Events;\nusing System.Reflection.Metadata;\n\nnamespace Remundo.Pricing.Domain.Aggregates;\n\npublic class Luxembourg : PricingEngineBase\n{\n    public override string AggregateId => _correlationId;\n    private string _correlationId;\n\n    private const string IsoCode = \"LU\";\n    private const string Currency = \"EUR\";\n\n    private static readonly decimal _salaryCap = 12541.18m;\n    private static readonly decimal _pensionFundFactor = 0.08m;\n    private static readonly decimal _healthInsuranceEmployerCostFactor = 0.028m;\n    private static readonly decimal _mutualInsuranceSchemeFactor = 0.0053m;\n    private static readonly decimal _healthAndSafetyAtWorkFactor = 0.0014m;\n    private static readonly decimal _accidentInsuranceFactor = 0.0113m;\n    private static readonly decimal _overheadFactor = 0.04m;\n    private static readonly decimal _severanceFactor = 0m;\n    private static readonly decimal _fXCostsFactor = 0m;\n    private static readonly decimal _otherBenefitsFactor = 0m;\n    private static PricingRules _pricingRules;\n    private Price _price;\n    private static IHttpService _httpService;\n\n    public Luxembourg()\n    {\n        RegisterTransition<PriceCalculatedV7>(Apply);\n\n        RegisterTransition<PriceCalculatedV6>(Apply);\n        RegisterTransition<PriceCalculatedV5>(Apply);\n        RegisterTransition<PriceCalculatedV2>(Apply);\n        RegisterTransition<PriceCalculatedV1>(Apply);\n    }\n\n    #region Legacy\n\n    private void Apply(PriceCalculatedV1 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.GrossSalaryElements[\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.MedicalInsurance, false, evt.LifeInsurance, evt.Allowances);\n    }\n\n    private void Apply(PriceCalculatedV2 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.GrossSalaryElements[\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.MedicalInsuranceSelected, evt.DentalInsuranceSelected, evt.DeathInsuranceSelected, evt.Allowances);\n    }\n\n    private void Apply(PriceCalculatedV5 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    private void Apply(PriceCalculatedV6 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    #endregion\n\n    private void Apply(PriceCalculatedV7 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    public static Luxembourg Create()\n    {\n        return new Luxembourg();\n    }\n\n    public void CalculatePrice(CalculatePriceLuxembourg command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        Ensure.NotNull(command, nameof(command));\n        Ensure.NotNull(command.Metadata, nameof(command.Metadata));\n        Ensure.Nonnegative(command.AnnualSalary, nameof(command.AnnualSalary));\n\n        _httpService = httpService;\n\n        switch (command.Metadata[\"command-type\"])\n        {\n            case \"CalculatePrice\":\n                CalculatePriceV1(command, httpService);\n                break;\n            case \"CalculatePriceV2\":\n                CalculatePriceV2(command, httpService, calculator);\n                break;\n            default:\n                throw new ArgumentException(\"Unknown command type\", command.Metadata[\"command-type\"]);\n        }\n    }\n\n    public void CalculatePriceV1(CalculatePriceLuxembourg command, IHttpService httpService)\n    {\n        Ensure.NotNull(command, nameof(command));\n        Ensure.NotNull(command.Metadata, nameof(command.Metadata));\n        Ensure.Nonnegative(command.AnnualSalary, nameof(command.AnnualSalary));\n\n        var toCurrencyIsoCode = command.ToCurrencyIsoCode ?? Currency;\n        command.ToCurrencyIsoCode = toCurrencyIsoCode;\n\n        var pricingRules = GetPricingRules(command.Metadata[\"tenant-id\"].ToString(), IsoCode, command.OrganisationId, httpService);\n        var convertExchangeRate = GetExchangeRateAsync(toCurrencyIsoCode, Currency, httpService);\n        var exchangeRateEURToUSD = GetExchangeRateAsync(Currency, \"USD\", httpService);\n        var exchangeRateForEvent = GetExchangeRateAsync(Currency, command.ToCurrencyIsoCode, httpService);\n\n        Task.WhenAll(pricingRules, convertExchangeRate, exchangeRateEURToUSD, exchangeRateForEvent).Wait();\n        _pricingRules = pricingRules.Result;\n        var commandInEUR = Convert(command, convertExchangeRate.Result);\n        var evt = CalculateLocalCosts(commandInEUR, pricingRules.Result, exchangeRateEURToUSD.Result);\n        RaiseEvent(ConvertPriceEventToChosenCurrency(evt, exchangeRateForEvent.Result));\n    }\n\n    public void RecalculatePrice(RecalculatePrice command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        _httpService = httpService;\n\n        switch (command.Metadata[\"command-type\"].Split(\"-\")[0])\n        {\n            case \"RecalculatePrice\":\n                RecalculatePriceV1(command, httpService);\n                break;\n            case \"RecalculatePriceV2\":\n                RecalculatePriceV2(command, httpService, calculator);\n                break;\n            default:\n                throw new ArgumentException(\"Unknown command type\", command.Metadata[\"command-type\"]);\n        }\n    }\n\n    public void RecalculatePriceV1(RecalculatePrice command, IHttpService httpService)\n    {\n        Ensure.NotNull(command, nameof(command));\n        Ensure.NotNullOrWhiteSpace(command.PriceId, nameof(command.PriceId));\n        Ensure.NotNull(command.Metadata, nameof(command.Metadata));\n\n        var fromCurrencyIsoCode = _price.ToCurrencyIsoCode;\n        var toCurrencyIsoCode = command.ToCurrencyIsoCode ?? _price.ToCurrencyIsoCode;\n        var organisationId = command.OrganisationId ?? _price.OrganisationId;\n\n        var pricingRules = GetPricingRules(command.Metadata[\"tenant-id\"].ToString(), IsoCode, organisationId, httpService);\n        var convertExchangeRate = GetExchangeRateAsync(toCurrencyIsoCode, Currency, httpService);\n        var exchangeRateEURToUSD = GetExchangeRateAsync(Currency, \"USD\", httpService);\n        var exchangeRateForEvent = GetExchangeRateAsync(Currency, command.ToCurrencyIsoCode ?? Currency, httpService);\n\n        Task.WhenAll(pricingRules, convertExchangeRate, exchangeRateEURToUSD, exchangeRateForEvent).Wait();\n        _pricingRules = pricingRules.Result;\n        var annualSalary = command.AnnualSalary ?? _price.AnnualSalary;\n        var allowances = command.Allowances ?? _price.Allowances;\n        var signingBonusAmount = command.OneOffDataAmount ?? _price.OneOffDataAmount;\n        var vestingBonusAmount = command.VestingDataAmount ?? _price.VestingDataAmount;\n        var vestingBonusCliffMonths = command.VestingDataCliffMonths ?? _price.VestingDataCliffMonths;\n        var vestingBonusTotalMonths = command.VestingDataTotalMonths ?? _price.VestingDataTotalMonths;\n\n        var medicalInsuranceSelected = command.MedicalInsurance ?? _price.MedicalInsuranceSelected;\n        var dentalInsuranceSelected = command.DentalInsuranceSelected ?? _price.DentalInsuranceSelected;\n        var deathInsuranceSelected = command.DeathInsuranceSelected ?? _price.DeathInsuranceSelected;\n \n\n        CalculatePriceLuxembourg commandInEur = Convert(new CalculatePriceLuxembourg\n        {\n            CorrelationId = command.PriceId,\n            AnnualSalary = annualSalary,\n            ToCurrencyIsoCode = toCurrencyIsoCode,\n            MedicalInsuranceSelected = medicalInsuranceSelected ?? false,\n            DentalInsuranceSelected = dentalInsuranceSelected ?? false,\n            DeathInsuranceSelected = deathInsuranceSelected ?? false,\n            Allowances = allowances,\n            OneOffDataAmount = signingBonusAmount,\n            VestingDataAmount = vestingBonusAmount,\n            VestingDataCliffMonths = vestingBonusCliffMonths,\n            VestingDataTotalMonths = vestingBonusTotalMonths,\n            Metadata = command.Metadata\n        }, convertExchangeRate.Result);\n\n        var evt = CalculateLocalCosts(commandInEur, pricingRules.Result, exchangeRateEURToUSD.Result);\n        var signingBonusCost = signingBonusAmount == 0 ? 0 : CalculateOneOffCost(commandInEur, evt, pricingRules.Result, exchangeRateEURToUSD.Result);\n        var vestingCost = vestingBonusAmount == 0 ? 0 : CalculateVestingCost(commandInEur, evt, pricingRules.Result, exchangeRateEURToUSD.Result);\n        var additionalPaymentsTotal = signingBonusCost + vestingCost;\n\n        var @event = new PriceCalculatedV2(Currency, evt.ConvertedCurrency, evt.IsoCode, evt.TotalCost, evt.GrossSalary, evt.EmployerCost,\n            evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit,\n            evt.AdditionalHolidayCost, evt.EmployerCostElements, evt.GrossSalaryElements, evt.Allowances, additionalPaymentsTotal,\n            signingBonusCost, evt.SigningBonusAmount, vestingCost, evt.VestingBonusAmount, evt.VestingBonusCliffMonths,\n            evt.VestingBonusTotalMonths, evt.MedicalInsuranceSelected, evt.DentalInsuranceSelected, evt.DeathInsuranceSelected,\n            evt.MedicalInsuranceCost, evt.DentalInsuranceCost, evt.DeathInsuranceCost, evt.Metadata);\n\n        var evtInDesiredCurrency = ConvertPriceEventToChosenCurrency(@event, exchangeRateForEvent.Result);\n\n        RaiseEvent(evtInDesiredCurrency);\n    }"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Luxembourg.cs\n// service: src\nvar vestingBonusTotalMonths = command.VestingDataTotalMonths ?? _price.VestingDataTotalMonths;\n\n        var medicalInsuranceSelected = command.MedicalInsurance ?? _price.MedicalInsuranceSelected;\n        var dentalInsuranceSelected = command.DentalInsuranceSelected ?? _price.DentalInsuranceSelected;\n        var deathInsuranceSelected = command.DeathInsuranceSelected ?? _price.DeathInsuranceSelected;\n \n\n        CalculatePriceLuxembourg commandInEur = Convert(new CalculatePriceLuxembourg\n        {\n            CorrelationId = command.PriceId,\n            AnnualSalary = annualSalary,\n            ToCurrencyIsoCode = toCurrencyIsoCode,\n            MedicalInsuranceSelected = medicalInsuranceSelected ?? false,\n            DentalInsuranceSelected = dentalInsuranceSelected ?? false,\n            DeathInsuranceSelected = deathInsuranceSelected ?? false,\n            Allowances = allowances,\n            OneOffDataAmount = signingBonusAmount,\n            VestingDataAmount = vestingBonusAmount,\n            VestingDataCliffMonths = vestingBonusCliffMonths,\n            VestingDataTotalMonths = vestingBonusTotalMonths,\n            Metadata = command.Metadata\n        }, convertExchangeRate.Result);\n\n        var evt = CalculateLocalCosts(commandInEur, pricingRules.Result, exchangeRateEURToUSD.Result);\n        var signingBonusCost = signingBonusAmount == 0 ? 0 : CalculateOneOffCost(commandInEur, evt, pricingRules.Result, exchangeRateEURToUSD.Result);\n        var vestingCost = vestingBonusAmount == 0 ? 0 : CalculateVestingCost(commandInEur, evt, pricingRules.Result, exchangeRateEURToUSD.Result);\n        var additionalPaymentsTotal = signingBonusCost + vestingCost;\n\n        var @event = new PriceCalculatedV2(Currency, evt.ConvertedCurrency, evt.IsoCode, evt.TotalCost, evt.GrossSalary, evt.EmployerCost,\n            evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit,\n            evt.AdditionalHolidayCost, evt.EmployerCostElements, evt.GrossSalaryElements, evt.Allowances, additionalPaymentsTotal,\n            signingBonusCost, evt.SigningBonusAmount, vestingCost, evt.VestingBonusAmount, evt.VestingBonusCliffMonths,\n            evt.VestingBonusTotalMonths, evt.MedicalInsuranceSelected, evt.DentalInsuranceSelected, evt.DeathInsuranceSelected,\n            evt.MedicalInsuranceCost, evt.DentalInsuranceCost, evt.DeathInsuranceCost, evt.Metadata);\n\n        var evtInDesiredCurrency = ConvertPriceEventToChosenCurrency(@event, exchangeRateForEvent.Result);\n\n        RaiseEvent(evtInDesiredCurrency);\n    }\n\n    public void CalculatePriceV2(CalculatePriceLuxembourg command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new LuxembourgEmployerCostCalculator(), calculator);\n        CalculatePriceInternal(command, httpService, calculator, new LuxembourgEmployerCostCalculator(), false, IsoCode, Currency, IsoCode);\n    }\n\n    public void RecalculatePriceV2(RecalculatePrice command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new LuxembourgEmployerCostCalculator(), calculator);\n        RecalculatePriceInternal(command, _price, httpService, calculator, new LuxembourgEmployerCostCalculator(), false, IsoCode, Currency, IsoCode);\n    }\n\n    private decimal CalculateEmployerHealthInsurance(decimal monthlyTotalBasicPay)\n    {\n        decimal minimum = Math.Min(_salaryCap, monthlyTotalBasicPay);\n        decimal employerHealthInsurance = minimum * _healthInsuranceEmployerCostFactor;\n        return employerHealthInsurance;\n    }\n\n    private decimal CalculatePensionFund(decimal monthlyTotalBasicPay)\n    {\n        decimal minimum = Math.Min(monthlyTotalBasicPay, _salaryCap);\n        decimal pensionFund = minimum * _pensionFundFactor;\n        return pensionFund;\n    }\n\n    private decimal CalculateMutualInsuranceScheme(decimal monthlyTotalBasicPay)\n    {\n        decimal mututalInsuranceScheme = monthlyTotalBasicPay * _mutualInsuranceSchemeFactor;\n        return mututalInsuranceScheme;\n    }\n\n    private decimal CalculateSafetyAndHealthAtWork(decimal monthlyTotalBasicPay)\n    {\n        decimal minimum = Math.Min(_salaryCap, monthlyTotalBasicPay);\n        decimal healthAndSafetyAtWork = minimum * _healthAndSafetyAtWorkFactor;\n        return healthAndSafetyAtWork;\n    }\n\n    private decimal CalculateEmployerAccidentInsurance(decimal monthlyTotalBasicPay)\n    {\n        decimal minimum = Math.Min(_salaryCap, monthlyTotalBasicPay);\n        decimal employerAccidentInsurance = minimum * _accidentInsuranceFactor;\n        return employerAccidentInsurance;\n    }\n\n    private decimal CalculateTotalEmployerCost(decimal monthlyTotalBasicPay)\n    {\n        decimal employerHealthInsurance = CalculateEmployerHealthInsurance(monthlyTotalBasicPay);\n        decimal pensionFund = CalculatePensionFund(monthlyTotalBasicPay);\n        decimal mutualInsuranceScheme = CalculateMutualInsuranceScheme(monthlyTotalBasicPay);\n        decimal healthAndSafetyAtWork = CalculateSafetyAndHealthAtWork(monthlyTotalBasicPay);\n        decimal accidentInsurance = CalculateEmployerAccidentInsurance(monthlyTotalBasicPay);\n        decimal totalEmployerCost = employerHealthInsurance + pensionFund + mutualInsuranceScheme + healthAndSafetyAtWork + accidentInsurance;\n        return totalEmployerCost;\n    }\n    private decimal CalculateDirectCostOfEmployment(decimal monthlyTotalBasicPay, decimal totalEmployerCost)\n    {\n        decimal directCostOfEmployment = monthlyTotalBasicPay + totalEmployerCost;\n        return directCostOfEmployment;\n    }\n    private decimal CalculateSeverance(decimal directCostOfEmployment)\n    {\n        decimal severance = directCostOfEmployment * _severanceFactor;\n        return severance;\n    }\n\n    private decimal CalculateOverhead(decimal directCostOfEmployment)\n    {\n        decimal overhead = directCostOfEmployment * _overheadFactor;\n        return overhead;\n    }\n\n    private decimal CalculateFXCosts(decimal directCostOfEmployment)\n    {\n        decimal fXCosts = directCostOfEmployment * _fXCostsFactor;\n        return fXCosts;\n    }\n\n    private decimal CalculateOtherBenefits(decimal directCostOfEmployment)\n    {\n        decimal otherBenefits = directCostOfEmployment * _otherBenefitsFactor;\n        return otherBenefits;\n    }\n\n    private decimal CalculateTotalAccruals(decimal directCostOfEmployment)\n    {\n        decimal severance = CalculateSeverance(directCostOfEmployment);\n        decimal overHead = CalculateOverhead(directCostOfEmployment);\n        decimal fXCosts = CalculateFXCosts(directCostOfEmployment);\n        decimal otherBenefits = CalculateOtherBenefits(directCostOfEmployment);\n        decimal totalAccruals = severance + overHead + fXCosts + otherBenefits;\n        return totalAccruals;\n    }\n\n    private decimal CalculateMonthlyTotalCostOfEmployment(decimal monthlyTotalBasicPay)\n    {\n        decimal totalEmployerCost = CalculateTotalEmployerCost(monthlyTotalBasicPay);\n        decimal directCostOfEmployment = CalculateDirectCostOfEmployment(totalEmployerCost, monthlyTotalBasicPay);\n        decimal totalAccruals = CalculateTotalAccruals(directCostOfEmployment);\n        decimal monthlyTotalCostOfEmployment = directCostOfEmployment + totalAccruals;\n        return monthlyTotalCostOfEmployment;\n    }\n    public decimal CalculateBonusCost(PriceCalculatedV2 evt, PriceCalculatedV2 evtWithBonus)\n    {\n        return (evtWithBonus.TotalCost - evt.TotalCost);\n    }\n    public IDictionary<string, decimal> Convert(IDictionary<string, decimal> dict, decimal exchangeRate)\n    {\n        IDictionary<string, decimal> newDict = new Dictionary<string, decimal>();\n        foreach (var x in dict) newDict.Add(x.Key, (x.Value * exchangeRate));\n        return newDict;\n    }\n    private PriceCalculatedV2 ConvertPriceEventToChosenCurrency(PriceCalculatedV2 priceCalculatedV2, decimal exchangeRate)\n    {\n        var totalCost = priceCalculatedV2.TotalCost * exchangeRate;\n        var grossSalary = priceCalculatedV2.GrossSalary * exchangeRate;\n        var employerCost = priceCalculatedV2.EmployerCost * exchangeRate;\n        var deposit = priceCalculatedV2.Deposit * exchangeRate;\n        var platformFee = priceCalculatedV2.PlatformFeeInLocalCurrency * exchangeRate;\n        var additionalHolidayCost = priceCalculatedV2.AdditionalHolidayCost * exchangeRate;\n        var employerCostElements = Convert(priceCalculatedV2.EmployerCostElements, exchangeRate);\n\n        var grossSalaryElements = Convert(priceCalculatedV2.GrossSalaryElements, exchangeRate);\n        var allowances = Convert(priceCalculatedV2.Allowances, exchangeRate);\n\n        var signingBonusIncludingCosts = priceCalculatedV2.SigningBonusCosts * exchangeRate;\n        var oneOffBonusAmount = priceCalculatedV2.SigningBonusAmount * exchangeRate;\n        var vestingBonusAmount = priceCalculatedV2.VestingBonusAmount * exchangeRate;\n        var additionalPaymentsTotal = priceCalculatedV2.AdditionalPaymentsTotal * exchangeRate;\n        var vestingBonusCosts = priceCalculatedV2.VestingBonusCosts * exchangeRate;\n\n        var dentalInsuranceCost = priceCalculatedV2.DentalInsuranceCost * exchangeRate;\n        var medicalInsuranceNewCost = priceCalculatedV2.MedicalInsuranceCost * exchangeRate;\n        var deathInsuranceCost = priceCalculatedV2.DeathInsuranceCost * exchangeRate;\n\n\n        return new PriceCalculatedV2(Currency, priceCalculatedV2.ConvertedCurrency, IsoCode,\n            totalCost, grossSalary, employerCost, platformFee, platformFee, deposit, additionalHolidayCost, employerCostElements,\n            grossSalaryElements, allowances, additionalPaymentsTotal, signingBonusIncludingCosts, oneOffBonusAmount, vestingBonusCosts,\n            vestingBonusAmount, priceCalculatedV2.VestingBonusCliffMonths,\n            priceCalculatedV2.VestingBonusTotalMonths,\n            priceCalculatedV2.MedicalInsuranceSelected, priceCalculatedV2.DentalInsuranceSelected, priceCalculatedV2.DeathInsuranceSelected,\n            medicalInsuranceNewCost, dentalInsuranceCost, deathInsuranceCost, priceCalculatedV2.Metadata);\n    }\n\n    private PriceCalculatedV6 ConvertPriceEventToChosenCurrency(PriceCalculatedV6 evt, decimal exchangeRate)\n    {\n        var totalCost = evt.TotalCost * exchangeRate;\n        var grossSalary = evt.GrossSalary * exchangeRate;\n        var employerCost = evt.EmployerCost * exchangeRate;\n        var deposit = evt.Deposit * exchangeRate;\n        var depositRounded = Math.Ceiling(evt.DepositRounded * exchangeRate);\n        var platformFee = evt.PlatformFeeInLocalCurrency * exchangeRate;\n        var additionalHolidayCost = evt.AdditionalHolidayCost * exchangeRate;\n        var costs = Convert(evt.Costs, exchangeRate);\n\n        var allowances = Convert(evt.Allowances, exchangeRate);\n        var insurances = Convert(evt.EmployeeInsuranceFees, exchangeRate);\n\n        var oneOffBonusAmount = evt.SigningBonusAmount * exchangeRate;\n        var vestingBonusAmount = evt.VestingBonusAmount * exchangeRate;\n\n\n        return new PriceCalculatedV6(Currency, evt.ConvertedCurrency, IsoCode, evt.OrganisationId,\n            totalCost, grossSalary, employerCost, platformFee, platformFee, deposit, depositRounded, additionalHolidayCost, costs,\n            allowances, oneOffBonusAmount,\n            vestingBonusAmount, evt.VestingBonusCliffMonths,\n            evt.VestingBonusTotalMonths, false, false, 0,\n            evt.SelectedInsurances, new Dictionary<string, decimal>(), insurances,\n            new Dictionary<string, decimal>(), new Dictionary<string, decimal>(), evt.Metadata);\n    }\n\n    public CalculatePriceLuxembourg Convert(CalculatePriceLuxembourg command, decimal exchangeRate)\n    {\n        var toCurrencyIsoCode = command.ToCurrencyIsoCode ?? Currency;\n        var annualSalary = command.AnnualSalary * exchangeRate;\n        var allowances = new Dictionary<string, decimal>();\n        var vestingBonus = command.VestingDataAmount * exchangeRate;\n        var signingBonus = command.OneOffDataAmount * exchangeRate;"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Luxembourg.cs\n// service: src\nvestingBonusAmount, priceCalculatedV2.VestingBonusCliffMonths,\n            priceCalculatedV2.VestingBonusTotalMonths,\n            priceCalculatedV2.MedicalInsuranceSelected, priceCalculatedV2.DentalInsuranceSelected, priceCalculatedV2.DeathInsuranceSelected,\n            medicalInsuranceNewCost, dentalInsuranceCost, deathInsuranceCost, priceCalculatedV2.Metadata);\n    }\n\n    private PriceCalculatedV6 ConvertPriceEventToChosenCurrency(PriceCalculatedV6 evt, decimal exchangeRate)\n    {\n        var totalCost = evt.TotalCost * exchangeRate;\n        var grossSalary = evt.GrossSalary * exchangeRate;\n        var employerCost = evt.EmployerCost * exchangeRate;\n        var deposit = evt.Deposit * exchangeRate;\n        var depositRounded = Math.Ceiling(evt.DepositRounded * exchangeRate);\n        var platformFee = evt.PlatformFeeInLocalCurrency * exchangeRate;\n        var additionalHolidayCost = evt.AdditionalHolidayCost * exchangeRate;\n        var costs = Convert(evt.Costs, exchangeRate);\n\n        var allowances = Convert(evt.Allowances, exchangeRate);\n        var insurances = Convert(evt.EmployeeInsuranceFees, exchangeRate);\n\n        var oneOffBonusAmount = evt.SigningBonusAmount * exchangeRate;\n        var vestingBonusAmount = evt.VestingBonusAmount * exchangeRate;\n\n\n        return new PriceCalculatedV6(Currency, evt.ConvertedCurrency, IsoCode, evt.OrganisationId,\n            totalCost, grossSalary, employerCost, platformFee, platformFee, deposit, depositRounded, additionalHolidayCost, costs,\n            allowances, oneOffBonusAmount,\n            vestingBonusAmount, evt.VestingBonusCliffMonths,\n            evt.VestingBonusTotalMonths, false, false, 0,\n            evt.SelectedInsurances, new Dictionary<string, decimal>(), insurances,\n            new Dictionary<string, decimal>(), new Dictionary<string, decimal>(), evt.Metadata);\n    }\n\n    public CalculatePriceLuxembourg Convert(CalculatePriceLuxembourg command, decimal exchangeRate)\n    {\n        var toCurrencyIsoCode = command.ToCurrencyIsoCode ?? Currency;\n        var annualSalary = command.AnnualSalary * exchangeRate;\n        var allowances = new Dictionary<string, decimal>();\n        var vestingBonus = command.VestingDataAmount * exchangeRate;\n        var signingBonus = command.OneOffDataAmount * exchangeRate;\n        foreach (var x in command.Allowances) allowances.Add(x.Key, (x.Value * exchangeRate));\n\n        return new CalculatePriceLuxembourg\n        {\n            CorrelationId = command.CorrelationId,\n            AnnualSalary = annualSalary,\n            OrganisationId = command.OrganisationId,\n            ToCurrencyIsoCode = command.ToCurrencyIsoCode,\n            MedicalInsuranceSelected = command.MedicalInsuranceSelected,\n            DentalInsuranceSelected = command.DentalInsuranceSelected,\n            DeathInsuranceSelected = command.DeathInsuranceSelected,\n            Allowances = allowances,\n            OneOffDataAmount = signingBonus,\n            VestingDataAmount = vestingBonus,\n            VestingDataCliffMonths = command.VestingDataCliffMonths,\n            VestingDataTotalMonths = command.VestingDataTotalMonths,\n            Metadata = command.Metadata\n        };\n    }\n\n    private IDictionary<string, IDictionary<string, decimal>> Convert(IDictionary<string, IDictionary<string, decimal>> dict, decimal exchangeRate)\n    {\n        IDictionary<string, IDictionary<string, decimal>> newDict = new Dictionary<string, IDictionary<string, decimal>>();\n        foreach (var x in dict)\n        {\n            newDict[x.Key] = new Dictionary<string, decimal>();\n            foreach (var y in x.Value)\n                newDict[x.Key].Add(y.Key, y.Value * exchangeRate);\n        }\n        return newDict;\n    }\n\n    public PriceCalculatedV2 CalculateLocalCosts(CalculatePriceLuxembourg command, PricingRules pricingRules, decimal exchangeRateEurToUSD, bool includeBonus = false)\n    {\n        var exchangeRateUSDToEUR = 1 / exchangeRateEurToUSD;\n        //Converting annual salary and deposit\n        decimal annualSalary = command.AnnualSalary;\n\n        //Total elements\n        IDictionary<string, decimal> grossSalaryElements = new Dictionary<string, decimal>() { };\n        grossSalaryElements.Add(\"Base Salary\", annualSalary);\n\n        //Allowances\n        decimal totalAllowances = command.Allowances.Values.ToList().Sum() * 12;\n        if (totalAllowances > 0) grossSalaryElements.Add(\"Allowances\", totalAllowances);\n\n        decimal grossSalary = grossSalaryElements.Values.Sum();\n\n        // calculating total cost of employment\n        decimal monthlySalary = grossSalary / 12;\n        decimal employmentCost_monthly = CalculateMonthlyTotalCostOfEmployment(monthlySalary);\n        decimal employmentCost_annual = employmentCost_monthly * 12;\n                \n        //Insurances\n\n        var deathInsuranceCost = Helpers.CalculateLifeAndAccidentsInsurance(annualSalary * exchangeRateEurToUSD) * exchangeRateUSDToEUR * 12;\n        var medicalInsuranceCost = Helpers.CalculateMedicalInsurance(\"Luxembourg\") * 12;\n        var dentalInsuranceCost = Helpers.CalculateDentalAndOpticalInsurance(\"Luxembourg\") * 12;\n\n        //Employer Cost Elements\n        IDictionary<string, decimal> employerCostElements = new Dictionary<string, decimal>() { };\n        decimal holidayCost = CalculateHolidayCost(annualSalary);\n\n        employerCostElements.Add(\"Health Insurance\", CalculateEmployerHealthInsurance(monthlySalary) * 12);\n        employerCostElements.Add(\"Pension Fund\", CalculatePensionFund(monthlySalary) * 12);\n        employerCostElements.Add(\"Mutual Insurance Scheme\", CalculateMutualInsuranceScheme(monthlySalary) * 12);\n        // what is this second health insurance?\n        employerCostElements.Add(\"Safety & Health at Work\", CalculateSafetyAndHealthAtWork(monthlySalary) * 12);\n        employerCostElements.Add(\"Accident Insurance\", CalculateEmployerAccidentInsurance(monthlySalary) * 12);\n\n        decimal employerCost = employerCostElements.Values.ToList().Sum();\n\n        //adding overhead costs to employment costs\n        decimal employerHealthInsurance = CalculateEmployerHealthInsurance(monthlySalary) * 12;\n        decimal pensionFund = CalculatePensionFund(monthlySalary) * 12;\n        decimal mutualInsuranceScheme = CalculateMutualInsuranceScheme(monthlySalary) * 12;\n        decimal safetyHealthAtWork = CalculateSafetyAndHealthAtWork(monthlySalary) * 12;\n        decimal accidentInsurance = CalculateEmployerAccidentInsurance(monthlySalary) * 12;\n        decimal employerCostBeforeOverhead = employerHealthInsurance + pensionFund + mutualInsuranceScheme + safetyHealthAtWork + accidentInsurance;\n        decimal directCostOfEmployment = CalculateDirectCostOfEmployment(annualSalary, employerCostBeforeOverhead);\n        decimal overhead = CalculateOverhead(directCostOfEmployment);\n        employerCostElements.Add(\"EHS/OSHA\", overhead);\n\n        IDictionary<string, decimal> allowances = new Dictionary<string, decimal>();\n        foreach (var x in command.Allowances) allowances.Add(x.Key, x.Value);\n\n        decimal total = employmentCost_annual;\n        //PlatformFee\n        decimal platformFeeInLocalCurrency = Helpers.CalculatePlatformFee(total, pricingRules, 1);\n        total += platformFeeInLocalCurrency;\n\n\n        if (command.MedicalInsuranceSelected) total += medicalInsuranceCost/12;\n        if (command.DentalInsuranceSelected) total += dentalInsuranceCost/12;\n        if (command.DeathInsuranceSelected) total += deathInsuranceCost/12;\n\n        employerCost += overhead;\n\n        decimal deposit;\n        deposit = pricingRules.DepositFactor <= 0 ? 0 : CalculateDeposit(total);\n\n        return new PriceCalculatedV2(Currency, command.ToCurrencyIsoCode, IsoCode, total, grossSalary, employerCost,\n                              platformFeeInLocalCurrency, platformFeeInLocalCurrency, deposit, holidayCost, employerCostElements, grossSalaryElements,\n                              command.Allowances, 0, 0, command.OneOffDataAmount, 0,\n                              command.VestingDataAmount, command.VestingDataCliffMonths,\n                              command.VestingDataTotalMonths,\n                              command.MedicalInsuranceSelected, command.DentalInsuranceSelected, command.DeathInsuranceSelected,\n                              Helpers.CalculateMedicalInsurance(\"Luxembourg\"),\n                              Helpers.CalculateDentalAndOpticalInsurance(\"Luxembourg\"),\n                              Helpers.CalculateLifeAndAccidentsInsurance(annualSalary * exchangeRateEurToUSD) * exchangeRateUSDToEUR, \n                              command.Metadata);\n    }\n\n    public PriceCalculatedV6 CalculateLocalCostsV2(CalculatePriceLuxembourg command, PricingRules pricingRules, decimal exchangeRateEURToUSD, decimal medicalInsuranceExchangeRate, decimal dentalInsuranceExchangeRate, ICostsCalculator calculator)\n    {\n        var exchangeRateUSDToEUR = 1 / exchangeRateEURToUSD;\n        //Converting annual salary and deposit\n        decimal annualSalary = command.AnnualSalary;\n        //Total elements\n        IDictionary<string, decimal> grossSalaryElements = new Dictionary<string, decimal>() { };\n        grossSalaryElements.Add(\"Base Salary\", annualSalary);\n\n        //Allowances\n        decimal totalAllowances = command.Allowances.Values.ToList().Sum() * 12;\n        if (totalAllowances > 0) grossSalaryElements.Add(\"Allowances\", totalAllowances);\n\n        decimal grossSalary = grossSalaryElements.Values.Sum();\n        decimal total = 0;\n        // calculating total cost of employment\n        decimal monthlySalary = grossSalary / 12;\n\n        //Employer Cost Elements\n        decimal holidayCost = CalculateHolidayCost(annualSalary);\n        var healthInsurance = CalculateEmployerHealthInsurance(monthlySalary) * 12;\n        var pensionFund = CalculatePensionFund(monthlySalary) * 12;\n        var mutualInsuranceScheme = CalculateMutualInsuranceScheme(monthlySalary) * 12;\n        var healthAndSafetyAtWork = CalculateSafetyAndHealthAtWork(monthlySalary) * 12;\n        var accidentInsurance = CalculateEmployerAccidentInsurance(monthlySalary) * 12;\n\n        decimal costOfEmployment = healthInsurance + pensionFund + mutualInsuranceScheme + healthAndSafetyAtWork + accidentInsurance + grossSalary;\n\n        //Insurances\n        var insuranceBool = InsurancesCalculator.Calculate(_pricingRules, command.MedicalInsuranceSelected, command.DentalInsuranceSelected,\n            command.DeathInsuranceSelected, exchangeRateEURToUSD, exchangeRateUSDToEUR, medicalInsuranceExchangeRate,\n            dentalInsuranceExchangeRate, annualSalary, out var insuranceCosts, ref total,\n            ref costOfEmployment);\n\n\n        var employerCostElements = new Dictionary<string, decimal>\n        {\n            //Statutory Costs\n            { \"Health Insurance\", healthInsurance },\n            { \"Pension Fund\", pensionFund },\n            { \"Mutual Insurance Scheme\",  mutualInsuranceScheme},\n            { \"Safety & Health at Work\", healthAndSafetyAtWork },// what is this second health insurance? is it Saftey & Health at work on the excel?\n            { \"Accident Insurance\", accidentInsurance },\n            //XML Costs\n            { \"Professional Indemnity\", (pricingRules.ProfessionalIndemnity / 100) * costOfEmployment },\n            { \"Occupational Health & Safety\", (pricingRules.OccupationalHealthAndSafety / 100) * costOfEmployment },\n            { \"Medical Leave\", (pricingRules.MedicalLeave / 100) * costOfEmployment },\n            { \"Severance Cost\", (pricingRules.SeveranceCost / 100) * costOfEmployment }\n\n        };\n        decimal hRSupportAmount = Helpers.CalculateHRSupportAmount(pricingRules, costOfEmployment);\n        decimal payrollProcessingFee = Helpers.CalculatePayrollProcessingFee(pricingRules, costOfEmployment);\n\n        employerCostElements.Add(\"HR Support\", hRSupportAmount);\n        employerCostElements.Add(\"Payroll Processing Fee\", payrollProcessingFee);\n        //Special Prices\n\n        var specialPricesPercentage = pricingRules.SpecialPricesPercentage ?? 0;\n        var specialPricesNominal = pricingRules.SpecialPricesNominal ?? 0;\n\n        var specialPricesByPercentage = specialPricesPercentage / 100 * grossSalary;\n        var specialPricesByNominal = specialPricesNominal * 12;\n\n        var specialPrices = specialPricesByPercentage + specialPricesByNominal;\n        employerCostElements.Add(\"Special Prices\", specialPrices);\n\n        //One Off Costs"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Luxembourg.cs\n// service: src\n//Insurances\n        var insuranceBool = InsurancesCalculator.Calculate(_pricingRules, command.MedicalInsuranceSelected, command.DentalInsuranceSelected,\n            command.DeathInsuranceSelected, exchangeRateEURToUSD, exchangeRateUSDToEUR, medicalInsuranceExchangeRate,\n            dentalInsuranceExchangeRate, annualSalary, out var insuranceCosts, ref total,\n            ref costOfEmployment);\n\n\n        var employerCostElements = new Dictionary<string, decimal>\n        {\n            //Statutory Costs\n            { \"Health Insurance\", healthInsurance },\n            { \"Pension Fund\", pensionFund },\n            { \"Mutual Insurance Scheme\",  mutualInsuranceScheme},\n            { \"Safety & Health at Work\", healthAndSafetyAtWork },// what is this second health insurance? is it Saftey & Health at work on the excel?\n            { \"Accident Insurance\", accidentInsurance },\n            //XML Costs\n            { \"Professional Indemnity\", (pricingRules.ProfessionalIndemnity / 100) * costOfEmployment },\n            { \"Occupational Health & Safety\", (pricingRules.OccupationalHealthAndSafety / 100) * costOfEmployment },\n            { \"Medical Leave\", (pricingRules.MedicalLeave / 100) * costOfEmployment },\n            { \"Severance Cost\", (pricingRules.SeveranceCost / 100) * costOfEmployment }\n\n        };\n        decimal hRSupportAmount = Helpers.CalculateHRSupportAmount(pricingRules, costOfEmployment);\n        decimal payrollProcessingFee = Helpers.CalculatePayrollProcessingFee(pricingRules, costOfEmployment);\n\n        employerCostElements.Add(\"HR Support\", hRSupportAmount);\n        employerCostElements.Add(\"Payroll Processing Fee\", payrollProcessingFee);\n        //Special Prices\n\n        var specialPricesPercentage = pricingRules.SpecialPricesPercentage ?? 0;\n        var specialPricesNominal = pricingRules.SpecialPricesNominal ?? 0;\n\n        var specialPricesByPercentage = specialPricesPercentage / 100 * grossSalary;\n        var specialPricesByNominal = specialPricesNominal * 12;\n\n        var specialPrices = specialPricesByPercentage + specialPricesByNominal;\n        employerCostElements.Add(\"Special Prices\", specialPrices);\n\n        //One Off Costs\n        var oneOffOnboardingPercentage = pricingRules.OneOffOnboardingFeePercentage ?? 0;\n        var oneOffOnboardingNominal = pricingRules.OneOffOnboardingFeeNominal ?? 0;\n\n        var oneOffOnboardingByPercentage = oneOffOnboardingPercentage / 100 * annualSalary;\n        var oneOffOnboardingByNominal = oneOffOnboardingNominal;\n\n        var oneOffOnboardingCost = oneOffOnboardingByPercentage + oneOffOnboardingByNominal;\n\n        var oneOffOffboardingPercentage = pricingRules.OneOffOffboardingFeePercentage ?? 0;\n        var oneOffOffboardingNominal = pricingRules.OneOffOffboardingFeeNominal ?? 0;\n\n        var oneOffOffboardingByPercentage = oneOffOffboardingPercentage / 100 * annualSalary;\n        var oneOffOffboardingByNominal = oneOffOffboardingNominal;\n\n        var oneOffOffboardingCost = oneOffOffboardingByPercentage + oneOffOffboardingByNominal;\n\n        var employerCost = employerCostElements.Values.Sum();\n\n        //AdditionalPayments\n\n        var additonalPayments = new Dictionary<string, decimal>\n        {\n            {\"One Off Onboarding\", oneOffOnboardingCost },\n            {\"One Off Offboarding\", oneOffOffboardingCost  }\n        };\n\n        IDictionary<string, decimal> allowances = new Dictionary<string, decimal>();\n        foreach (var x in command.Allowances) allowances.Add(x.Key, x.Value);\n\n        var costs = new Dictionary<string, IDictionary<string, decimal>>\n        {\n            { \"Employer Cost\", employerCostElements },\n            { \"Additional Payments\", additonalPayments },\n            { \"Gross Salary\", grossSalaryElements }\n        };\n\n        total += employerCost + grossSalary + additonalPayments.Values.Sum();\n\n        IDictionary<string, decimal> tenantSpecificCalculation = new Dictionary<string, decimal>();\n        if (calculator != null)\n        {\n            bool isRecalculatedPrice = command.Metadata.ContainsKey(\"RecalculatedPrice\");\n            var monthlyTotalCost = total/12;\n            tenantSpecificCalculation = calculator.CalculateAsync(_httpService, command.Metadata[\"tenant-id\"].ToString(), IsoCode, pricingRules, command.CorrelationId, monthlyTotalCost, isRecalculatedPrice).Result;\n            if (!costs.ContainsKey(\"Tenant Costs\")) costs.Add(\"Tenant Costs\", tenantSpecificCalculation);\n        }\n\n        //PlatformFee\n        decimal platformFeeInLocalCurrency = Helpers.CalculatePlatformFee(total, pricingRules, 1);\n        total += platformFeeInLocalCurrency;\n\n        var costsThatAffectDeposit = new List<decimal>\n        {\n            platformFeeInLocalCurrency\n        };\n        foreach (var cost in grossSalaryElements)\n            costsThatAffectDeposit.Add(cost.Value);\n        foreach (var cost in employerCostElements)\n            costsThatAffectDeposit.Add(cost.Value);\n        foreach (var cost in insuranceCosts.Where(x => insuranceBool[x.Key]))\n            costsThatAffectDeposit.Add(cost.Value);\n        foreach (var cost in tenantSpecificCalculation)\n            costsThatAffectDeposit.Add(cost.Value);\n\n        var deposit = pricingRules.DepositFactor <= 0 ? 0 : Helpers.CalculateDeposit(pricingRules, costsThatAffectDeposit.Sum());\n\n        var depositRounded = pricingRules.DepositFactor <= 0 ? 0 : Helpers.CalculateRoundedDeposit(pricingRules, costsThatAffectDeposit);\n\n        return new PriceCalculatedV6(Currency, command.ToCurrencyIsoCode, IsoCode, command.OrganisationId, total, grossSalary, employerCost,\n                              platformFeeInLocalCurrency, platformFeeInLocalCurrency, deposit, depositRounded, holidayCost, costs,\n                              command.Allowances, command.OneOffDataAmount,\n                              command.VestingDataAmount, command.VestingDataCliffMonths,\n                              command.VestingDataTotalMonths, false, false, 0,\n                              insuranceBool, new Dictionary<string, decimal>(), insuranceCosts, new Dictionary<string, decimal>(), new Dictionary<string, decimal>(),\n                              command.Metadata);\n    }\n\n    private decimal CalculateOneOffCost(CalculatePriceLuxembourg commandInEur, PriceCalculatedV2 evt, PricingRules pricingRules, decimal exchangeRateEurToUsd)\n    {   //Command with one off salary added to salary\n        var commandCopy = new CalculatePriceLuxembourg(commandInEur);\n        commandCopy.AnnualSalary += commandInEur.OneOffDataAmount;\n        var evtWithOneOffBonus = CalculateLocalCosts(commandCopy, pricingRules, exchangeRateEurToUsd);\n        return evtWithOneOffBonus.TotalCost - evt.TotalCost;\n    }\n    private decimal CalculateVestingCost(CalculatePriceLuxembourg commandInEur, PriceCalculatedV2 evt, PricingRules pricingRules, decimal exchangeRateEurToUsd)\n    {\n        //Calculate Vesting Bonus Costs\n        var commandCopy = new CalculatePriceLuxembourg(commandInEur);\n        if (commandCopy.VestingDataTotalMonths >= commandCopy.VestingDataCliffMonths)\n        {\n            decimal numberOfPayments = commandInEur.VestingDataTotalMonths / commandInEur.VestingDataCliffMonths;\n            commandCopy.AnnualSalary += (commandInEur.VestingDataAmount / numberOfPayments);\n        }\n        var evtWithVestingBonus = CalculateLocalCosts(commandCopy, pricingRules, exchangeRateEurToUsd);\n        return evtWithVestingBonus.TotalCost - evt.TotalCost;\n    }\n\n    private decimal CalculateOneOffCostV2(CalculatePriceLuxembourg commandInEur, PriceCalculatedV6 evt, PricingRules pricingRules, decimal exchangeRateEURToUSD, decimal medicalInsuranceExchangeRate, decimal dentalInsuranceExchangeRate, ICostsCalculator calculator)\n    {   //Command with one off salary added to salary\n        var commandCopy = new CalculatePriceLuxembourg(commandInEur);\n        commandCopy.AnnualSalary += commandInEur.OneOffDataAmount;\n        var evtWithOneOffBonus = CalculateLocalCostsV2(commandCopy, pricingRules, exchangeRateEURToUSD, medicalInsuranceExchangeRate, dentalInsuranceExchangeRate, calculator);\n        return evtWithOneOffBonus.TotalCost - evt.TotalCost;\n    }\n    private decimal CalculateVestingCostV2(CalculatePriceLuxembourg commandInEur, PriceCalculatedV6 evt, PricingRules pricingRules, decimal exchangeRateEURToUSD, decimal medicalInsuranceExchangeRate, decimal dentalInsuranceExchangeRate, ICostsCalculator calculator)\n    {\n        //Calculate Vesting Bonus Costs\n        var commandCopy = new CalculatePriceLuxembourg(commandInEur);\n        if (commandCopy.VestingDataTotalMonths >= commandCopy.VestingDataCliffMonths)\n        {\n            decimal numberOfPayments = commandInEur.VestingDataTotalMonths / commandInEur.VestingDataCliffMonths;\n            commandCopy.AnnualSalary += (commandInEur.VestingDataAmount / numberOfPayments);\n        }\n        var evtWithVestingBonus = CalculateLocalCostsV2(commandCopy, pricingRules, exchangeRateEURToUSD, medicalInsuranceExchangeRate, dentalInsuranceExchangeRate, calculator);\n        return evtWithVestingBonus.TotalCost - evt.TotalCost;\n    }\n    private static decimal CalculateDeposit(decimal total)\n    {\n        decimal monthlyTotal = total / 12;\n        return monthlyTotal * (_pricingRules?.DepositFactor ?? 1.5m);\n    }\n    private static decimal CalculateLifeInsurance(decimal grossSalary)\n    {\n        if (grossSalary > 100000)\n        {\n            return (grossSalary * 1.5m) / 100;\n        }\n\n        return (100000 * 1.5m) / 100;\n    }\n\n    private static decimal CalculateMedicalInsurance(decimal grossSalary)\n    {\n        if (grossSalary > 100000)\n        {\n            return (grossSalary * 1.6m) / 100;\n        }\n\n        return (100000 * 1.6m) / 100;\n    }\n\n    private static decimal CalculateDisabilityInsurance(decimal grossSalary)\n    {\n        if (grossSalary > 100000)\n        {\n            return (grossSalary * 1.7m) / 100;\n        }\n\n        return (100000 * 1.7m) / 100;\n    }\n\n    private static decimal CalculateHolidayCost(decimal grossSalary)\n    {\n        if (grossSalary > 100000)\n        {\n            return (grossSalary * 0) / 100;\n        }\n\n        return 0;\n    }\n\n    #region Getters\n    private static Task<decimal> GetExchangeRateAsync(string fromCurrency, string toCurrency, IHttpService httpService)\n    {\n        return httpService.GetAsync<decimal>($\"api/currencies/exchange-rates/{fromCurrency}/{toCurrency}\");\n    }\n\n    private static Task<PricingRules> GetPricingRules(string tenantId, string countryIsoCode, string? orgId, IHttpService httpService)\n    {\n        return httpService.GetAsync<PricingRules>($\"api/{tenantId}/reference-data/pricingrules/employee/{countryIsoCode}/organisations/{orgId ?? \"null\"}\");\n    }\n    #endregion\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Netherlands.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Domain.Commands;\nusing Remundo.Pricing.Domain.Utils;\nusing Remundo.Pricing.Domain.Models;\n\nnamespace Remundo.Pricing.Domain.Aggregates;\n\npublic class Netherlands : PricingEngineBase\n{\n    public override string AggregateId => _correlationId;\n    private string _correlationId;\n\n    private const string IsoCode = \"NL\";\n    private const string Currency = \"EUR\";\n\n    private Price _price;\n\n    public Netherlands()\n    {\n        RegisterTransition<PriceCalculatedV7>(Apply);\n\n    }\n\n    private void Apply(PriceCalculatedV7 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances, evt.ContractTerm);\n    }\n\n    public static Netherlands Create()\n    {\n        return new Netherlands();\n    }\n\n    public void CalculatePrice(CalculatePriceNetherlands command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = CreateContext(IsoCode, Currency, command.ContractTerm, _price, command.SelectedInsuranceDetails, httpService, new NetherlandsEmployerCostCalculator(), calculator);\n        CalculatePriceInternal(command, cxt);\n    }\n\n    public void RecalculatePrice(RecalculatePrice command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = CreateContext(IsoCode, Currency, command.ContractTerm, _price, command.SelectedInsuranceDetails, httpService, new NetherlandsEmployerCostCalculator(), calculator);\n        RecalculatePriceInternal(command, cxt);\n    }\n\n    public static CountryPricingContext CreateContext(\n        string isoCode,\n        string currency,\n        string? contractTerm,\n        Price price,\n        IDictionary<string, bool>? insuranceFlags,\n        IHttpService httpService,\n        IEmployerCostCalculator employerCostCalculator,\n        ICostsCalculator? calculator)\n    {\n        return new()\n        {\n            HttpService = httpService,\n            CountryIsoCode = isoCode,\n            LocalCurrency = currency,\n            ContractTerm = contractTerm ?? price.ContractTerm,\n            Price = price,\n            EmployerCostCalculator = employerCostCalculator,\n            TenantCostsCalculator = calculator,\n            SelectedInsurances = insuranceFlags ?? price?.SelectedInsurances ?? new Dictionary<string, bool>()\n        };\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Portugal.cs\n// service: src\n﻿using Evento;\nusing Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Commands;\nusing Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Domain.Utils;\nusing Remundo.Pricing.Shared.Events;\nusing System.Reflection.Metadata;\n\n\nnamespace Remundo.Pricing.Domain.Aggregates;\n\npublic class Portugal : PricingEngineBase\n{\n    public override string AggregateId => _correlationId;\n    private string _correlationId;\n\n    private const string IsoCode = \"PT\";\n    private const string Currency = \"EUR\";\n\n    private static readonly decimal _employerSocialSecurityFactor = 0.2375m;\n    private static readonly decimal _fctFactor = 0.01m;\n    private static readonly decimal _overheadFactor = 0.04m;\n    private static readonly decimal _severanceFactor = 0m;\n    private static readonly decimal _fXCostsFactor = 0m;\n    private static readonly decimal _otherBenefitsFactor = 0m;\n\n    private static readonly decimal _medicalCheckupValue = 5m;\n    private static readonly decimal _accidentInsuranceFactor = 0.0033m;\n\n    private static PricingRules _pricingRules;\n    private Price _price;\n    private static IHttpService _httpService;\n\n    public Portugal()\n    {\n        RegisterTransition<PriceCalculatedV7>(Apply);\n\n        RegisterTransition<PriceCalculatedV6>(Apply);\n        RegisterTransition<PriceCalculatedV5>(Apply);\n        RegisterTransition<PriceCalculatedV2>(Apply);\n    }\n\n    private void Apply(PriceCalculatedV7 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    #region Legacy\n\n    private void Apply(PriceCalculatedV2 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.GrossSalaryElements[\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.MedicalInsuranceSelected, evt.DentalInsuranceSelected, evt.DeathInsuranceSelected, evt.Allowances);\n    }\n\n    private void Apply(PriceCalculatedV5 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    private void Apply(PriceCalculatedV6 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    #endregion\n\n    public static Portugal Create()\n    {\n        return new Portugal();\n    }\n\n    public void RecalculatePrice(RecalculatePrice command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        _httpService = httpService;\n\n        switch (command.Metadata[\"command-type\"].Split(\"-\")[0])\n        {\n            case \"RecalculatePrice\":\n                RecalculatePriceV1(command, httpService);\n                break;\n            case \"RecalculatePriceV2\":\n                RecalculatePriceV2(command, httpService, calculator);\n                break;\n            default:\n                throw new ArgumentException(\"Unknown command type\", command.Metadata[\"command-type\"]);\n        }\n    }\n\n    public void RecalculatePriceV1(RecalculatePrice command, IHttpService httpService)\n    {\n        Ensure.NotNull(command, nameof(command));\n        Ensure.NotNullOrWhiteSpace(command.PriceId, nameof(command.PriceId));\n        Ensure.NotNull(command.Metadata, nameof(command.Metadata));\n        Ensure.NotNull(httpService, nameof(httpService));\n\n        var toCurrencyIsoCode = command.ToCurrencyIsoCode ?? Currency;\n        var organisationId = command.OrganisationId ?? _price.OrganisationId;\n        command.ToCurrencyIsoCode = toCurrencyIsoCode;\n\n        var pricingRules = GetPricingRules(command.Metadata[\"tenant-id\"].ToString(), IsoCode, organisationId, httpService);\n        var convertExchangeRate = GetExchangeRateAsync(toCurrencyIsoCode, Currency, httpService);\n        var exchangeRateEURToUSD = GetExchangeRateAsync(Currency, \"USD\", httpService);\n        var exchangeRateForEvent = GetExchangeRateAsync(Currency, command.ToCurrencyIsoCode    , httpService);\n\n        Task.WhenAll(pricingRules, convertExchangeRate, exchangeRateEURToUSD, exchangeRateForEvent).Wait();\n        _pricingRules = pricingRules.Result;\n        var annualSalary = command.AnnualSalary ?? _price.AnnualSalary;\n        var allowances = command.Allowances ?? _price.Allowances;\n        var signingBonusAmount = command.OneOffDataAmount ?? _price.OneOffDataAmount;\n        var vestingBonusAmount = command.VestingDataAmount ?? _price.VestingDataAmount;\n        var vestingBonusCliffMonths = command.VestingDataCliffMonths ?? _price.VestingDataCliffMonths;\n        var vestingBonusTotalMonths = command.VestingDataTotalMonths ?? _price.VestingDataTotalMonths;\n        var medicalInsuranceSelected = command.MedicalInsurance ?? _price.MedicalInsuranceSelected;\n        var dentalInsuranceSelected = command.DentalInsuranceSelected ?? _price.DentalInsuranceSelected;\n        var deathInsuranceSelected = command.DeathInsuranceSelected ?? _price.DeathInsuranceSelected;\n\n        CalculatePricePortugal commandInEur = Convert(new CalculatePricePortugal\n        {\n            CorrelationId = command.PriceId,\n            AnnualSalary = annualSalary,\n            ToCurrencyIsoCode = toCurrencyIsoCode,\n\n            MedicalInsuranceSelected = medicalInsuranceSelected ?? false,\n            DentalInsuranceSelected = dentalInsuranceSelected ?? false,\n            DeathInsuranceSelected = deathInsuranceSelected ?? false,\n            Allowances = allowances,\n            OneOffDataAmount = signingBonusAmount,\n            VestingDataAmount = vestingBonusAmount,\n            VestingDataCliffMonths = vestingBonusCliffMonths,\n            VestingDataTotalMonths = vestingBonusTotalMonths,\n            Metadata = command.Metadata\n        }, convertExchangeRate.Result);\n\n        var evt = CalculateLocalCosts(commandInEur, pricingRules.Result, exchangeRateEURToUSD.Result);\n        var signingBonusCost = signingBonusAmount == 0 ? 0 : CalculateSigningBonusCost(commandInEur, evt, pricingRules.Result, exchangeRateEURToUSD.Result);\n        var vestingCost = vestingBonusAmount == 0 ? 0 : CalculateVestingCost(commandInEur, evt, pricingRules.Result, exchangeRateEURToUSD.Result);\n        var additionalPaymentsTotal = signingBonusCost + vestingCost;\n\n\n        var @event = new PriceCalculatedV2(Currency, evt.ConvertedCurrency, evt.IsoCode, evt.TotalCost, evt.GrossSalary, evt.EmployerCost,\n            evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit,\n            evt.AdditionalHolidayCost, evt.EmployerCostElements, evt.GrossSalaryElements, evt.Allowances, additionalPaymentsTotal,\n            signingBonusCost, evt.SigningBonusAmount, vestingCost, evt.VestingBonusAmount, evt.VestingBonusCliffMonths,\n            evt.VestingBonusTotalMonths, evt.MedicalInsuranceSelected, evt.DentalInsuranceSelected, evt.DeathInsuranceSelected,\n            evt.MedicalInsuranceCost, evt.DentalInsuranceCost, evt.DeathInsuranceCost, evt.Metadata);\n\n        var evtInDesiredCurrency = ConvertPriceEventToChosenCurrency(@event, exchangeRateForEvent.Result);\n\n        RaiseEvent(evtInDesiredCurrency);\n    }\n\n    public void CalculatePrice(CalculatePricePortugal command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        Ensure.NotNull(command, nameof(command));\n        Ensure.NotNull(command.Metadata, nameof(command.Metadata));\n        Ensure.Nonnegative(command.AnnualSalary, nameof(command.AnnualSalary));\n\n        _httpService = httpService;\n\n        switch (command.Metadata[\"command-type\"])\n        {\n            case \"CalculatePrice\":\n                CalculatePriceV1(command, httpService);\n                break;\n            case \"CalculatePriceV2\":\n                CalculatePriceV2(command, httpService, calculator);\n                break;\n            default:\n                throw new ArgumentException(\"Unknown command type\", command.Metadata[\"command-type\"]);\n        }\n    }\n\n    public void CalculatePriceV1(CalculatePricePortugal command, IHttpService httpService)\n    {\n        // validation\n        Ensure.NotNull(command, nameof(command));\n        Ensure.NotNull(command.Metadata, nameof(command.Metadata));\n        Ensure.Nonnegative(command.AnnualSalary, nameof(command.AnnualSalary));\n        Ensure.NotNull(httpService, nameof(httpService));\n\n        var toCurrencyIsoCode = command.ToCurrencyIsoCode ?? Currency;\n        var organisationId = command.OrganisationId;\n        command.ToCurrencyIsoCode = toCurrencyIsoCode;\n\n        var pricingRules = GetPricingRules(command.Metadata[\"tenant-id\"].ToString(), IsoCode, organisationId, httpService);\n        var convertExchangeRate = GetExchangeRateAsync(toCurrencyIsoCode, Currency, httpService);\n        var exchangeRateEURToUSD = GetExchangeRateAsync(Currency, \"USD\", httpService);\n        var exchangeRateForEvent = GetExchangeRateAsync(Currency, command.ToCurrencyIsoCode, httpService);\n\n        Task.WhenAll(pricingRules, convertExchangeRate, exchangeRateEURToUSD, exchangeRateForEvent).Wait();\n        _pricingRules = pricingRules.Result;\n        // calculation\n        // convert from currency if required\n        var commandInEUR = Convert(command, convertExchangeRate.Result);\n        var evt = CalculateLocalCosts(commandInEUR, pricingRules.Result, exchangeRateEURToUSD.Result);\n\n        RaiseEvent(ConvertPriceEventToChosenCurrency(evt, exchangeRateForEvent.Result));\n    }\n\n    public void CalculatePriceV2(CalculatePricePortugal command, IHttpService httpService, ICostsCalculator calculator)"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Portugal.cs\n// service: src\n{\n            case \"CalculatePrice\":\n                CalculatePriceV1(command, httpService);\n                break;\n            case \"CalculatePriceV2\":\n                CalculatePriceV2(command, httpService, calculator);\n                break;\n            default:\n                throw new ArgumentException(\"Unknown command type\", command.Metadata[\"command-type\"]);\n        }\n    }\n\n    public void CalculatePriceV1(CalculatePricePortugal command, IHttpService httpService)\n    {\n        // validation\n        Ensure.NotNull(command, nameof(command));\n        Ensure.NotNull(command.Metadata, nameof(command.Metadata));\n        Ensure.Nonnegative(command.AnnualSalary, nameof(command.AnnualSalary));\n        Ensure.NotNull(httpService, nameof(httpService));\n\n        var toCurrencyIsoCode = command.ToCurrencyIsoCode ?? Currency;\n        var organisationId = command.OrganisationId;\n        command.ToCurrencyIsoCode = toCurrencyIsoCode;\n\n        var pricingRules = GetPricingRules(command.Metadata[\"tenant-id\"].ToString(), IsoCode, organisationId, httpService);\n        var convertExchangeRate = GetExchangeRateAsync(toCurrencyIsoCode, Currency, httpService);\n        var exchangeRateEURToUSD = GetExchangeRateAsync(Currency, \"USD\", httpService);\n        var exchangeRateForEvent = GetExchangeRateAsync(Currency, command.ToCurrencyIsoCode, httpService);\n\n        Task.WhenAll(pricingRules, convertExchangeRate, exchangeRateEURToUSD, exchangeRateForEvent).Wait();\n        _pricingRules = pricingRules.Result;\n        // calculation\n        // convert from currency if required\n        var commandInEUR = Convert(command, convertExchangeRate.Result);\n        var evt = CalculateLocalCosts(commandInEUR, pricingRules.Result, exchangeRateEURToUSD.Result);\n\n        RaiseEvent(ConvertPriceEventToChosenCurrency(evt, exchangeRateForEvent.Result));\n    }\n\n    public void CalculatePriceV2(CalculatePricePortugal command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new PortugalEmployerCostCalculator(), calculator);\n        CalculatePriceInternal(command, cxt);\n    }\n\n    public void RecalculatePriceV2(RecalculatePrice command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new PortugalEmployerCostCalculator(), calculator);\n        RecalculatePriceInternal(command, cxt);\n    }\n\n    private decimal CalculateMonthlyTotalCostOfEmployment(decimal monthlyTotalBasicPay)\n    {\n        decimal employerSocialSecurity = CalculateEmployerSocialSecurity(monthlyTotalBasicPay);\n        decimal fct = CalculateFCT(monthlyTotalBasicPay);\n        decimal totalEmployerCost = CalculateTotalEmployerCost(employerSocialSecurity, fct);\n        decimal directCostOfEmployment = CalculateDirectCostOfEmployment(monthlyTotalBasicPay, totalEmployerCost);\n        decimal overHead = CalculateOverhead(directCostOfEmployment);\n        decimal severance = CalculateSeverance(directCostOfEmployment);\n        decimal fXCosts = CalculateFXCosts(directCostOfEmployment);\n        decimal otherBenefits = CalculateOtherBenefits(directCostOfEmployment);\n        decimal totalAccruals = CalculateTotalAccruals(severance, overHead, fXCosts, otherBenefits);\n        decimal monthlyTotalCostOfEmployment = CalculateTotalCostOfEmployment(directCostOfEmployment, totalAccruals);\n        return monthlyTotalCostOfEmployment;\n    }\n\n    private decimal CalculateTotalCostOfEmployment(decimal directCostOfEmployment, decimal totalAccruals)\n    {\n        decimal totalCostOfEmployment = directCostOfEmployment + totalAccruals;\n        return totalCostOfEmployment;\n    }\n\n    private decimal CalculateTotalAccruals(decimal severance, decimal overhead, decimal fXCosts, decimal otherBenefits)\n    {\n        decimal totalAccruals = severance + overhead + fXCosts + otherBenefits;\n        return totalAccruals;\n    }\n\n    private decimal CalculateOtherBenefits(decimal directCostOfEmployment)\n    {\n        decimal otherBenefits = directCostOfEmployment * _otherBenefitsFactor;\n        return otherBenefits;\n    }\n\n    private decimal CalculateFXCosts(decimal directCostOfEmployment)\n    {\n        decimal fXCosts = directCostOfEmployment * _fXCostsFactor;\n        return fXCosts;\n    }\n\n    private decimal CalculateSeverance(decimal directCostOfEmployment)\n    {\n        decimal severance = directCostOfEmployment * _severanceFactor;\n        return severance;\n    }\n    private decimal CalculateOverhead(decimal directCostOfEmployment)\n    {\n        decimal overhead = directCostOfEmployment * _overheadFactor;\n        return overhead;\n    }\n\n    private decimal CalculateDirectCostOfEmployment(decimal totalBasicPay, decimal totalEmployerCost)\n    {\n        decimal directCostOfEmployment = totalBasicPay + totalEmployerCost;\n        return directCostOfEmployment;\n    }\n\n    private decimal CalculateTotalEmployerCost(decimal employerSocialSecurity, decimal professionalContigency)\n    {\n        decimal totalEmployerCost = employerSocialSecurity + professionalContigency;\n        return totalEmployerCost;\n    }\n\n    private decimal CalculateFCT(decimal totalBasicPay)\n    {\n        decimal professionalContigency = totalBasicPay * _fctFactor;\n        return professionalContigency;\n    }\n\n    private decimal CalculateAccidentInsurance(decimal totalbasicPay, decimal taxableDiscretionary = 0m)\n    {\n        decimal value = _accidentInsuranceFactor * (totalbasicPay + taxableDiscretionary);\n        return value; \n    }\n\n    private decimal CalculateEmployerSocialSecurity(decimal totalbasicPay)\n    {\n        decimal employerSocialSecurity = totalbasicPay * _employerSocialSecurityFactor;\n        return employerSocialSecurity;\n    }\n    private IDictionary<string, decimal> Convert(IDictionary<string, decimal> dict, decimal exchangeRate)\n    {\n        IDictionary<string, decimal> newDict = new Dictionary<string, decimal>();\n        foreach (var x in dict) newDict.Add(x.Key, x.Value * exchangeRate);\n        return newDict;\n    }\n\n    private IDictionary<string, IDictionary<string, decimal>> Convert(IDictionary<string, IDictionary<string, decimal>> dict, decimal exchangeRate)\n    {\n        IDictionary<string, IDictionary<string, decimal>> newDict = new Dictionary<string, IDictionary<string, decimal>>();\n        foreach (var x in dict)\n        {\n            newDict[x.Key] = new Dictionary<string, decimal>();\n            foreach (var y in x.Value)\n                newDict[x.Key].Add(y.Key, y.Value * exchangeRate);\n        }\n        return newDict;\n    }\n\n    private PriceCalculatedV2 ConvertPriceEventToChosenCurrency(PriceCalculatedV2 priceCalculatedV2, decimal exchangeRate)\n    {\n        var totalCost = priceCalculatedV2.TotalCost * exchangeRate;\n        var grossSalary = priceCalculatedV2.GrossSalary * exchangeRate;\n        var employerCost = priceCalculatedV2.EmployerCost * exchangeRate;\n        var deposit = priceCalculatedV2.Deposit * exchangeRate;\n        var platformFee = priceCalculatedV2.PlatformFeeInLocalCurrency * exchangeRate;\n        var additionalHolidayCost = priceCalculatedV2.AdditionalHolidayCost * exchangeRate;\n        var employerCostElements = Convert(priceCalculatedV2.EmployerCostElements, exchangeRate);\n\n        var grossSalaryElements = Convert(priceCalculatedV2.GrossSalaryElements, exchangeRate);\n        var allowances = Convert(priceCalculatedV2.Allowances, exchangeRate);\n\n        var signingBonusIncludingCosts = priceCalculatedV2.SigningBonusCosts * exchangeRate;\n        var oneOffBonusAmount = priceCalculatedV2.SigningBonusAmount * exchangeRate;\n        var vestingBonusAmount = priceCalculatedV2.VestingBonusAmount * exchangeRate;\n        var additionalPaymentsTotal = priceCalculatedV2.AdditionalPaymentsTotal * exchangeRate;\n        var vestingBonusCosts = priceCalculatedV2.VestingBonusCosts * exchangeRate;\n\n        var dentalInsuranceCost = priceCalculatedV2.DentalInsuranceCost * exchangeRate;\n        var medicalInsuranceNewCost = priceCalculatedV2.MedicalInsuranceCost * exchangeRate;\n        var deathInsuranceCost = priceCalculatedV2.DeathInsuranceCost * exchangeRate;\n\n        return new PriceCalculatedV2(Currency, priceCalculatedV2.ConvertedCurrency, IsoCode,\n            totalCost, grossSalary, employerCost, platformFee, platformFee, deposit, additionalHolidayCost, employerCostElements,\n            grossSalaryElements, allowances, additionalPaymentsTotal, signingBonusIncludingCosts, oneOffBonusAmount, vestingBonusCosts,\n            vestingBonusAmount, priceCalculatedV2.VestingBonusCliffMonths,\n            priceCalculatedV2.VestingBonusTotalMonths,\n            priceCalculatedV2.MedicalInsuranceSelected, priceCalculatedV2.DentalInsuranceSelected, priceCalculatedV2.DeathInsuranceSelected,\n            medicalInsuranceNewCost, dentalInsuranceCost, deathInsuranceCost, priceCalculatedV2.Metadata);\n    }\n\n    private CalculatePricePortugal Convert(CalculatePricePortugal command, decimal exchangeRate)\n    {\n        var annualSalary = command.AnnualSalary * exchangeRate;\n        var vestingBonus = command.VestingDataAmount * exchangeRate;\n        var signingBonus = command.OneOffDataAmount * exchangeRate;\n        var allowances = new Dictionary<string, decimal>();\n\n        if (command.Allowances != null)\n        {\n            foreach (var (key, value) in command.Allowances)\n            {\n                allowances.Add(key, value * exchangeRate);\n            }\n        }\n\n        return new CalculatePricePortugal\n        {\n            CorrelationId = command.CorrelationId,\n            AnnualSalary = annualSalary,\n            OrganisationId = command.OrganisationId,\n            ToCurrencyIsoCode = command.ToCurrencyIsoCode,\n            MedicalInsuranceSelected = command.MedicalInsuranceSelected,\n            DentalInsuranceSelected = command.DentalInsuranceSelected,\n            DeathInsuranceSelected = command.DeathInsuranceSelected,\n            Allowances = allowances,\n            OneOffDataAmount = signingBonus,\n            VestingDataAmount = vestingBonus,\n            VestingDataCliffMonths = command.VestingDataCliffMonths,\n            VestingDataTotalMonths = command.VestingDataTotalMonths,\n            Metadata = command.Metadata\n        };\n    }\n    private PriceCalculatedV2 CalculateLocalCosts(CalculatePricePortugal command, PricingRules pricingRules, decimal exchangeRateEurToUSD)\n    {\n\n        Ensure.NotNull(command, nameof(command));\n        Ensure.NotNull(command.Metadata, nameof(command.Metadata));\n        Ensure.Nonnegative(command.AnnualSalary, nameof(command.AnnualSalary));"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Portugal.cs\n// service: src\nprivate CalculatePricePortugal Convert(CalculatePricePortugal command, decimal exchangeRate)\n    {\n        var annualSalary = command.AnnualSalary * exchangeRate;\n        var vestingBonus = command.VestingDataAmount * exchangeRate;\n        var signingBonus = command.OneOffDataAmount * exchangeRate;\n        var allowances = new Dictionary<string, decimal>();\n\n        if (command.Allowances != null)\n        {\n            foreach (var (key, value) in command.Allowances)\n            {\n                allowances.Add(key, value * exchangeRate);\n            }\n        }\n\n        return new CalculatePricePortugal\n        {\n            CorrelationId = command.CorrelationId,\n            AnnualSalary = annualSalary,\n            OrganisationId = command.OrganisationId,\n            ToCurrencyIsoCode = command.ToCurrencyIsoCode,\n            MedicalInsuranceSelected = command.MedicalInsuranceSelected,\n            DentalInsuranceSelected = command.DentalInsuranceSelected,\n            DeathInsuranceSelected = command.DeathInsuranceSelected,\n            Allowances = allowances,\n            OneOffDataAmount = signingBonus,\n            VestingDataAmount = vestingBonus,\n            VestingDataCliffMonths = command.VestingDataCliffMonths,\n            VestingDataTotalMonths = command.VestingDataTotalMonths,\n            Metadata = command.Metadata\n        };\n    }\n    private PriceCalculatedV2 CalculateLocalCosts(CalculatePricePortugal command, PricingRules pricingRules, decimal exchangeRateEurToUSD)\n    {\n\n        Ensure.NotNull(command, nameof(command));\n        Ensure.NotNull(command.Metadata, nameof(command.Metadata));\n        Ensure.Nonnegative(command.AnnualSalary, nameof(command.AnnualSalary));\n\n        var exchangeRateUSDToEUR = 1 / exchangeRateEurToUSD;\n\n        //Converting annual salary and deposit\n        decimal annualSalary = command.AnnualSalary;\n\n        //Allowances\n        decimal totalAllowances = command.Allowances.Values.ToList().Sum() * 12;\n\n        //Total elements\n        IDictionary<string, decimal> grossSalaryElements = new Dictionary<string, decimal>() { };\n        grossSalaryElements.Add(\"Base Salary\", annualSalary);\n\n        // Add allowance total to gross salary\n        annualSalary += totalAllowances;\n\n        decimal monthlySalary = annualSalary / 12;\n        decimal employmentCost_monthly = CalculateMonthlyTotalCostOfEmployment(monthlySalary);\n        decimal employmentCost_annual = employmentCost_monthly * 12;\n        \n        //Employer Cost Elements\n        IDictionary<string, decimal> employerCostElements = new Dictionary<string, decimal>() { };\n        decimal holidayCost = CalculateHolidayCost(annualSalary);\n\n        //decimal individualAllowances = commandInEur.Allowances.Values.ToList().Sum();\n        //if (totalAllowances > 0) foreach (var x in commandInEur.Allowances) grossSalaryElements.Add(x.Key, x.Value);\n\n        if (totalAllowances > 0) grossSalaryElements.Add(\"Allowances\", totalAllowances);\n\n        employerCostElements.Add(\"Employer Social Security\", CalculateEmployerSocialSecurity(monthlySalary) * 12);\n        employerCostElements.Add(\"FCT\", CalculateFCT(monthlySalary) * 12);\n\n        decimal employerCost = employerCostElements.Values.ToList().Sum();\n\n        var grossSalary = grossSalaryElements.Values.Sum();\n\n        //adding overhead costs to employment costs\n        decimal employerSocialSecurity = CalculateEmployerSocialSecurity(monthlySalary) * 12;\n        decimal fct = CalculateFCT(monthlySalary) * 12;\n        decimal employerCostBeforeOverhead = employerSocialSecurity + fct;\n        decimal directCostOfEmployment = CalculateDirectCostOfEmployment(annualSalary, employerCostBeforeOverhead);\n        decimal overhead = CalculateOverhead(directCostOfEmployment);\n        employerCostElements.Add(\"EHS/OSHA\", overhead);\n\n        IDictionary<string, decimal> allowances = new Dictionary<string, decimal>();\n        foreach (var x in command.Allowances) allowances.Add(x.Key, x.Value);\n\n        decimal total = employmentCost_annual;\n\n        //PlatformFee\n        decimal platformFeeInLocalCurrency = Helpers.CalculatePlatformFee(total, pricingRules, 1);\n        total+= platformFeeInLocalCurrency;\n        employerCost += overhead;\n\n        // Insurances\n        var deathInsuranceCost = Helpers.CalculateLifeAndAccidentsInsurance(annualSalary * exchangeRateEurToUSD) * exchangeRateUSDToEUR;\n        var medicalInsuranceCost = Helpers.CalculateMedicalInsurance(\"Portugal\");\n        var dentalInsuranceCost = Helpers.CalculateDentalAndOpticalInsurance(\"Portugal\");\n\n        if (command.MedicalInsuranceSelected) total += medicalInsuranceCost;\n        if (command.DentalInsuranceSelected) total += dentalInsuranceCost;\n        if (command.DeathInsuranceSelected) total += deathInsuranceCost;\n\n        decimal deposit;\n        deposit = pricingRules.DepositFactor <= 0 ? 0 : CalculateDeposit(total);\n\n        return new PriceCalculatedV2(Currency, command.ToCurrencyIsoCode, IsoCode, total, grossSalary, employerCost,\n                              platformFeeInLocalCurrency, platformFeeInLocalCurrency, deposit, holidayCost, employerCostElements, grossSalaryElements,\n                              command.Allowances, 0, 0, command.OneOffDataAmount, 0,\n                              command.VestingDataAmount, command.VestingDataCliffMonths,\n                              command.VestingDataTotalMonths,\n                              command.MedicalInsuranceSelected, command.DentalInsuranceSelected, command.DeathInsuranceSelected,\n                              Helpers.CalculateMedicalInsurance(\"Portugal\"), \n                              Helpers.CalculateDentalAndOpticalInsurance(\"Portugal\"), \n                              Helpers.CalculateLifeAndAccidentsInsurance(annualSalary * exchangeRateEurToUSD) * \n                              exchangeRateUSDToEUR,\n                              command.Metadata);\n    }\n\n    private PriceCalculatedV6 CalculateLocalCostsV2(CalculatePricePortugal command, PricingRules pricingRules, decimal exchangeRateEurToUSD, decimal medicalInsuranceExchangeRate, decimal dentalInsuranceExchangeRate, ICostsCalculator calculator)\n    {\n\n        Ensure.NotNull(command, nameof(command));\n        Ensure.NotNull(command.Metadata, nameof(command.Metadata));\n        Ensure.Nonnegative(command.AnnualSalary, nameof(command.AnnualSalary));\n\n        var exchangeRateUSDToEUR = 1 / exchangeRateEurToUSD;\n\n        //Converting annual salary and deposit\n        decimal annualSalary = command.AnnualSalary;\n\n        //Allowances\n        decimal totalAllowances = command.Allowances.Values.ToList().Sum() * 12;\n\n        //Total elements\n        IDictionary<string, decimal> grossSalaryElements = new Dictionary<string, decimal>\n        {\n            { \"Base Salary\", annualSalary }\n        };\n\n        // Add allowance total to gross salary\n        annualSalary += totalAllowances;\n\n        decimal monthlySalary = annualSalary / 12;\n        decimal employmentCost_monthly = CalculateMonthlyTotalCostOfEmployment(monthlySalary);\n        decimal employmentCost_annual = employmentCost_monthly * 12;\n\n        //Employer Cost Elements\n        decimal holidayCost = CalculateHolidayCost(annualSalary);\n\n        if (totalAllowances > 0) grossSalaryElements.Add(\"Allowances\", totalAllowances);\n\n        var accidentInsurance = CalculateAccidentInsurance(monthlySalary) * 12; \n        var socialSecurity = CalculateEmployerSocialSecurity(monthlySalary) * 12;\n        var fct = CalculateFCT(monthlySalary) * 12;\n        var medicalCheckup = _medicalCheckupValue * 12; \n\n        decimal directCostOfEmployment = Sum(fct, accidentInsurance, socialSecurity, medicalCheckup, annualSalary);\n        decimal total = 0;\n\n        //Insurances\n        var insuranceBool = InsurancesCalculator.Calculate(_pricingRules, command.MedicalInsuranceSelected, command.DentalInsuranceSelected,\n            command.DeathInsuranceSelected, exchangeRateEurToUSD, exchangeRateUSDToEUR, medicalInsuranceExchangeRate,\n            dentalInsuranceExchangeRate, annualSalary, out var insuranceCosts, ref total,\n            ref directCostOfEmployment);\n\n        var employerCostElements = new Dictionary<string, decimal>\n        {\n            // Statutory Costs\n            { \"Employer Social Security\", socialSecurity },\n            { \"FCT\", fct },\n            { \"Medical Check-up\", medicalCheckup },\n            { \"Accident Insurance\",  accidentInsurance },\n\n            // Non-Statutory Costs\n            { \"Professional Indemnity\", (pricingRules.ProfessionalIndemnity / 100) * directCostOfEmployment },\n            { \"Occupational Health & Safety\", (pricingRules.OccupationalHealthAndSafety / 100) * directCostOfEmployment },\n            { \"Medical Leave\", (pricingRules.MedicalLeave / 100) * directCostOfEmployment },\n            { \"Severance Cost\", (pricingRules.SeveranceCost / 100) * directCostOfEmployment },\n        };\n        decimal hRSupportAmount = Helpers.CalculateHRSupportAmount(pricingRules, directCostOfEmployment);\n        decimal payrollProcessingFee = Helpers.CalculatePayrollProcessingFee(pricingRules, directCostOfEmployment);\n\n        employerCostElements.Add(\"HR Support\", hRSupportAmount);\n        employerCostElements.Add(\"Payroll Processing Fee\", payrollProcessingFee);\n\n        var grossSalary = grossSalaryElements.Values.Sum();\n\n        //Special Prices\n\n        var specialPricesPercentage = pricingRules.SpecialPricesPercentage ?? 0;\n        var specialPricesNominal = pricingRules.SpecialPricesNominal ?? 0;\n\n        var specialPricesByPercentage = specialPricesPercentage / 100 * grossSalary;\n        var specialPricesByNominal = specialPricesNominal * 12;\n\n        var specialPrices = specialPricesByPercentage + specialPricesByNominal;\n        employerCostElements.Add(\"Special Prices\", specialPrices);\n\n        //One Off Costs\n        var oneOffOnboardingPercentage = pricingRules.OneOffOnboardingFeePercentage ?? 0;\n        var oneOffOnboardingNominal = pricingRules.OneOffOnboardingFeeNominal ?? 0;\n\n        var oneOffOnboardingByPercentage = oneOffOnboardingPercentage / 100 * annualSalary;\n        var oneOffOnboardingByNominal = oneOffOnboardingNominal;\n\n        var oneOffOnboardingCost = oneOffOnboardingByPercentage + oneOffOnboardingByNominal;\n\n        var oneOffOffboardingPercentage = pricingRules.OneOffOffboardingFeePercentage ?? 0;\n        var oneOffOffboardingNominal = pricingRules.OneOffOffboardingFeeNominal ?? 0;\n\n        var oneOffOffboardingByPercentage = oneOffOffboardingPercentage / 100 * annualSalary;\n        var oneOffOffboardingByNominal = oneOffOffboardingNominal;\n\n        var oneOffOffboardingCost = oneOffOffboardingByPercentage + oneOffOffboardingByNominal;\n\n        var employerCost = employerCostElements.Values.Sum();\n\n        //AdditionalPayments\n\n        var additonalPayments = new Dictionary<string, decimal>"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Portugal.cs\n// service: src\ndecimal payrollProcessingFee = Helpers.CalculatePayrollProcessingFee(pricingRules, directCostOfEmployment);\n\n        employerCostElements.Add(\"HR Support\", hRSupportAmount);\n        employerCostElements.Add(\"Payroll Processing Fee\", payrollProcessingFee);\n\n        var grossSalary = grossSalaryElements.Values.Sum();\n\n        //Special Prices\n\n        var specialPricesPercentage = pricingRules.SpecialPricesPercentage ?? 0;\n        var specialPricesNominal = pricingRules.SpecialPricesNominal ?? 0;\n\n        var specialPricesByPercentage = specialPricesPercentage / 100 * grossSalary;\n        var specialPricesByNominal = specialPricesNominal * 12;\n\n        var specialPrices = specialPricesByPercentage + specialPricesByNominal;\n        employerCostElements.Add(\"Special Prices\", specialPrices);\n\n        //One Off Costs\n        var oneOffOnboardingPercentage = pricingRules.OneOffOnboardingFeePercentage ?? 0;\n        var oneOffOnboardingNominal = pricingRules.OneOffOnboardingFeeNominal ?? 0;\n\n        var oneOffOnboardingByPercentage = oneOffOnboardingPercentage / 100 * annualSalary;\n        var oneOffOnboardingByNominal = oneOffOnboardingNominal;\n\n        var oneOffOnboardingCost = oneOffOnboardingByPercentage + oneOffOnboardingByNominal;\n\n        var oneOffOffboardingPercentage = pricingRules.OneOffOffboardingFeePercentage ?? 0;\n        var oneOffOffboardingNominal = pricingRules.OneOffOffboardingFeeNominal ?? 0;\n\n        var oneOffOffboardingByPercentage = oneOffOffboardingPercentage / 100 * annualSalary;\n        var oneOffOffboardingByNominal = oneOffOffboardingNominal;\n\n        var oneOffOffboardingCost = oneOffOffboardingByPercentage + oneOffOffboardingByNominal;\n\n        var employerCost = employerCostElements.Values.Sum();\n\n        //AdditionalPayments\n\n        var additonalPayments = new Dictionary<string, decimal>\n        {\n            {\"One Off Onboarding\", oneOffOnboardingCost },\n            {\"One Off Offboarding\", oneOffOffboardingCost  }\n        };\n\n        total += employerCost + grossSalary;\n\n        //PlatformFee\n        decimal platformFeeInLocalCurrency = Helpers.CalculatePlatformFee(total, pricingRules, 1);\n\n        var costs = new Dictionary<string, IDictionary<string, decimal>>\n        {\n            { \"Employer Cost\", employerCostElements },\n            { \"Additional Payments\", additonalPayments },\n            { \"Gross Salary\", grossSalaryElements }\n        };\n\n        IDictionary<string, decimal> tenantSpecificCalculation = new Dictionary<string, decimal>();\n        if (calculator != null)\n        {\n            bool isRecalculatedPrice = command.Metadata.ContainsKey(\"RecalculatedPrice\");\n            var monthlyTotalCost = total / 12;\n            tenantSpecificCalculation = calculator.CalculateAsync(_httpService, command.Metadata[\"tenant-id\"].ToString(), IsoCode, pricingRules, command.CorrelationId, monthlyTotalCost, isRecalculatedPrice).Result;\n            if (!costs.ContainsKey(\"Tenant Costs\")) costs.Add(\"Tenant Costs\", tenantSpecificCalculation);\n        }\n\n        var costsThatAffectDeposit = new List<decimal>\n        {\n            platformFeeInLocalCurrency\n        };\n        foreach (var cost in grossSalaryElements)\n            costsThatAffectDeposit.Add(cost.Value);\n        foreach (var cost in employerCostElements)\n            costsThatAffectDeposit.Add(cost.Value);\n        foreach (var cost in insuranceCosts.Where(x => insuranceBool[x.Key]))\n            costsThatAffectDeposit.Add(cost.Value);\n        foreach (var cost in tenantSpecificCalculation)\n            costsThatAffectDeposit.Add(cost.Value);\n\n        var deposit = pricingRules.DepositFactor <= 0 ? 0 : Helpers.CalculateDeposit(pricingRules, costsThatAffectDeposit.Sum());\n\n        var depositRounded = pricingRules.DepositFactor <= 0 ? 0 : Helpers.CalculateRoundedDeposit(pricingRules, costsThatAffectDeposit);\n\n        return new PriceCalculatedV6(Currency, command.ToCurrencyIsoCode, IsoCode, command.OrganisationId, total, grossSalary, employerCost,\n                              platformFeeInLocalCurrency, platformFeeInLocalCurrency, deposit, depositRounded, holidayCost, costs,\n                              command.Allowances, command.OneOffDataAmount,\n                              command.VestingDataAmount, command.VestingDataCliffMonths,\n                              command.VestingDataTotalMonths,\n                              false, false, 0, insuranceBool, new Dictionary<string, decimal>(), insuranceCosts, new Dictionary<string, decimal>(), new Dictionary<string, decimal>(), \n                              command.Metadata);\n    }\n\n    private decimal CalculateSigningBonusCost(CalculatePricePortugal commandInEur, PriceCalculatedV2 evt, PricingRules pricingRules, decimal exchangeRate)\n    {   //Command with one off salary added to salary\n        var commandCopy = new CalculatePricePortugal(commandInEur);\n        commandCopy.AnnualSalary += commandInEur.OneOffDataAmount;\n        var evtWithSigningBonus = CalculateLocalCosts(commandCopy, pricingRules, exchangeRate);\n        return evtWithSigningBonus.TotalCost - evt.TotalCost;\n    }\n    private decimal CalculateVestingCost(CalculatePricePortugal commandInEur, PriceCalculatedV2 evt, PricingRules pricingRules, decimal exchangeRate)\n    {\n        //Calculate Vesting Bonus Costs\n        var commandCopy = new CalculatePricePortugal(commandInEur);\n        if (commandCopy.VestingDataTotalMonths >= commandCopy.VestingDataCliffMonths)\n        {\n            int numberOfPayments = (int)Math.Ceiling(commandInEur.VestingDataTotalMonths / commandInEur.VestingDataCliffMonths);\n            commandCopy.AnnualSalary += (commandInEur.VestingDataAmount / numberOfPayments);\n        }\n        var evtWithVestingBonus = CalculateLocalCosts(commandCopy, pricingRules, exchangeRate);\n        return evtWithVestingBonus.TotalCost - evt.TotalCost;\n    }\n    private decimal CalculateSigningBonusCostV2(CalculatePricePortugal commandInEur, PriceCalculatedV6 evt, PricingRules pricingRules, decimal exchangeRate, decimal medicalInsuranceExchangeRate, decimal dentalInsuranceExchangeRate, ICostsCalculator calculator)\n    {   //Command with one off salary added to salary\n        var commandCopy = new CalculatePricePortugal(commandInEur);\n        commandCopy.AnnualSalary += commandInEur.OneOffDataAmount;\n        var evtWithSigningBonus = CalculateLocalCostsV2(commandCopy, pricingRules, exchangeRate, medicalInsuranceExchangeRate, dentalInsuranceExchangeRate, calculator);\n        return evtWithSigningBonus.TotalCost - evt.TotalCost;\n    }\n    private decimal CalculateVestingCostV2(CalculatePricePortugal commandInEur, PriceCalculatedV6 evt, PricingRules pricingRules, decimal exchangeRate, decimal medicalInsuranceExchangeRate, decimal dentalInsuranceExchangeRate, ICostsCalculator calculator)\n    {\n        //Calculate Vesting Bonus Costs\n        var commandCopy = new CalculatePricePortugal(commandInEur);\n        if (commandCopy.VestingDataTotalMonths >= commandCopy.VestingDataCliffMonths)\n        {\n            int numberOfPayments = (int)Math.Ceiling(commandInEur.VestingDataTotalMonths / commandInEur.VestingDataCliffMonths);\n            commandCopy.AnnualSalary += (commandInEur.VestingDataAmount / numberOfPayments);\n        }\n        var evtWithVestingBonus = CalculateLocalCostsV2(commandCopy, pricingRules, exchangeRate, medicalInsuranceExchangeRate, dentalInsuranceExchangeRate, calculator);\n        return evtWithVestingBonus.TotalCost - evt.TotalCost;\n    }\n    private static decimal CalculateDeposit(decimal total)\n    {\n        decimal monthlyTotal = total / 12;\n        return monthlyTotal * (_pricingRules?.DepositFactor ?? 2m);\n    }\n    private static decimal CalculateLifeInsurance(decimal grossSalary)\n    {\n        if (grossSalary > 100000)\n        {\n            return (grossSalary * 1.5m) / 100;\n        }\n\n        return (100000 * 1.5m) / 100;\n    }\n\n    private static decimal CalculateMedicalInsurance(decimal grossSalary)\n    {\n        if (grossSalary > 100000)\n        {\n            return (grossSalary * 1.6m) / 100;\n        }\n\n        return (100000 * 1.6m) / 100;\n    }\n\n    private static decimal CalculateDisabilityInsurance(decimal grossSalary)\n    {\n        if (grossSalary > 100000)\n        {\n            return (grossSalary * 1.7m) / 100;\n        }\n\n        return (100000 * 1.7m) / 100;\n    }\n\n    private static decimal CalculateHolidayCost(decimal grossSalary)\n    {\n        if (grossSalary > 100000)\n        {\n            return (grossSalary * 0) / 100;\n        }\n\n        return 0;\n    }\n\n    private static decimal Sum(params decimal[] values)\n    {\n        decimal sum = 0;\n        foreach (var value in values)\n            sum += value;\n        return sum; \n    }\n\n\n    #region Getters\n    private static Task<decimal> GetExchangeRateAsync(string fromCurrency, string toCurrency, IHttpService httpService)\n    {\n        return httpService.GetAsync<decimal>($\"api/currencies/exchange-rates/{fromCurrency}/{toCurrency}\");\n    }\n\n    private static Task<PricingRules> GetPricingRules(string tenantId, string countryIsoCode, string? orgId, IHttpService httpService)\n    {\n        return httpService.GetAsync<PricingRules>($\"api/{tenantId}/reference-data/pricingrules/employee/{countryIsoCode}/organisations/{orgId ?? \"null\"}\");\n    }\n    #endregion\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/PricingEngineBase.cs\n// service: src\n﻿using Evento;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Domain.Commands;\nusing Remundo.Pricing.Domain.Utils;\nusing Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Aggregates.Entities;\n\nnamespace Remundo.Pricing.Domain.Aggregates;\n\npublic class PricingEngineBase : AggregateBase\n{\n    public override string AggregateId => _correlationId;\n    private string _correlationId;\n\n    protected void CalculatePriceInternal<TCommand>(\n        TCommand command, \n        CountryPricingContext context) \n        where TCommand : CalculatePriceBase, new()\n    {\n        Helpers.EnsureInputs(command);\n\n        command.ToCurrencyIsoCode ??= context.LocalCurrency;\n        command.Allowances ??= new Dictionary<string, decimal>();\n\n        var pricingRules = Helpers.LoadPricingRules(context.HttpService, context.CountryIsoCode, command.Metadata[\"tenant-id\"].ToString(), command.OrganisationId);\n\n        var exchangeRates = Helpers.LoadExchangeRates(pricingRules, context.LocalCurrency, command.ToCurrencyIsoCode, command.ToCurrencyIsoCode, context.HttpService);\n\n        TemplateInsurance? templateInsurance = Helpers.LoadInsuranceTemplate(context.HttpService, context.CountryCodeOnly, command.Metadata[\"tenant-id\"].ToString());\n\n        var commandInLocal = Helpers.Convert(command, exchangeRates.ChosenToLocal);\n\n        InsuranceTemplateMapper.MapInsuranceDetailsToInsuranceFlagsAndCosts(command.AnnualSalary, exchangeRates.UsdToLocal,\n            exchangeRates.EURToLocal, context.SelectedInsurances, templateInsurance, out var insuranceFlags, out var insuranceCosts);\n\n        context.SelectedInsurances = insuranceFlags;\n        context.InsuranceCosts = insuranceCosts;\n\n        var evt = Helpers.CalculateLocalCosts(commandInLocal, pricingRules, context);\n\n        RaiseEvent(Helpers.ConvertPriceEventToChosenCurrency(context.LocalCurrency, context.CountryIsoCode, evt, 1 / exchangeRates.ToLocal));\n    }\n\n    protected void RecalculatePriceInternal(\n        RecalculatePrice command, \n        CountryPricingContext context)\n    {\n        Helpers.EnsureInputs(command);\n\n        command.SelectedInsuranceDetails ??= context.Price.SelectedInsurances;\n\n        var populatedCommand = Helpers.PopulateCommandFromExistingPrice(command, context.Price);\n        var pricingRules = Helpers.LoadPricingRules(context.HttpService, context.CountryIsoCode, command.Metadata[\"tenant-id\"].ToString(), command.OrganisationId ?? context.Price.OrganisationId);\n        var exchangeRates = Helpers.LoadExchangeRates(pricingRules, context.LocalCurrency, command.ToCurrencyIsoCode ?? context.LocalCurrency, context.Price.ToCurrencyIsoCode, context.HttpService);\n        var commandInLocal = Helpers.Convert(populatedCommand, exchangeRates.ChosenToLocal);\n        TemplateInsurance? templateInsurance = Helpers.LoadInsuranceTemplate(context.HttpService, context.CountryCodeOnly, command.Metadata[\"tenant-id\"].ToString());\n\n        InsuranceTemplateMapper.MapInsuranceDetailsToInsuranceFlagsAndCosts(command.AnnualSalary ?? context.Price.AnnualSalary, exchangeRates.UsdToLocal,\n            exchangeRates.EURToLocal, context.SelectedInsurances, templateInsurance, out var insuranceFlags, out var insuranceCosts);\n\n        context.SelectedInsurances = insuranceFlags;\n        context.InsuranceCosts = insuranceCosts;\n\n        var evt = Helpers.CalculateLocalCosts(commandInLocal, pricingRules, context);\n        Helpers.AddAdditionalBonuses(evt, commandInLocal, pricingRules, context);\n\n        RaiseEvent(Helpers.ConvertPriceEventToChosenCurrency(context.LocalCurrency, context.CountryIsoCode, evt, (1 / exchangeRates.ToLocal)));\n    }\n\n    protected void CalculatePriceInternal<TCommand>(TCommand command, IHttpService httpService, ICostsCalculator calculator,\n       IEmployerCostCalculator employerCostCalculator, bool includeAdditionalHolidayCost, string isoCode, string currency, string nonRegionIsoCode)\n       where TCommand : CalculatePriceBase, new()\n    {\n        Helpers.EnsureInputs(command);\n\n        command.ToCurrencyIsoCode ??= currency;\n        command.Allowances ??= new Dictionary<string, decimal>();\n\n        var pricingRules = Helpers.LoadPricingRules(httpService, isoCode, command.Metadata[\"tenant-id\"].ToString(), command.OrganisationId);\n\n        var exchangeRates = Helpers.LoadExchangeRates(pricingRules, currency, command.ToCurrencyIsoCode, command.ToCurrencyIsoCode, httpService);\n\n        TemplateInsurance? templateInsurance = Helpers.LoadInsuranceTemplate(httpService, nonRegionIsoCode, command.Metadata[\"tenant-id\"].ToString());\n\n        var commandInLocal = Helpers.Convert(command, exchangeRates.ChosenToLocal);\n\n        InsuranceTemplateMapper.MapInsuranceDetailsToInsuranceFlagsAndCosts(command.AnnualSalary, exchangeRates.UsdToLocal,\n            exchangeRates.EURToLocal, command.SelectedInsuranceDetails, templateInsurance, out var insuranceFlags, out var insuranceCosts);\n\n        CountryPricingContext context = CreateContext(httpService, employerCostCalculator, calculator,\n            isoCode, currency, includeAdditionalHolidayCost, insuranceFlags, insuranceCosts);\n\n        var evt = Helpers.CalculateLocalCosts(commandInLocal, pricingRules, context);\n\n        RaiseEvent(Helpers.ConvertPriceEventToChosenCurrency(currency, isoCode, evt, 1 / exchangeRates.ToLocal));\n    }\n\n    protected void RecalculatePriceInternal(RecalculatePrice command, Price price, IHttpService httpService, ICostsCalculator calculator,\n        IEmployerCostCalculator employerCostCalculator, bool includeAdditionalHolidayCost, string isoCode, string currency, string nonRegionIsoCode)\n    {\n        Helpers.EnsureInputs(command);\n\n        command.SelectedInsuranceDetails ??= price.SelectedInsurances;\n\n        var populatedCommand = Helpers.PopulateCommandFromExistingPrice(command, price);\n        var pricingRules = Helpers.LoadPricingRules(httpService, isoCode, command.Metadata[\"tenant-id\"].ToString(), command.OrganisationId ?? price.OrganisationId);\n        var exchangeRates = Helpers.LoadExchangeRates(pricingRules, currency, command.ToCurrencyIsoCode ?? currency, price.ToCurrencyIsoCode, httpService);\n        var commandInLocal = Helpers.Convert(populatedCommand, exchangeRates.ChosenToLocal);\n        TemplateInsurance? templateInsurance = Helpers.LoadInsuranceTemplate(httpService, nonRegionIsoCode, command.Metadata[\"tenant-id\"].ToString());\n\n        InsuranceTemplateMapper.MapInsuranceDetailsToInsuranceFlagsAndCosts(command.AnnualSalary ?? price.AnnualSalary, exchangeRates.UsdToLocal,\n            exchangeRates.EURToLocal, command.SelectedInsuranceDetails, templateInsurance, out var insuranceFlags, out var insuranceCosts);\n\n        CountryPricingContext context = CreateContext(httpService, employerCostCalculator, calculator,\n            isoCode, currency, includeAdditionalHolidayCost, insuranceFlags, insuranceCosts);\n\n        var evt = Helpers.CalculateLocalCosts(commandInLocal, pricingRules, context);\n        Helpers.AddAdditionalBonuses(evt, commandInLocal, pricingRules, context);\n\n        RaiseEvent(Helpers.ConvertPriceEventToChosenCurrency(currency, isoCode, evt, (1 / exchangeRates.ToLocal)));\n    }\n\n    private CountryPricingContext CreateContext(IHttpService httpService, IEmployerCostCalculator employerCostCalculator, ICostsCalculator calculator,\n        string isoCode, string currency, bool includeAdditionalHolidayCost, IDictionary<string, bool>? insuranceFlags, IDictionary<string, decimal>? insuranceCosts)\n    {\n        return new()\n        {\n            HttpService = httpService,\n            CountryIsoCode = isoCode,\n            LocalCurrency = currency,\n            EmployerCostCalculator = employerCostCalculator,\n            IncludeAdditionalHolidayCost = includeAdditionalHolidayCost,\n            TenantCostsCalculator = calculator,\n            InsuranceCosts = insuranceCosts,\n            SelectedInsurances = insuranceFlags\n        };\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Slovakia.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Domain.Commands;\nusing Remundo.Pricing.Domain.Utils;\nusing System.Reflection.Metadata;\n\nnamespace Remundo.Pricing.Domain.Aggregates;\n\npublic class Slovakia : PricingEngineBase\n{\n    public override string AggregateId => _correlationId;\n    private string _correlationId;\n\n    private const string IsoCode = \"SK\";\n    private const string Currency = \"EUR\";\n\n    private Price _price;\n\n    public Slovakia()\n    {\n        RegisterTransition<PriceCalculatedV7>(Apply);\n\n        RegisterTransition<PriceCalculatedV6>(Apply);\n    }\n\n    private void Apply(PriceCalculatedV7 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    #region Legacy\n\n    private void Apply(PriceCalculatedV6 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    #endregion\n\n    public static Slovakia Create()\n    {\n        return new Slovakia();\n    }\n\n    public void CalculatePrice(CalculatePriceSlovakia command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new SlovakiaEmployerCostCalculator(), calculator);\n        CalculatePriceInternal(command, cxt);\n    }\n\n    public void RecalculatePrice(RecalculatePrice command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new SlovakiaEmployerCostCalculator(), calculator);\n        RecalculatePriceInternal(command, cxt);\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Spain.cs\n// service: src\n﻿using Evento;\nusing Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Commands;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Domain.Utils;\nusing Remundo.Pricing.Shared.Events;\nusing System.Reflection.Metadata;\n\n\nnamespace Remundo.Pricing.Domain.Aggregates;\n\npublic class Spain : PricingEngineBase\n{\n    public override string AggregateId => _correlationId;\n    private string _correlationId;\n\n    private const string IsoCode = \"ES\";\n    private const string Currency = \"EUR\";\n\n    private static readonly decimal _socialSecurityCap = 4495.50m;\n    private static readonly decimal _employerSocialSecurityFactor = 0.241m;\n\n    private static readonly decimal _professionalContigencyFactor = 0.0905m;\n    private static readonly decimal _professionalContigencyCap = 4495.50m;\n\n    private static readonly decimal _overheadFactor = 0.04m;\n    private static readonly decimal _severanceFactor = 0m;\n    private static readonly decimal _fXCostsFactor = 0m;\n    private static readonly decimal _otherBenefitsFactor = 0m;\n    private static PricingRules _pricingRules;\n    private Price _price;\n    private static IHttpService _httpService;\n\n    public Spain()\n    {\n        RegisterTransition<PriceCalculatedV7>(Apply);\n\n        RegisterTransition<PriceCalculatedV6>(Apply);\n        RegisterTransition<PriceCalculatedV5>(Apply);\n        RegisterTransition<PriceCalculatedV2>(Apply);\n        RegisterTransition<PriceCalculatedV1>(Apply);\n    }\n\n    private void Apply(PriceCalculatedV1 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.GrossSalaryElements[\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.MedicalInsurance, false, evt.LifeInsurance, evt.Allowances);\n    }\n\n    private void Apply(PriceCalculatedV2 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.GrossSalaryElements[\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.MedicalInsuranceSelected, evt.DentalInsuranceSelected, evt.DeathInsuranceSelected, evt.Allowances);\n    }\n\n    private void Apply(PriceCalculatedV5 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n    private void Apply(PriceCalculatedV6 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    public static Spain Create()\n    {\n        return new Spain();\n    }\n\n    private bool TryToRaiseV1(Message command)\n    {\n        // For testing purpose publish V1\n        if (!command.Metadata[\"command-type\"].Equals(\"RecalculatePrice-ES-V1\"))\n            return false;\n        var grossSalaryElements = new Dictionary<string, decimal>() {\n            { \"Base Salary\", 50000.00m }\n        };\n        RaiseEvent(new PriceCalculatedV1(\"EUR\", \"EUR\", \"ES\", 120000, 50000, 0, 500, 500, 1250.0m,\n            true, 1000, false, 5000, true, 5000, 0, new Dictionary<string, decimal>(),\n            grossSalaryElements, new Dictionary<string, decimal>(), 0, 0, 0, 0, 0, 0, 0,\n            command.Metadata));\n        return true;\n    }\n\n    public void RecalculatePrice(RecalculatePrice command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        _httpService = httpService;\n\n        if (TryToRaiseV1(command))\n            return;\n        switch (command.Metadata[\"command-type\"].Split(\"-\")[0])\n        {\n            case \"RecalculatePrice\":\n                RecalculatePriceV1(command, httpService);\n                break;\n            case \"RecalculatePriceV2\":\n                RecalculatePriceV2(command, httpService, calculator);\n                break;\n            default:\n                throw new ArgumentException(\"Unknown command type\", command.Metadata[\"command-type\"]);\n        }\n    }\n\n    public void RecalculatePriceV1(RecalculatePrice command, IHttpService httpService)\n    {\n        Ensure.NotNull(command, nameof(command));\n        Ensure.NotNullOrWhiteSpace(command.PriceId, nameof(command.PriceId));\n        Ensure.NotNull(command.Metadata, nameof(command.Metadata));\n        Ensure.NotNull(httpService, nameof(httpService));\n\n        if (TryToRaiseV1(command))\n            return;\n\n        var toCurrencyIsoCode = command.ToCurrencyIsoCode ?? Currency;\n        var organisationId = command.OrganisationId ?? _price.OrganisationId;\n        command.ToCurrencyIsoCode = toCurrencyIsoCode;\n\n        var pricingRules = GetPricingRules(command.Metadata[\"tenant-id\"].ToString(), IsoCode, organisationId, httpService);\n        var convertExchangeRate = GetExchangeRateAsync(toCurrencyIsoCode, Currency, httpService);\n        var exchangeRateEURToUSD = GetExchangeRateAsync(Currency, \"USD\", httpService);\n        var exchangeRateForEvent = GetExchangeRateAsync(Currency, command.ToCurrencyIsoCode, httpService);\n\n        Task.WhenAll(pricingRules, convertExchangeRate, exchangeRateEURToUSD, exchangeRateForEvent).Wait();\n        _pricingRules = pricingRules.Result;\n        var annualSalary = command.AnnualSalary ?? _price.AnnualSalary;\n        var allowances = command.Allowances ?? _price.Allowances;\n        var signingBonusAmount = command.OneOffDataAmount ?? _price.OneOffDataAmount;\n        var vestingBonusAmount = command.VestingDataAmount ?? _price.VestingDataAmount;\n        var vestingBonusCliffMonths = command.VestingDataCliffMonths ?? _price.VestingDataCliffMonths;\n        var vestingBonusTotalMonths = command.VestingDataTotalMonths ?? _price.VestingDataTotalMonths;\n        var medicalInsuranceSelected = command.MedicalInsurance ?? _price.MedicalInsuranceSelected;\n        var dentalInsuranceSelected = command.DentalInsuranceSelected ?? _price.DentalInsuranceSelected;\n        var deathInsuranceSelected = command.DeathInsuranceSelected ?? _price.DeathInsuranceSelected;\n\n\n        CalculatePriceSpain commandInEur = Convert(new CalculatePriceSpain\n        {\n            CorrelationId = command.PriceId,\n            AnnualSalary = annualSalary,\n            ToCurrencyIsoCode = toCurrencyIsoCode,\n\n            MedicalInsuranceSelected = medicalInsuranceSelected ?? false,\n            DentalInsuranceSelected = dentalInsuranceSelected ?? false,\n            DeathInsuranceSelected = deathInsuranceSelected ?? false,\n            Allowances = allowances,\n            OneOffDataAmount = signingBonusAmount,\n            VestingDataAmount = vestingBonusAmount,\n            VestingDataCliffMonths = vestingBonusCliffMonths,\n            VestingDataTotalMonths = vestingBonusTotalMonths,\n            Metadata = command.Metadata\n        }, convertExchangeRate.Result);\n\n        var evt = CalculateLocalCosts(commandInEur, pricingRules.Result, exchangeRateEURToUSD.Result);\n        var signingBonusCost = signingBonusAmount == 0 ? 0 : CalculateSigningBonusCost(commandInEur, evt, pricingRules.Result, exchangeRateEURToUSD.Result);\n        var vestingCost = vestingBonusAmount == 0 ? 0 : CalculateVestingCost(commandInEur, evt, pricingRules.Result, exchangeRateEURToUSD.Result);\n        var additionalPaymentsTotal = signingBonusCost + vestingCost;\n\n\n        var @event = new PriceCalculatedV2(Currency, evt.ConvertedCurrency, evt.IsoCode, evt.TotalCost, evt.GrossSalary, evt.EmployerCost,\n            evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit,\n            evt.AdditionalHolidayCost, evt.EmployerCostElements, evt.GrossSalaryElements, evt.Allowances, additionalPaymentsTotal,\n            signingBonusCost, evt.SigningBonusAmount, vestingCost, evt.VestingBonusAmount, evt.VestingBonusCliffMonths,\n            evt.VestingBonusTotalMonths, evt.MedicalInsuranceSelected, evt.DentalInsuranceSelected, evt.DeathInsuranceSelected,\n            evt.MedicalInsuranceCost, evt.DentalInsuranceCost, evt.DeathInsuranceCost, evt.Metadata);\n\n        var evtInDesiredCurrency = ConvertPriceEventToChosenCurrency(@event, exchangeRateForEvent.Result);\n\n        RaiseEvent(evtInDesiredCurrency);\n    }\n\n    public void CalculatePrice(CalculatePriceSpain command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        Ensure.NotNull(command, nameof(command));\n        Ensure.NotNull(command.Metadata, nameof(command.Metadata));\n        Ensure.Nonnegative(command.AnnualSalary, nameof(command.AnnualSalary));\n\n        _httpService = httpService;\n\n        if (TryToRaiseV1(command))\n            return;\n\n        switch (command.Metadata[\"command-type\"])\n        {\n            case \"CalculatePrice\":\n                CalculatePriceV1(command, httpService);\n                break;\n            case \"CalculatePriceV2\":\n                CalculatePriceV2(command, httpService, calculator);\n                break;\n            default:\n                throw new ArgumentException(\"Unknown command type\", command.Metadata[\"command-type\"]);\n        }\n    }\n\n    public void CalculatePriceV1(CalculatePriceSpain command, IHttpService httpService)\n    {\n        // validation\n        Ensure.NotNull(command, nameof(command));\n        Ensure.NotNull(command.Metadata, nameof(command.Metadata));\n        Ensure.Nonnegative(command.AnnualSalary, nameof(command.AnnualSalary));\n        Ensure.NotNull(httpService, nameof(httpService));\n\n        if (TryToRaiseV1(command))\n            return;"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Spain.cs\n// service: src\nvar evtInDesiredCurrency = ConvertPriceEventToChosenCurrency(@event, exchangeRateForEvent.Result);\n\n        RaiseEvent(evtInDesiredCurrency);\n    }\n\n    public void CalculatePrice(CalculatePriceSpain command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        Ensure.NotNull(command, nameof(command));\n        Ensure.NotNull(command.Metadata, nameof(command.Metadata));\n        Ensure.Nonnegative(command.AnnualSalary, nameof(command.AnnualSalary));\n\n        _httpService = httpService;\n\n        if (TryToRaiseV1(command))\n            return;\n\n        switch (command.Metadata[\"command-type\"])\n        {\n            case \"CalculatePrice\":\n                CalculatePriceV1(command, httpService);\n                break;\n            case \"CalculatePriceV2\":\n                CalculatePriceV2(command, httpService, calculator);\n                break;\n            default:\n                throw new ArgumentException(\"Unknown command type\", command.Metadata[\"command-type\"]);\n        }\n    }\n\n    public void CalculatePriceV1(CalculatePriceSpain command, IHttpService httpService)\n    {\n        // validation\n        Ensure.NotNull(command, nameof(command));\n        Ensure.NotNull(command.Metadata, nameof(command.Metadata));\n        Ensure.Nonnegative(command.AnnualSalary, nameof(command.AnnualSalary));\n        Ensure.NotNull(httpService, nameof(httpService));\n\n        if (TryToRaiseV1(command))\n            return;\n\n        var toCurrencyIsoCode = command.ToCurrencyIsoCode ?? Currency;\n        var organisationId = command.OrganisationId;\n        command.ToCurrencyIsoCode = toCurrencyIsoCode;\n\n        var pricingRules = GetPricingRules(command.Metadata[\"tenant-id\"].ToString(), IsoCode, organisationId, httpService);\n        var convertExchangeRate = GetExchangeRateAsync(toCurrencyIsoCode, Currency, httpService);\n        var exchangeRateEURToUSD = GetExchangeRateAsync(Currency, \"USD\", httpService);\n        var exchangeRateForEvent = GetExchangeRateAsync(Currency, command.ToCurrencyIsoCode, httpService);\n\n        Task.WhenAll(pricingRules, convertExchangeRate, exchangeRateEURToUSD, exchangeRateForEvent).Wait();\n        _pricingRules = pricingRules.Result;\n        // calculation for V2 events\n        // convert from currency if required\n        var commandInEUR = Convert(command, convertExchangeRate.Result);\n        var evt = CalculateLocalCosts(commandInEUR, pricingRules.Result, exchangeRateEURToUSD.Result);\n\n        RaiseEvent(ConvertPriceEventToChosenCurrency(evt, exchangeRateForEvent.Result));\n    }\n\n    public void CalculatePriceV2(CalculatePriceSpain command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new SpainEmployerCostCalculator(), calculator);\n        CalculatePriceInternal(command, cxt);\n    }\n\n    public void RecalculatePriceV2(RecalculatePrice command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new SpainEmployerCostCalculator(), calculator);\n        RecalculatePriceInternal(command, cxt);\n    }\n\n    private decimal CalculateMonthlyTotalCostOfEmployment(decimal monthlyTotalBasicPay)\n    {\n        decimal employerSocialSecurity = CalculateEmployerSocialSecurity(monthlyTotalBasicPay);\n        decimal professionalContigency = CalculateProfessionalContigency(monthlyTotalBasicPay);\n        decimal totalEmployerCost = CalculateTotalEmployerCost(employerSocialSecurity, professionalContigency);\n        decimal directCostOfEmployment = CalculateDirectCostOfEmployment(monthlyTotalBasicPay, totalEmployerCost);\n        decimal overHead = CalculateOverhead(directCostOfEmployment);\n        decimal severance = CalculateSeverance(directCostOfEmployment);\n        decimal fXCosts = CalculateFXCosts(directCostOfEmployment);\n        decimal otherBenefits = CalculateOtherBenefits(directCostOfEmployment);\n        decimal totalAccruals = CalculateTotalAccruals(severance, overHead, fXCosts, otherBenefits);\n        decimal monthlyTotalCostOfEmployment = CalculateTotalCostOfEmployment(directCostOfEmployment, totalAccruals);\n        return monthlyTotalCostOfEmployment;\n    }\n\n    private decimal CalculateTotalCostOfEmployment(decimal directCostOfEmployment, decimal totalAccruals)\n    {\n        decimal totalCostOfEmployment = directCostOfEmployment + totalAccruals;\n        return totalCostOfEmployment;\n    }\n\n    private decimal CalculateTotalAccruals(decimal severance, decimal overhead, decimal fXCosts, decimal otherBenefits)\n    {\n        decimal totalAccruals = severance + overhead + fXCosts + otherBenefits;\n        return totalAccruals;\n    }\n\n    private decimal CalculateOtherBenefits(decimal directCostOfEmployment)\n    {\n        decimal otherBenefits = directCostOfEmployment * _otherBenefitsFactor;\n        return otherBenefits;\n    }\n\n    private decimal CalculateFXCosts(decimal directCostOfEmployment)\n    {\n        decimal fXCosts = directCostOfEmployment * _fXCostsFactor;\n        return fXCosts;\n    }\n\n    private decimal CalculateSeverance(decimal directCostOfEmployment)\n    {\n        decimal severance = directCostOfEmployment * _severanceFactor;\n        return severance;\n    }\n    private decimal CalculateOverhead(decimal directCostOfEmployment)\n    {\n        decimal overhead = directCostOfEmployment * _overheadFactor;\n        return overhead;\n    }\n\n    private decimal CalculateDirectCostOfEmployment(decimal totalBasicPay, decimal totalEmployerCost)\n    {\n        decimal directCostOfEmployment = totalBasicPay + totalEmployerCost;\n        return directCostOfEmployment;\n    }\n\n    private decimal CalculateTotalEmployerCost(decimal employerSocialSecurity, decimal professionalContigency)\n    {\n        decimal totalEmployerCost = employerSocialSecurity + professionalContigency;\n        return totalEmployerCost;\n    }\n\n    private decimal CalculateProfessionalContigency(decimal totalBasicPay)\n    {\n        decimal professionalContigency = Math.Min(_professionalContigencyCap, totalBasicPay) * _professionalContigencyFactor;\n        return professionalContigency;\n    }\n\n    private decimal CalculateEmployerSocialSecurity(decimal totalbasicPay)\n    {\n        decimal employerSocialSecurity = Math.Min(_socialSecurityCap, totalbasicPay) * _employerSocialSecurityFactor;\n        return employerSocialSecurity;\n    }\n\n    private IDictionary<string, decimal> Convert(IDictionary<string, decimal> dict, decimal exchangeRate)\n    {\n        IDictionary<string, decimal> newDict = new Dictionary<string, decimal>();\n        foreach (var x in dict) newDict.Add(x.Key, x.Value * exchangeRate);\n        return newDict;\n    }\n\n    private PriceCalculatedV2 ConvertPriceEventToChosenCurrency(PriceCalculatedV2 priceCalculatedV2, decimal exchangeRate)\n    {\n        var totalCost = priceCalculatedV2.TotalCost * exchangeRate;\n        var grossSalary = priceCalculatedV2.GrossSalary * exchangeRate;\n        var employerCost = priceCalculatedV2.EmployerCost * exchangeRate;\n        var deposit = priceCalculatedV2.Deposit * exchangeRate;\n        var platformFee = priceCalculatedV2.PlatformFeeInLocalCurrency * exchangeRate;\n        var additionalHolidayCost = priceCalculatedV2.AdditionalHolidayCost * exchangeRate;\n        var employerCostElements = Convert(priceCalculatedV2.EmployerCostElements, exchangeRate);\n\n        var grossSalaryElements = Convert(priceCalculatedV2.GrossSalaryElements, exchangeRate);\n        var allowances = Convert(priceCalculatedV2.Allowances, exchangeRate);\n\n        var signingBonusIncludingCosts = priceCalculatedV2.SigningBonusCosts * exchangeRate;\n        var oneOffBonusAmount = priceCalculatedV2.SigningBonusAmount * exchangeRate;\n        var vestingBonusAmount = priceCalculatedV2.VestingBonusAmount * exchangeRate;\n        var additionalPaymentsTotal = priceCalculatedV2.AdditionalPaymentsTotal * exchangeRate;\n        var vestingBonusCosts = priceCalculatedV2.VestingBonusCosts * exchangeRate;\n\n        var dentalInsuranceCost = priceCalculatedV2.DentalInsuranceCost * exchangeRate;\n        var medicalInsuranceNewCost = priceCalculatedV2.MedicalInsuranceCost * exchangeRate;\n        var deathInsuranceCost = priceCalculatedV2.DeathInsuranceCost * exchangeRate;\n\n        return new PriceCalculatedV2(Currency, priceCalculatedV2.ConvertedCurrency, IsoCode,\n            totalCost, grossSalary, employerCost, platformFee, platformFee, deposit, additionalHolidayCost, employerCostElements,\n            grossSalaryElements, allowances, additionalPaymentsTotal, signingBonusIncludingCosts, oneOffBonusAmount, vestingBonusCosts,\n            vestingBonusAmount, priceCalculatedV2.VestingBonusCliffMonths,\n            priceCalculatedV2.VestingBonusTotalMonths,\n            priceCalculatedV2.MedicalInsuranceSelected, priceCalculatedV2.DentalInsuranceSelected, priceCalculatedV2.DeathInsuranceSelected,\n            medicalInsuranceNewCost, dentalInsuranceCost, deathInsuranceCost, priceCalculatedV2.Metadata);\n    }\n\n    private PriceCalculatedV6 ConvertPriceEventToChosenCurrency(PriceCalculatedV6 evt, decimal exchangeRate)\n    {\n        var totalCost = evt.TotalCost * exchangeRate;\n        var grossSalary = evt.GrossSalary * exchangeRate;\n        var employerCost = evt.EmployerCost * exchangeRate;\n        var deposit = evt.Deposit * exchangeRate;\n        var depositRounded = Math.Ceiling(evt.DepositRounded * exchangeRate);\n        var platformFee = evt.PlatformFeeInLocalCurrency * exchangeRate;\n        var additionalHolidayCost = evt.AdditionalHolidayCost * exchangeRate;\n        var costs = Convert(evt.Costs, exchangeRate);\n\n        var allowances = Convert(evt.Allowances, exchangeRate);\n        var insurances = Convert(evt.EmployeeInsuranceFees, exchangeRate);\n\n        var oneOffBonusAmount = evt.SigningBonusAmount * exchangeRate;\n        var vestingBonusAmount = evt.VestingBonusAmount * exchangeRate;\n\n        return new PriceCalculatedV6(Currency, evt.ConvertedCurrency, IsoCode, evt.OrganisationId,\n            totalCost, grossSalary, employerCost, evt.PlatformFeeInEuros, platformFee, deposit, depositRounded, additionalHolidayCost, costs,\n            allowances, oneOffBonusAmount,\n            vestingBonusAmount, evt.VestingBonusCliffMonths,\n            evt.VestingBonusTotalMonths, false, false, 0,\n            evt.SelectedInsurances, new Dictionary<string, decimal>(), insurances,\n            new Dictionary<string, decimal>(), new Dictionary<string, decimal>(), evt.Metadata);\n    }\n\n    private IDictionary<string, IDictionary<string, decimal>> Convert(IDictionary<string, IDictionary<string, decimal>> dict, decimal exchangeRate)\n    {\n        IDictionary<string, IDictionary<string, decimal>> newDict = new Dictionary<string, IDictionary<string, decimal>>();\n        foreach (var x in dict)\n        {\n            newDict[x.Key] = new Dictionary<string, decimal>();\n            foreach (var y in x.Value)\n                newDict[x.Key].Add(y.Key, y.Value * exchangeRate);\n        }"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Spain.cs\n// service: src\npriceCalculatedV2.VestingBonusTotalMonths,\n            priceCalculatedV2.MedicalInsuranceSelected, priceCalculatedV2.DentalInsuranceSelected, priceCalculatedV2.DeathInsuranceSelected,\n            medicalInsuranceNewCost, dentalInsuranceCost, deathInsuranceCost, priceCalculatedV2.Metadata);\n    }\n\n    private PriceCalculatedV6 ConvertPriceEventToChosenCurrency(PriceCalculatedV6 evt, decimal exchangeRate)\n    {\n        var totalCost = evt.TotalCost * exchangeRate;\n        var grossSalary = evt.GrossSalary * exchangeRate;\n        var employerCost = evt.EmployerCost * exchangeRate;\n        var deposit = evt.Deposit * exchangeRate;\n        var depositRounded = Math.Ceiling(evt.DepositRounded * exchangeRate);\n        var platformFee = evt.PlatformFeeInLocalCurrency * exchangeRate;\n        var additionalHolidayCost = evt.AdditionalHolidayCost * exchangeRate;\n        var costs = Convert(evt.Costs, exchangeRate);\n\n        var allowances = Convert(evt.Allowances, exchangeRate);\n        var insurances = Convert(evt.EmployeeInsuranceFees, exchangeRate);\n\n        var oneOffBonusAmount = evt.SigningBonusAmount * exchangeRate;\n        var vestingBonusAmount = evt.VestingBonusAmount * exchangeRate;\n\n        return new PriceCalculatedV6(Currency, evt.ConvertedCurrency, IsoCode, evt.OrganisationId,\n            totalCost, grossSalary, employerCost, evt.PlatformFeeInEuros, platformFee, deposit, depositRounded, additionalHolidayCost, costs,\n            allowances, oneOffBonusAmount,\n            vestingBonusAmount, evt.VestingBonusCliffMonths,\n            evt.VestingBonusTotalMonths, false, false, 0,\n            evt.SelectedInsurances, new Dictionary<string, decimal>(), insurances,\n            new Dictionary<string, decimal>(), new Dictionary<string, decimal>(), evt.Metadata);\n    }\n\n    private IDictionary<string, IDictionary<string, decimal>> Convert(IDictionary<string, IDictionary<string, decimal>> dict, decimal exchangeRate)\n    {\n        IDictionary<string, IDictionary<string, decimal>> newDict = new Dictionary<string, IDictionary<string, decimal>>();\n        foreach (var x in dict)\n        {\n            newDict[x.Key] = new Dictionary<string, decimal>();\n            foreach (var y in x.Value)\n                newDict[x.Key].Add(y.Key, y.Value * exchangeRate);\n        }\n        return newDict;\n    }\n\n    private CalculatePriceSpain Convert(CalculatePriceSpain command, decimal exchangeRate)\n    {\n        var annualSalary = command.AnnualSalary * exchangeRate;\n        var vestingBonus = command.VestingDataAmount * exchangeRate;\n        var signingBonus = command.OneOffDataAmount * exchangeRate;\n        var allowances = new Dictionary<string, decimal>();\n        foreach (var x in command.Allowances) allowances.Add(x.Key, (x.Value * exchangeRate));\n\n        return new CalculatePriceSpain\n        {\n            CorrelationId = command.CorrelationId,\n            AnnualSalary = annualSalary,\n            ToCurrencyIsoCode = command.ToCurrencyIsoCode,\n            OrganisationId = command.OrganisationId,\n            MedicalInsuranceSelected = command.MedicalInsuranceSelected,\n            DentalInsuranceSelected = command.DentalInsuranceSelected,\n            DeathInsuranceSelected = command.DeathInsuranceSelected,\n            Allowances = allowances,\n            OneOffDataAmount = signingBonus,\n            VestingDataAmount = vestingBonus,\n            VestingDataCliffMonths = command.VestingDataCliffMonths,\n            VestingDataTotalMonths = command.VestingDataTotalMonths,\n            Metadata = command.Metadata\n        };\n    }\n\n    private PriceCalculatedV2 CalculateLocalCosts(CalculatePriceSpain command, PricingRules pricingRules, decimal exchangeRateEurToUSD)\n    {\n\n        Ensure.NotNull(command, nameof(command));\n        Ensure.NotNull(command.Metadata, nameof(command.Metadata));\n        Ensure.Nonnegative(command.AnnualSalary, nameof(command.AnnualSalary));\n\n        decimal exchangeRateUSDToEUR = 1 / exchangeRateEurToUSD;\n\n        //Converting annual salary and deposit\n        decimal annualSalary = command.AnnualSalary;\n\n        //Allowances\n        decimal totalAllowances = command.Allowances.Values.ToList().Sum() * 12;\n\n        //Total elements\n        IDictionary<string, decimal> grossSalaryElements = new Dictionary<string, decimal>() { };\n        grossSalaryElements.Add(\"Base Salary\", annualSalary);\n\n        // Add allowance total to gross salary\n        annualSalary += totalAllowances;\n\n        decimal monthlySalary = annualSalary / 12;\n        decimal employmentCost_monthly = CalculateMonthlyTotalCostOfEmployment(monthlySalary);\n        decimal employmentCost_annual = employmentCost_monthly * 12;\n       \n\n        //Employer Cost Elements\n        IDictionary<string, decimal> employerCostElements = new Dictionary<string, decimal>() { };\n        decimal holidayCost = CalculateHolidayCost(annualSalary);\n\n        //decimal individualAllowances = command.Allowances.Values.ToList().Sum();\n        //if (totalAllowances > 0) foreach (var x in command.Allowances) grossSalaryElements.Add(x.Key, x.Value);\n\n        if (totalAllowances > 0) grossSalaryElements.Add(\"Allowances\", totalAllowances);\n\n        employerCostElements.Add(\"Employer Social Security\", CalculateEmployerSocialSecurity(monthlySalary) * 12);\n        employerCostElements.Add(\"Professional Contingency\", CalculateProfessionalContigency(monthlySalary) * 12);\n\n        decimal employerCost = employerCostElements.Values.ToList().Sum();\n\n        var grossSalary = grossSalaryElements.Values.Sum();\n\n        //adding overhead costs to employment costs\n        decimal employerSocialSecurity = CalculateEmployerSocialSecurity(monthlySalary) * 12;\n        decimal professionalContigency = CalculateProfessionalContigency(monthlySalary) * 12;\n        decimal employerCostBeforeOverhead = employerSocialSecurity + professionalContigency;\n        decimal directCostOfEmployment = CalculateDirectCostOfEmployment(annualSalary, employerCostBeforeOverhead);\n        decimal overhead = CalculateOverhead(directCostOfEmployment);\n        employerCostElements.Add(\"EHS/OSHA\", overhead);\n\n        IDictionary<string, decimal> allowances = new Dictionary<string, decimal>();\n        foreach (var x in command.Allowances) allowances.Add(x.Key, x.Value);\n\n        decimal total = employmentCost_annual;\n\n        //PlatformFee\n        decimal platformFeeInLocalCurrency = Helpers.CalculatePlatformFee(total, pricingRules, 1);\n        total += platformFeeInLocalCurrency;\n\n        employerCost += overhead;\n\n        // Insurances\n\n        var deathInsuranceCost = Helpers.CalculateLifeAndAccidentsInsurance(annualSalary * exchangeRateEurToUSD) * exchangeRateUSDToEUR;\n        var medicalInsuranceCost = Helpers.CalculateMedicalInsurance(\"Spain\");\n        var dentalInsuranceCost = Helpers.CalculateDentalAndOpticalInsurance(\"Spain\");\n\n        if (command.MedicalInsuranceSelected) total += medicalInsuranceCost;\n        if (command.DentalInsuranceSelected) total += dentalInsuranceCost;\n        if (command.DeathInsuranceSelected) total += deathInsuranceCost;\n\n        decimal deposit;\n        deposit = pricingRules.DepositFactor <= 0 ? 0 : CalculateDeposit(total);\n\n        return new PriceCalculatedV2(Currency, command.ToCurrencyIsoCode, IsoCode, total, grossSalary, employerCost,\n                              platformFeeInLocalCurrency, platformFeeInLocalCurrency, deposit, holidayCost, employerCostElements, grossSalaryElements,\n                              command.Allowances, 0, 0, command.OneOffDataAmount, 0,\n                              command.VestingDataAmount, command.VestingDataCliffMonths,\n                              command.VestingDataTotalMonths,\n                              command.MedicalInsuranceSelected, command.DentalInsuranceSelected, command.DeathInsuranceSelected,\n                              Helpers.CalculateMedicalInsurance(\"Spain\"),\n                              Helpers.CalculateDentalAndOpticalInsurance(\"Spain\"),\n                              Helpers.CalculateLifeAndAccidentsInsurance(annualSalary * exchangeRateEurToUSD) *\n                              exchangeRateUSDToEUR,\n                              command.Metadata);\n    }\n\n    private PriceCalculatedV6 CalculateLocalCostsV2(CalculatePriceSpain command, PricingRules pricingRules, decimal exchangeRateEurToUSD, decimal medicalInsuranceExchangeRate, decimal dentalInsuranceExchangeRate, ICostsCalculator calculator)\n    {\n        Ensure.NotNull(command, nameof(command));\n        Ensure.NotNull(command.Metadata, nameof(command.Metadata));\n        Ensure.Nonnegative(command.AnnualSalary, nameof(command.AnnualSalary));\n\n        decimal exchangeRateUSDToEUR = 1 / exchangeRateEurToUSD;\n\n        //Converting annual salary and deposit\n        decimal annualSalary = command.AnnualSalary;\n\n        //Allowances\n        decimal totalAllowances = command.Allowances.Values.ToList().Sum() * 12;\n\n        //Total elements\n        IDictionary<string, decimal> grossSalaryElements = new Dictionary<string, decimal>\n        {\n            { \"Base Salary\", annualSalary }\n        };\n\n        // Add allowance total to gross salary\n        annualSalary += totalAllowances;\n\n        decimal monthlySalary = annualSalary / 12m;\n        decimal employmentCost_monthly = CalculateMonthlyTotalCostOfEmployment(monthlySalary);\n        decimal employmentCost_annual = employmentCost_monthly * 12;\n\n        //Employer Cost Elements\n        decimal holidayCost = CalculateHolidayCost(annualSalary);\n\n        if (totalAllowances > 0) \n            grossSalaryElements.Add(\"Allowances\", totalAllowances);\n\n        var grossSalary = grossSalaryElements.Values.Sum();\n\n        var socialSecurity = CalculateEmployerSocialSecurity(monthlySalary) * 12m;\n        var professionalContingency = CalculateProfessionalContigency(monthlySalary) * 12m;\n\n        var employmentCost = socialSecurity + professionalContingency + grossSalary;\n        decimal total = 0;\n\n        //Insurances\n        var insuranceBool = InsurancesCalculator.Calculate(_pricingRules, command.MedicalInsuranceSelected, command.DentalInsuranceSelected,\n            command.DeathInsuranceSelected, exchangeRateEurToUSD, exchangeRateUSDToEUR, medicalInsuranceExchangeRate,\n            dentalInsuranceExchangeRate, annualSalary, out var insuranceCosts, ref total,\n            ref employmentCost);\n\n        var employerCostElements = new Dictionary<string, decimal>\n        {\n            // Statutory Costs \n            { \"Employer Social Security\", socialSecurity },\n            { \"Professional Contingency\", professionalContingency },\n\n            // Non-Statuory Costs\n            { \"Professional Indemnity\", (pricingRules.ProfessionalIndemnity / 100) * employmentCost },\n            { \"Occupational Health & Safety\", (pricingRules.OccupationalHealthAndSafety / 100) * employmentCost },\n            { \"Medical Leave\", (pricingRules.MedicalLeave / 100) * employmentCost },\n            { \"Severance Cost\", (pricingRules.SeveranceCost / 100) * employmentCost },\n\n        };\n        decimal hRSupportAmount = Helpers.CalculateHRSupportAmount(pricingRules, employmentCost);\n        decimal payrollProcessingFee = Helpers.CalculatePayrollProcessingFee(pricingRules, employmentCost);"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Spain.cs\n// service: src\ndecimal monthlySalary = annualSalary / 12m;\n        decimal employmentCost_monthly = CalculateMonthlyTotalCostOfEmployment(monthlySalary);\n        decimal employmentCost_annual = employmentCost_monthly * 12;\n\n        //Employer Cost Elements\n        decimal holidayCost = CalculateHolidayCost(annualSalary);\n\n        if (totalAllowances > 0) \n            grossSalaryElements.Add(\"Allowances\", totalAllowances);\n\n        var grossSalary = grossSalaryElements.Values.Sum();\n\n        var socialSecurity = CalculateEmployerSocialSecurity(monthlySalary) * 12m;\n        var professionalContingency = CalculateProfessionalContigency(monthlySalary) * 12m;\n\n        var employmentCost = socialSecurity + professionalContingency + grossSalary;\n        decimal total = 0;\n\n        //Insurances\n        var insuranceBool = InsurancesCalculator.Calculate(_pricingRules, command.MedicalInsuranceSelected, command.DentalInsuranceSelected,\n            command.DeathInsuranceSelected, exchangeRateEurToUSD, exchangeRateUSDToEUR, medicalInsuranceExchangeRate,\n            dentalInsuranceExchangeRate, annualSalary, out var insuranceCosts, ref total,\n            ref employmentCost);\n\n        var employerCostElements = new Dictionary<string, decimal>\n        {\n            // Statutory Costs \n            { \"Employer Social Security\", socialSecurity },\n            { \"Professional Contingency\", professionalContingency },\n\n            // Non-Statuory Costs\n            { \"Professional Indemnity\", (pricingRules.ProfessionalIndemnity / 100) * employmentCost },\n            { \"Occupational Health & Safety\", (pricingRules.OccupationalHealthAndSafety / 100) * employmentCost },\n            { \"Medical Leave\", (pricingRules.MedicalLeave / 100) * employmentCost },\n            { \"Severance Cost\", (pricingRules.SeveranceCost / 100) * employmentCost },\n\n        };\n        decimal hRSupportAmount = Helpers.CalculateHRSupportAmount(pricingRules, employmentCost);\n        decimal payrollProcessingFee = Helpers.CalculatePayrollProcessingFee(pricingRules, employmentCost);\n\n        employerCostElements.Add(\"HR Support\", hRSupportAmount);\n        employerCostElements.Add(\"Payroll Processing Fee\", payrollProcessingFee);\n\n        // Special Prices\n        var specialPricesPercentage = pricingRules.SpecialPricesPercentage ?? 0;\n        var specialPricesNominal = pricingRules.SpecialPricesNominal ?? 0;\n\n        var specialPricesByPercentage = specialPricesPercentage / 100 * grossSalary;\n        var specialPricesByNominal = specialPricesNominal * 12;\n\n        var specialPrices = specialPricesByPercentage + specialPricesByNominal;\n        employerCostElements.Add(\"Special Prices\", specialPrices);\n\n        //One Off Costs\n        var oneOffOnboardingPercentage = pricingRules.OneOffOnboardingFeePercentage ?? 0;\n        var oneOffOnboardingNominal = pricingRules.OneOffOnboardingFeeNominal ?? 0;\n\n        var oneOffOnboardingByPercentage = oneOffOnboardingPercentage / 100 * annualSalary;\n        var oneOffOnboardingByNominal = oneOffOnboardingNominal;\n\n        var oneOffOnboardingCost = oneOffOnboardingByPercentage + oneOffOnboardingByNominal;\n\n        var oneOffOffboardingPercentage = pricingRules.OneOffOffboardingFeePercentage ?? 0;\n        var oneOffOffboardingNominal = pricingRules.OneOffOffboardingFeeNominal ?? 0;\n\n        var oneOffOffboardingByPercentage = oneOffOffboardingPercentage / 100 * annualSalary;\n        var oneOffOffboardingByNominal = oneOffOffboardingNominal;\n\n        var oneOffOffboardingCost = oneOffOffboardingByPercentage + oneOffOffboardingByNominal;\n\n        var employerCost = employerCostElements.Values.Sum();\n\n        //AdditionalPayments\n\n        var additonalPayments = new Dictionary<string, decimal>\n        {\n            {\"One Off Onboarding\", oneOffOnboardingCost },\n            {\"One Off Offboarding\", oneOffOffboardingCost  }\n        };\n\n        IDictionary<string, decimal> allowances = new Dictionary<string, decimal>();\n        foreach (var x in command.Allowances) allowances.Add(x.Key, x.Value);\n\n        total += employerCost + grossSalary;\n\n        //PlatformFee\n        decimal platformFeeInLocalCurrency = Helpers.CalculatePlatformFee(total, pricingRules, 1);\n        \n\n        var costs = new Dictionary<string, IDictionary<string, decimal>>\n        {\n            { \"Employer Cost\", employerCostElements },\n            { \"Additional Payments\", additonalPayments },\n            { \"Gross Salary\", grossSalaryElements }\n        };\n\n        IDictionary<string, decimal> tenantSpecificCalculation = new Dictionary<string, decimal>();\n        if (calculator != null)\n        {\n            bool isRecalculatedPrice = command.Metadata.ContainsKey(\"RecalculatedPrice\");\n            var monthlyTotalCost = total / 12;\n            tenantSpecificCalculation = calculator.CalculateAsync(_httpService, command.Metadata[\"tenant-id\"].ToString(), IsoCode, pricingRules, command.CorrelationId, monthlyTotalCost, isRecalculatedPrice).Result;\n            if (!costs.ContainsKey(\"Tenant Costs\")) costs.Add(\"Tenant Costs\", tenantSpecificCalculation);\n        }\n\n        total += platformFeeInLocalCurrency;\n\n        var costsThatAffectDeposit = new List<decimal>\n        {\n            platformFeeInLocalCurrency\n        };\n        foreach (var cost in grossSalaryElements)\n            costsThatAffectDeposit.Add(cost.Value);\n        foreach (var cost in employerCostElements)\n            costsThatAffectDeposit.Add(cost.Value);\n        foreach (var cost in insuranceCosts.Where(x => insuranceBool[x.Key]))\n            costsThatAffectDeposit.Add(cost.Value);\n        foreach (var cost in tenantSpecificCalculation)\n            costsThatAffectDeposit.Add(cost.Value);\n\n        var deposit = pricingRules.DepositFactor <= 0 ? 0 : Helpers.CalculateDeposit(pricingRules, costsThatAffectDeposit.Sum());\n\n        var depositRounded = pricingRules.DepositFactor <= 0 ? 0 : Helpers.CalculateRoundedDeposit(pricingRules, costsThatAffectDeposit);\n\n        return new PriceCalculatedV6(\n            Currency, \n            command.ToCurrencyIsoCode,\n            IsoCode,\n            command.OrganisationId, \n            total, \n            grossSalary,\n            employerCost,  \n            platformFeeInLocalCurrency, \n            platformFeeInLocalCurrency, \n            deposit, \n            depositRounded, \n            holidayCost,\n            costs,\n            command.Allowances, \n            command.OneOffDataAmount,\n            command.VestingDataAmount, \n            command.VestingDataCliffMonths,\n            command.VestingDataTotalMonths,\n            remundoSponsorshipSelected: false, \n            dependentSponsorshipSelected: false, \n            dependents: 0,\n            insuranceBool, \n            employeePermitFees: new Dictionary<string, decimal>(),\n            insuranceCosts,\n            dependentPermitFees: new Dictionary<string, decimal>(),\n            dependentInsuranceFees: new Dictionary<string, decimal>(),\n            command.Metadata);\n    }\n\n    private decimal CalculateSigningBonusCost(CalculatePriceSpain commandInEur, PriceCalculatedV2 evt, PricingRules pricingRules, decimal exchangeRateEurToUSD)\n    {   \n        //Command with one off salary added to salary\n        var commandCopy = new CalculatePriceSpain(commandInEur);\n        commandCopy.AnnualSalary += commandInEur.OneOffDataAmount;\n        var evtWithSigningBonus = CalculateLocalCosts(commandCopy, pricingRules, exchangeRateEurToUSD);\n        return evtWithSigningBonus.TotalCost - evt.TotalCost;\n    }\n\n    private decimal CalculateVestingCost(CalculatePriceSpain commandInEur, PriceCalculatedV2 evt, PricingRules pricingRules, decimal exchangeRateEurToUSD)\n    {\n        //Calculate Vesting Bonus Costs\n        var commandCopy = new CalculatePriceSpain(commandInEur);\n        if (commandCopy.VestingDataTotalMonths >= commandCopy.VestingDataCliffMonths)\n        {\n            int numberOfPayments = (int)Math.Ceiling(commandInEur.VestingDataTotalMonths / commandInEur.VestingDataCliffMonths);\n            commandCopy.AnnualSalary += (commandInEur.VestingDataAmount / numberOfPayments);\n        }\n        var evtWithVestingBonus = CalculateLocalCosts(commandCopy, pricingRules, exchangeRateEurToUSD);\n        return evtWithVestingBonus.TotalCost - evt.TotalCost;\n    }\n\n    private decimal CalculateSigningBonusCostV2(CalculatePriceSpain commandInEur, PriceCalculatedV6 evt, PricingRules pricingRules, decimal exchangeRateEurToUSD, decimal medicalInsuranceExchangeRate, decimal dentalInsuranceExchangeRate, ICostsCalculator calculator)\n    {   \n        //Command with one off salary added to salary\n        var commandCopy = new CalculatePriceSpain(commandInEur);\n        commandCopy.AnnualSalary += commandInEur.OneOffDataAmount;\n        var evtWithOneOffBonus = CalculateLocalCostsV2(commandCopy, pricingRules, exchangeRateEurToUSD, medicalInsuranceExchangeRate, dentalInsuranceExchangeRate, calculator);\n        return evtWithOneOffBonus.TotalCost - evt.TotalCost;\n    }\n\n    private decimal CalculateVestingCostV2(CalculatePriceSpain commandInEur, PriceCalculatedV6 evt, PricingRules pricingRules, decimal exchangeRateEurToUSD, decimal medicalInsuranceExchangeRate, decimal dentalInsuranceExchangeRate, ICostsCalculator calculator)\n    {\n        //Calculate Vesting Bonus Costs\n        var commandCopy = new CalculatePriceSpain(commandInEur);\n        if (commandCopy.VestingDataTotalMonths >= commandCopy.VestingDataCliffMonths)\n        {\n            decimal numberOfPayments = commandInEur.VestingDataTotalMonths / commandInEur.VestingDataCliffMonths;\n            commandCopy.AnnualSalary += (commandInEur.VestingDataAmount / numberOfPayments);\n        }\n        var evtWithVestingBonus = CalculateLocalCostsV2(commandCopy, pricingRules, exchangeRateEurToUSD, medicalInsuranceExchangeRate, dentalInsuranceExchangeRate, calculator);\n        return evtWithVestingBonus.TotalCost - evt.TotalCost;\n    }\n\n    private static decimal CalculateDeposit(decimal total)\n    {\n        decimal monthlyTotal = total / 12;\n        return monthlyTotal * (_pricingRules?.DepositFactor ?? 1.5m);\n    }\n\n    private static decimal CalculateHolidayCost(decimal grossSalary)\n    {\n        if (grossSalary > 100000)\n        {\n            return (grossSalary * 0) / 100;\n        }\n\n        return 0;\n    }\n\n\n    #region Getters\n\n    private static Task<decimal> GetExchangeRateAsync(string fromCurrency, string toCurrency, IHttpService httpService)\n    {\n        return httpService.GetAsync<decimal>($\"api/currencies/exchange-rates/{fromCurrency}/{toCurrency}\");"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Spain.cs\n// service: src\ncommandCopy.AnnualSalary += commandInEur.OneOffDataAmount;\n        var evtWithOneOffBonus = CalculateLocalCostsV2(commandCopy, pricingRules, exchangeRateEurToUSD, medicalInsuranceExchangeRate, dentalInsuranceExchangeRate, calculator);\n        return evtWithOneOffBonus.TotalCost - evt.TotalCost;\n    }\n\n    private decimal CalculateVestingCostV2(CalculatePriceSpain commandInEur, PriceCalculatedV6 evt, PricingRules pricingRules, decimal exchangeRateEurToUSD, decimal medicalInsuranceExchangeRate, decimal dentalInsuranceExchangeRate, ICostsCalculator calculator)\n    {\n        //Calculate Vesting Bonus Costs\n        var commandCopy = new CalculatePriceSpain(commandInEur);\n        if (commandCopy.VestingDataTotalMonths >= commandCopy.VestingDataCliffMonths)\n        {\n            decimal numberOfPayments = commandInEur.VestingDataTotalMonths / commandInEur.VestingDataCliffMonths;\n            commandCopy.AnnualSalary += (commandInEur.VestingDataAmount / numberOfPayments);\n        }\n        var evtWithVestingBonus = CalculateLocalCostsV2(commandCopy, pricingRules, exchangeRateEurToUSD, medicalInsuranceExchangeRate, dentalInsuranceExchangeRate, calculator);\n        return evtWithVestingBonus.TotalCost - evt.TotalCost;\n    }\n\n    private static decimal CalculateDeposit(decimal total)\n    {\n        decimal monthlyTotal = total / 12;\n        return monthlyTotal * (_pricingRules?.DepositFactor ?? 1.5m);\n    }\n\n    private static decimal CalculateHolidayCost(decimal grossSalary)\n    {\n        if (grossSalary > 100000)\n        {\n            return (grossSalary * 0) / 100;\n        }\n\n        return 0;\n    }\n\n\n    #region Getters\n\n    private static Task<decimal> GetExchangeRateAsync(string fromCurrency, string toCurrency, IHttpService httpService)\n    {\n        return httpService.GetAsync<decimal>($\"api/currencies/exchange-rates/{fromCurrency}/{toCurrency}\");\n    }\n\n    private static Task<PricingRules> GetPricingRules(string tenantId, string countryIsoCode, string? orgId, IHttpService httpService)\n    {\n        return httpService.GetAsync<PricingRules>($\"api/{tenantId}/reference-data/pricingrules/employee/{countryIsoCode}/organisations/{orgId ?? \"null\"}\");\n    }\n\n    #endregion\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Switzerland.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Domain.Commands;\nusing Remundo.Pricing.Domain.Utils;\nusing Remundo.Pricing.Domain.Models;\n\nnamespace Remundo.Pricing.Domain.Aggregates;\n\npublic class Switzerland : PricingEngineBase\n{\n    public override string AggregateId => _correlationId;\n    private string _correlationId;\n\n    private const string IsoCode = \"CH\";\n    private const string Currency = \"CHF\";\n\n    private Price _price;\n\n    public Switzerland()\n    {\n        RegisterTransition<PriceCalculatedV7>(Apply);\n\n    }\n\n    private void Apply(PriceCalculatedV7 evt)\n    {\n        _correlationId = evt.Metadata[\"$correlationId\"];\n\n        _price = new Price(Currency, IsoCode, evt.ConvertedCurrency, evt.OrganisationId, evt.Costs[\"Gross Salary\"][\"Base Salary\"],\n           evt.PlatformFeeInEuros, evt.PlatformFeeInLocalCurrency, evt.Deposit, evt.AdditionalHolidayCost,\n            evt.SigningBonusAmount, evt.VestingBonusAmount, evt.VestingBonusCliffMonths, evt.VestingBonusTotalMonths,\n            evt.SelectedInsurances,\n            evt.Allowances);\n    }\n\n    public static Switzerland Create()\n    {\n        return new Switzerland();\n    }\n\n    public void CalculatePrice(CalculatePriceSwitzerland command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new SwitzerlandEmployerCostCalculator(), calculator);\n        CalculatePriceInternal(command, cxt);\n    }\n\n    public void RecalculatePrice(RecalculatePrice command, IHttpService httpService, ICostsCalculator calculator)\n    {\n        var cxt = Helpers.CreateContext(IsoCode, Currency, _price, command.SelectedInsuranceDetails, httpService, new SwitzerlandEmployerCostCalculator(), calculator);\n        RecalculatePriceInternal(command, cxt);\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/UnitedKingdom.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Services;\n\nnamespace Remundo.Pricing.Domain.Aggregates;\n\npublic class UnitedKingdom : England\n{\n    public override string IsoCode => \"GB\";\n\n    public new static UnitedKingdom Create()\n    {\n        return new UnitedKingdom();\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Entities/Price.cs\n// service: src\n﻿\nusing Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\n\nnamespace Remundo.Pricing.Domain.Aggregates.Entities;\n\npublic class Price\n{\n    public string LocalCurrency { get; }\n    public string IsoCode { get; }\n    public string ToCurrencyIsoCode { get; }\n    public decimal TotalCost { get; }\n    public decimal AnnualSalary { get; }\n    public decimal EmployerCost { get; }\n    public decimal PlatformFeeInEuros { get; }\n    public decimal PlatformFeeInLocalCurrency { get; }\n    public decimal Deposit { get; }\n    public decimal AdditionalHolidayCost { get; }\n    public IDictionary<string, decimal> EmployerCostElements { get; }\n    public IDictionary<string, decimal> GrossSalaryElements { get; }\n    public IDictionary<string, decimal> Allowances { get; } = new Dictionary<string, decimal>();\n    public decimal OneOffDataAmount { get; }\n    public decimal VestingDataAmount { get; }\n    public decimal VestingDataCliffMonths { get; }\n    public decimal VestingDataTotalMonths { get; }\n    public bool? MedicalInsuranceSelected { get; }\n    public bool? DentalInsuranceSelected { get; }\n    public bool? DeathInsuranceSelected { get; }\n    public string? OrganisationId { get; }\n    public string? ContractTerm { get; }\n    public IDictionary<string, bool>? SelectedInsurances { get; }\n    public Price(string localCurrency, string isoCode, string toCurrencyIsoCode, decimal annualSalary, decimal platformFeeInEuros,\n        decimal platformFeeInLocalCurrency, decimal deposit,\n        decimal additionalHolidayCost,\n        decimal oneOffDataAmount, decimal vestingDataAmount, decimal vestingDataCliffMonths, decimal vestingDataTotalMonths,\n        bool? medicalInsuranceSelected, bool? dentalInsurance, bool? deathInsurance, IDictionary<string, decimal> allowances)\n    {\n        LocalCurrency = localCurrency;\n        IsoCode = isoCode;\n        ToCurrencyIsoCode = toCurrencyIsoCode;\n        AnnualSalary = annualSalary;\n        PlatformFeeInEuros = platformFeeInEuros;\n        PlatformFeeInLocalCurrency = platformFeeInLocalCurrency;\n        Deposit = deposit;\n        MedicalInsuranceSelected = medicalInsuranceSelected;\n        AdditionalHolidayCost = additionalHolidayCost;\n        OneOffDataAmount = oneOffDataAmount;\n        VestingDataAmount = vestingDataAmount;\n        VestingDataCliffMonths = vestingDataCliffMonths;\n        VestingDataTotalMonths = vestingDataTotalMonths;\n        Allowances = allowances;\n        DentalInsuranceSelected = dentalInsurance;\n        DeathInsuranceSelected = deathInsurance;\n        SelectedInsurances = new Dictionary<string, bool>();\n    }\n\n    public Price(string localCurrency, string isoCode, string toCurrencyIsoCode, string orgId, decimal annualSalary, decimal platformFeeInEuros,\n        decimal platformFeeInLocalCurrency, decimal deposit,\n        decimal additionalHolidayCost,\n        decimal oneOffDataAmount, decimal vestingDataAmount, decimal vestingDataCliffMonths, decimal vestingDataTotalMonths,\n        IDictionary<string, bool>? insurances, IDictionary<string, decimal> allowances)\n    {\n        LocalCurrency = localCurrency;\n        IsoCode = isoCode;\n        ToCurrencyIsoCode = toCurrencyIsoCode;\n        AnnualSalary = annualSalary;\n        PlatformFeeInEuros = platformFeeInEuros;\n        PlatformFeeInLocalCurrency = platformFeeInLocalCurrency;\n        Deposit = deposit;\n        AdditionalHolidayCost = additionalHolidayCost;\n        OneOffDataAmount = oneOffDataAmount;\n        VestingDataAmount = vestingDataAmount;\n        VestingDataCliffMonths = vestingDataCliffMonths;\n        VestingDataTotalMonths = vestingDataTotalMonths;\n        Allowances = allowances;\n        MedicalInsuranceSelected = GetOldInsuranceKey(insurances, \"MedicalInsurance\");\n        DentalInsuranceSelected = GetOldInsuranceKey(insurances, \"DentalInsurance\");\n        DeathInsuranceSelected = GetOldInsuranceKey(insurances, \"DeathInsurance\", \"LifeInsurance\");\n        OrganisationId = orgId;\n        SelectedInsurances = ConvertInsuranceKeys(insurances);\n    }\n\n    public Price(string localCurrency, string isoCode, string toCurrencyIsoCode, string orgId, decimal annualSalary, decimal platformFeeInEuros,\n        decimal platformFeeInLocalCurrency, decimal deposit,\n        decimal additionalHolidayCost,\n        decimal oneOffDataAmount, decimal vestingDataAmount, decimal vestingDataCliffMonths, decimal vestingDataTotalMonths,\n        IDictionary<string, bool> insurances, IDictionary<string, decimal> allowances, string contractTerm)\n    {\n        LocalCurrency = localCurrency;\n        IsoCode = isoCode;\n        ToCurrencyIsoCode = toCurrencyIsoCode;\n        AnnualSalary = annualSalary;\n        PlatformFeeInEuros = platformFeeInEuros;\n        PlatformFeeInLocalCurrency = platformFeeInLocalCurrency;\n        Deposit = deposit;\n        AdditionalHolidayCost = additionalHolidayCost;\n        OneOffDataAmount = oneOffDataAmount;\n        VestingDataAmount = vestingDataAmount;\n        VestingDataCliffMonths = vestingDataCliffMonths;\n        VestingDataTotalMonths = vestingDataTotalMonths;\n        Allowances = allowances;\n        MedicalInsuranceSelected = GetOldInsuranceKey(insurances, \"MedicalInsurance\");\n        DentalInsuranceSelected = GetOldInsuranceKey(insurances, \"DentalInsurance\");\n        DeathInsuranceSelected = GetOldInsuranceKey(insurances, \"DeathInsurance\", \"LifeInsurance\");\n        OrganisationId = orgId;\n        ContractTerm = contractTerm;\n    }\n\n    private bool GetOldInsuranceKey(IDictionary<string, bool> keyValuePairs, params string[] keys)\n    {\n        foreach(var key in keys)\n        {\n            if (keyValuePairs.ContainsKey(key))\n            {\n                return keyValuePairs[key];\n            }\n            else if(keyValuePairs.ContainsKey(key + \"Selected\"))\n            {\n                return keyValuePairs[key + \"Selected\"];\n            }\n        }\n        return false;\n    }\n\n    private static IDictionary<string, bool> ConvertInsuranceKeys(IDictionary<string, bool>? insurances)\n    {\n        if (insurances == null) return new Dictionary<string, bool>();\n        \n        if (insurances.Keys.Any(k => k.Contains(\"_\"))) return insurances;\n\n        var keyMap = new Dictionary<string, string>\n        {\n            { \"MedicalInsurance\", \"Standard_MedicalInsurance_WorkerOnly\" },\n            { \"DentalInsurance\", \"Standard_DentalInsurance_WorkerOnly\" },\n            { \"DeathInsurance\", \"DeathInsurance\" }\n        };\n\n        return insurances.ToDictionary(\n            kvp =>\n            {\n                return keyMap.TryGetValue(kvp.Key, out var mappedKey) ? mappedKey : throw new Exception(\"Cannot convert key to use new template key in PriceCalculated\");\n            },\n            kvp => kvp.Value\n        );\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Aggregates/Entities/PricingRules.cs\n// service: src\n﻿\n\nnamespace Remundo.Pricing.Domain.Aggregates.Entities\n{\n    public class PricingRules\n    {\n        public decimal? PlatformFee { get; set; }\n        public decimal ProfessionalIndemnity { get; set; }\n        public decimal OccupationalHealthAndSafety { get; set; }\n        public decimal MedicalLeave { get; set; }\n        public decimal SeveranceCost { get; set; }\n        public decimal? HRSupportAmount { get; set; }\n        public decimal? HRSupportAmountPercentage { get; set; }\n        public decimal? PayrollProcessingFee { get; set; }\n        public decimal? PayrollProcessingFeePercentage { get; set; }\n        public decimal? SpecialPricesPercentage { get; set; }\n        public decimal? SpecialPricesNominal { get; set; }\n        public decimal? OneOffOnboardingFeePercentage { get; set; }\n        public decimal? OneOffOnboardingFeeNominal { get; set; }\n        public decimal? OneOffOffboardingFeePercentage { get; set; }\n        public decimal? OneOffOffboardingFeeNominal { get; set; }\n        public decimal? DepositFactor { get; set; }\n        public Insurance PremiumMedicalInsurance { get; set; }\n        public Insurance DentalInsurance { get; set; }\n        public decimal? PlatformFeePercentage { get; set; }\n        public decimal? MSPFee { get; set; }\n\n    }\n}\npublic class Insurance\n{\n    public decimal? Value { get; set; }\n    public string? Currency { get; set; }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Commands/CalculatePriceAustria.cs\n// service: src\n﻿namespace Remundo.Pricing.Domain.Commands;\n\npublic class CalculatePriceAustria : CalculatePriceBase\n{\n    public CalculatePriceAustria() : base() { }\n    public CalculatePriceAustria(CalculatePriceAustria command) : base(command)\n    {\n        CorrelationId = command.CorrelationId;\n        OneOffDataAmount = command.OneOffDataAmount;\n        VestingDataAmount = command.VestingDataAmount;\n        VestingDataCliffMonths = command.VestingDataCliffMonths;\n        VestingDataTotalMonths = command.VestingDataTotalMonths;\n        MedicalInsuranceSelected = command.MedicalInsuranceSelected;\n        DentalInsuranceSelected = command.DentalInsuranceSelected;\n        DeathInsuranceSelected = command.DeathInsuranceSelected;\n        AnnualSalary = command.AnnualSalary;\n        ToCurrencyIsoCode = command.ToCurrencyIsoCode;\n        Allowances = command.Allowances;\n        OrganisationId = command.OrganisationId;\n        Metadata = command.Metadata;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Commands/CalculatePriceBase.cs\n// service: src\n﻿using Evento;\nusing Remundo.Pricing.Domain.Models;\n\nnamespace Remundo.Pricing.Domain.Commands;\n\npublic class CalculatePriceBase : Command\n{\n    public string CorrelationId { get; set; }\n    public decimal AnnualSalary { get; set; }\n    public string ToCurrencyIsoCode { get; set; }\n    public bool MedicalInsuranceSelected { get; set; }\n    public bool DentalInsuranceSelected { get; set; }\n    public bool DeathInsuranceSelected { get; set; }\n    public IDictionary<string, decimal> Allowances { get; set; } = new Dictionary<string, decimal>();\n    public decimal OneOffDataAmount { get; set; }\n    public decimal VestingDataAmount { get; set; }\n    public decimal VestingDataCliffMonths { get; set; }\n    public decimal VestingDataTotalMonths { get; set; }\n    public IDictionary<string, bool>? SelectedInsuranceDetails { get; set; }\n    public string? OrganisationId { get; set; }\n    public string TenantId { get; set; }\n    public IDictionary<string, string> Metadata { get; set; }\n\n    public CalculatePriceBase() { }\n    public CalculatePriceBase(CalculatePriceBase command)\n    {\n        CorrelationId = command.CorrelationId;\n        OneOffDataAmount = command.OneOffDataAmount;\n        VestingDataAmount = command.VestingDataAmount;\n        VestingDataCliffMonths = command.VestingDataCliffMonths;\n        VestingDataTotalMonths = command.VestingDataTotalMonths;\n        MedicalInsuranceSelected = command.MedicalInsuranceSelected;\n        DentalInsuranceSelected = command.DentalInsuranceSelected;\n        DeathInsuranceSelected = command.DeathInsuranceSelected;\n        AnnualSalary = command.AnnualSalary;\n        ToCurrencyIsoCode = command.ToCurrencyIsoCode;\n        Allowances = command.Allowances;\n        Metadata = command.Metadata;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Commands/CalculatePriceBelgium.cs\n// service: src\n﻿\nnamespace Remundo.Pricing.Domain.Commands;\n\npublic class CalculatePriceBelgium : CalculatePriceBase\n{\n    public CalculatePriceBelgium() : base() { }\n    public CalculatePriceBelgium(CalculatePriceBelgium command) : base(command) { }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Commands/CalculatePriceBulgaria.cs\n// service: src\n﻿\nnamespace Remundo.Pricing.Domain.Commands;\n\npublic class CalculatePriceBulgaria : CalculatePriceBase\n{\n   \n    public CalculatePriceBulgaria() : base() { }\n\n    public CalculatePriceBulgaria(CalculatePriceBulgaria command) : base(command) { }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Commands/CalculatePriceCroatia.cs\n// service: src\n﻿\nnamespace Remundo.Pricing.Domain.Commands;\n\npublic class CalculatePriceCroatia : CalculatePriceBase\n{\n    public CalculatePriceCroatia() : base() { }\n    public CalculatePriceCroatia(CalculatePriceCroatia command) : base(command) { }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Commands/CalculatePriceCyprus.cs\n// service: src\n﻿\nnamespace Remundo.Pricing.Domain.Commands;\n\npublic class CalculatePriceCyprus : CalculatePriceBase\n{\n    public CalculatePriceCyprus() : base() { }\n    public CalculatePriceCyprus(CalculatePriceCyprus command) : base(command) { }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Commands/CalculatePriceCzechRepublic.cs\n// service: src\n﻿\nusing Evento;\n\nnamespace Remundo.Pricing.Domain.Commands;\n\npublic class CalculatePriceCzechRepublic : CalculatePriceBase\n{\n    public CalculatePriceCzechRepublic() : base() { }\n\n    public CalculatePriceCzechRepublic(CalculatePriceCzechRepublic command) : base(command) { }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Commands/CalculatePriceDefault.cs\n// service: src\n﻿\nnamespace Remundo.Pricing.Domain.Commands;\n\npublic class CalculatePriceDefault : CalculatePriceBase\n{\n    public decimal AnnualAdditionalSalary { get; set; }\n    public string IsoCode { get; set; }\n    public string LocalCurrencyIsoCode { get; set; }\n   \n    public CalculatePriceDefault() : base() { }\n\n    public CalculatePriceDefault(CalculatePriceDefault command) : base(command)\n    {\n        AnnualAdditionalSalary = command.AnnualAdditionalSalary;\n        IsoCode = command.IsoCode;\n        LocalCurrencyIsoCode = command.LocalCurrencyIsoCode;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Commands/CalculatePriceDenmark.cs\n// service: src\n﻿namespace Remundo.Pricing.Domain.Commands;\n\npublic class CalculatePriceDenmark : CalculatePriceBase\n{\n    public CalculatePriceDenmark() : base() { }\n    public CalculatePriceDenmark(CalculatePriceDenmark command) : base(command)\n    {\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Commands/CalculatePriceEngland.cs\n// service: src\n﻿namespace Remundo.Pricing.Domain.Commands;\n\npublic class CalculatePriceEngland : CalculatePriceBase\n{\n    public CalculatePriceEngland(): base() {}\n    public CalculatePriceEngland(CalculatePriceEngland command):base(command) { }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Commands/CalculatePriceFrance.cs\n// service: src\n﻿namespace Remundo.Pricing.Domain.Commands;\n\npublic class CalculatePriceFrance : CalculatePriceBase\n{\n    public CalculatePriceFrance(): base() {}\n    public CalculatePriceFrance(CalculatePriceFrance command): base(command) { }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Commands/CalculatePriceGermany.cs\n// service: src\n﻿\nnamespace Remundo.Pricing.Domain.Commands;\n\npublic class CalculatePriceGermany : CalculatePriceBase\n{\n    public CalculatePriceGermany(): base() { }\n    public CalculatePriceGermany(CalculatePriceGermany command) : base(command) { }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Commands/CalculatePriceIreland.cs\n// service: src\n﻿namespace Remundo.Pricing.Domain.Commands;\n\npublic class CalculatePriceIreland : CalculatePriceBase\n{\n    public CalculatePriceIreland(): base()\n    {\n    }\n    public CalculatePriceIreland(CalculatePriceIreland command):base(command)\n    {\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Commands/CalculatePriceItaly.cs\n// service: src\n﻿using Evento;\n\nnamespace Remundo.Pricing.Domain.Commands;\n\npublic class CalculatePriceItaly : CalculatePriceBase\n{\n    public string ContractType { get; set; } = \"Ordinary\";\n    public string ContractTerm { get; set; } \n\n    public CalculatePriceItaly() : base() { }\n\n    public CalculatePriceItaly(CalculatePriceItaly command) : base(command)\n    {\n        ContractType = command.ContractType;\n        ContractTerm = command.ContractTerm;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Commands/CalculatePriceLuxembourg.cs\n// service: src\n﻿namespace Remundo.Pricing.Domain.Commands;\n\npublic class CalculatePriceLuxembourg : CalculatePriceBase\n{\n    public CalculatePriceLuxembourg(): base()\n    {\n    }\n    public CalculatePriceLuxembourg(CalculatePriceLuxembourg command): base(command)\n    {\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Commands/CalculatePriceNetherlands.cs\n// service: src\n﻿namespace Remundo.Pricing.Domain.Commands;\n\npublic class CalculatePriceNetherlands : CalculatePriceBase\n{\n    public string ContractTerm { get; set; }\n    public CalculatePriceNetherlands() : base() { }\n    public CalculatePriceNetherlands(CalculatePriceNetherlands command) : base(command)\n    {\n        ContractTerm = command.ContractTerm;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Commands/CalculatePricePortugal.cs\n// service: src\n﻿namespace Remundo.Pricing.Domain.Commands;\n\npublic class CalculatePricePortugal : CalculatePriceBase\n{\n    public CalculatePricePortugal() : base() {}\n\n    public CalculatePricePortugal(CalculatePricePortugal command) : base(command) {}\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Commands/CalculatePriceSlovakia.cs\n// service: src\n﻿using Evento;\n\nnamespace Remundo.Pricing.Domain.Commands\n{\n    public class CalculatePriceSlovakia : CalculatePriceBase\n    {\n        public CalculatePriceSlovakia(): base()\n        {\n        }\n\n        public CalculatePriceSlovakia(CalculatePriceSlovakia command): base(command)\n        {\n        }\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Commands/CalculatePriceSpain.cs\n// service: src\n﻿namespace Remundo.Pricing.Domain.Commands;\n\npublic class CalculatePriceSpain : CalculatePriceBase\n{\n    public CalculatePriceSpain(): base()\n    {\n    }\n\n    public CalculatePriceSpain(CalculatePriceSpain command): base(command)\n    {\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Commands/CalculatePriceSwitzerland.cs\n// service: src\n﻿namespace Remundo.Pricing.Domain.Commands;\n\npublic class CalculatePriceSwitzerland : CalculatePriceBase\n{\n    public CalculatePriceSwitzerland() : base() { }\n    public CalculatePriceSwitzerland(CalculatePriceSwitzerland command) : base(command)\n    {\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Commands/CalculatePriceUnitedKingdom.cs\n// service: src\n﻿namespace Remundo.Pricing.Domain.Commands\n{\n    public class CalculatePriceUnitedKingdom: CalculatePriceEngland\n    {\n       \n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Commands/RecalculatePrice.cs\n// service: src\n﻿using Evento;\nusing Remundo.Pricing.Domain.Models;\n\nnamespace Remundo.Pricing.Domain.Commands\n{\n    public class RecalculatePrice : Command\n    {\n        public string PriceId { get; set; }\n        public string? OrganisationId { get; set; }\n        public string? ToCurrencyIsoCode { get; set; }\n        public string? LocalCurrency { get; set; }\n        public string? IsoCode { get; set; }\n        public decimal? AnnualSalary { get; set; }\n        public bool? LifeInsurance { get; set; }\n        public bool? MedicalInsurance { get; set; }\n        public bool? DisabilityInsurance { get; set; }\n        public bool? DentalInsuranceSelected { get; set; }\n        public bool? DeathInsuranceSelected { get; set; }\n        public decimal? OneOffDataAmount { get; set; }\n        public decimal? VestingDataAmount { get; set; }\n        public int? VestingDataCliffMonths { get; set; }\n        public int? VestingDataTotalMonths { get; set; }\n        public IDictionary<string, bool>? SelectedInsuranceDetails { get; set; }\n        public Dictionary<string, decimal>? Allowances { get; set; }\n        public string? ContractTerm { get; set; }\n        public string TenantId { get; set; }\n        public IDictionary<string, string> Metadata { get; set; }\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Models/CountryPricingContext.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Services;\n\nnamespace Remundo.Pricing.Domain.Models;\n\npublic class CountryPricingContext\n{\n    public string CountryIsoCode { get; set; } = string.Empty;\n    public string LocalCurrency { get; set; } = string.Empty;\n    public Price? Price { get; set; }  \n\n    public string CountryCodeOnly => CountryIsoCode.Contains('-') ? CountryIsoCode.Split('-')[0] : CountryIsoCode;\n    public string? RegionCodeOnly => CountryIsoCode.Contains('-') ? CountryIsoCode.Split('-')[1] : null;\n\n    public IDictionary<string, bool> SelectedInsurances { get; set; }\n    public IDictionary<string, decimal> InsuranceCosts { get; set; }\n\n    public IHttpService HttpService { get; set; }\n    public IEmployerCostCalculator EmployerCostCalculator { get; set; }\n    public ICostsCalculator? TenantCostsCalculator { get; set; }\n\n    public bool IncludeAdditionalHolidayCost { get; set; }\n    public string? ContractType { get; set; }\n    public string? ContractTerm { get; set; }\n    public bool DCoEIncludesInsurance { get; set; } = true;\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Models/EmployerCostInfo.cs\n// service: src\n﻿\nnamespace Remundo.Pricing.Domain.Models;\n\npublic class EmployerCostInfo\n{\n    public decimal GrossSalary { get; private set; }\n    public decimal AnnualSalary { get; private set; }\n\n    public string? ContractType { get; private set; }\n    public string? ContractTerm { get; private set; }\n\n    private EmployerCostInfo() { }\n\n    public static EmployerCostInfo Create(decimal grossSalary, decimal annualSalary, CountryPricingContext cxt)\n    {\n        return new()\n        {\n            GrossSalary = grossSalary,\n            AnnualSalary = annualSalary,\n            ContractType = cxt.ContractType,\n            ContractTerm = cxt.ContractTerm,\n        };\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Models/EorInstance.cs\n// service: src\n﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Remundo.Pricing.Domain.Models\n{\n    public class EorInstance\n    {\n        public string OrganisationId { get; set; }\n        public string CurrencyIsoCode { get; set; }\n        public string Country { get; set; }\n        //Pricing Fields\n        public decimal AnnualSalary { get; set; }\n        public decimal TotalMonthlyGrossSalary { get; set; }\n        public IDictionary<string, decimal> MonthlyGrossSalaryElements { get; set; }\n        public IDictionary<string, decimal> GrossSalaryElements { get; set; }\n        public decimal TotalMonthlyEmployerCosts { get; set; }\n        public IDictionary<string, decimal> MonthlyEmployerCostElements { get; set; }\n        public IDictionary<string, decimal> EmployerCostElements { get; set; }\n        public decimal TotalMonthlyAllowances { get; set; }\n        public IDictionary<string, decimal> MonthlyAllowanceElements { get; set; }\n        public IDictionary<string, decimal> EmployeePermitFees { get; set; }\n        public decimal TotalEmployeePermitFees { get; set; }\n        public IDictionary<string, decimal> DependentPermitFees { get; set; }\n        public decimal TotalDependentPermitFees { get; set; }\n        public IDictionary<string, decimal> DependentInsuranceFees { get; set; }\n        public decimal TotalDependentInsuranceFees { get; set; }\n        public IDictionary<string, decimal> EmployeeInsuranceCosts { get; set; }\n        public IDictionary<string, decimal> MonthlyEmployeeInsuranceCosts { get; set; }\n        public IDictionary<string, bool> SelectedInsurances { get; set; }\n        public decimal TotalMonthlyTenantCosts { get; set; }\n        public IDictionary<string, decimal> MonthlyTenantCosts { get; set; }\n        public IDictionary<string, decimal> TenantCosts\n        {\n            get {\n                return MonthlyTenantCosts.Select(x=> new KeyValuePair<string, decimal> (x.Key, x.Value * 12)).ToDictionary(x=> x.Key, x => x.Value);\n            }\n        }\n        public IDictionary<string, decimal> MonthlyExtraCosts { get; set; }\n        public IDictionary<string, decimal> ExtraCosts\n        {\n            get\n            {\n                return MonthlyExtraCosts.Select(x => new KeyValuePair<string, decimal>(x.Key, x.Value * 12)).ToDictionary(x => x.Key, x => x.Value);\n            }\n        }\n        public decimal MonthlyPlatformFee { get; set; }\n        public decimal Deposit { get; set; }\n        public decimal SigningBonusAmount { get; set; }\n        public decimal VestingBonusAmount { get; set; }\n        public decimal VestingBonusCliffMonths { get; set; }\n        public decimal VestingBonusTotalMonths { get; set; }\n        public bool? DependentSponsorshipSelected { get; set; }\n        public bool? RemundoSponsorshipSelected { get; set; }\n        public int? Dependents { get; set; }\n        public IDictionary<string, decimal> AdditionalPayments { get; set; }\n        public decimal TotalMonthlyCost { get; set; }\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Models/ExchangeRates.cs\n// service: src\n﻿namespace Remundo.Pricing.Domain.Models;\n\npublic class ExchangeRates\n{\n    public decimal Medical { get; set; }\n    public decimal Dental { get; set; }\n    public decimal ToLocal { get; set; }\n    public decimal UsdToLocal { get; set; }\n    public decimal EURToLocal { get; set; }\n    public decimal ChosenToLocal { get; set; }\n\n    public ExchangeRates(decimal medical, decimal dental, decimal toLocal, decimal usdToLocal, decimal eURToLocal, decimal chosenToLocal)\n    {\n        Medical = medical;\n        Dental = dental;\n        ToLocal = toLocal;\n        UsdToLocal = usdToLocal;\n        EURToLocal = eURToLocal;\n        ChosenToLocal = chosenToLocal;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Models/InsuranceSelectionDetail.cs\n// service: src\n﻿namespace Remundo.Pricing.Domain.Models;\n\npublic class InsuranceSelectionDetail\n{\n    public bool Selected { get; set; }\n    public decimal Cost { get; set; } = 0;\n\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Models/TemplateInsurance.cs\n// service: src\n﻿namespace Remundo.Pricing.Domain.Models;\n\npublic class TemplateInsurance\n{\n    public string Id { get; set; }\n    public string TenantId { get; set; }\n    public string Name { get; set; }\n    public string SubmitterId { get; set; }\n    public DateTime SubmittedAt { get; set; }\n    public string? InternalDescription { get; set; }\n    public InsurancePrices? BasicInsurancePrices { get; set; }\n    public string? BasicInsuranceInfoTip { get; set; }\n    public string? BasicInsuranceDisclaimer { get; set; }\n    public HashSet<Attachment>? BasicInsuranceAttachments { get; set; }\n\n    public InsurancePrices? StandardInsurancePrices { get; set; }\n    public string? StandardInsuranceInfoTip { get; set; }\n    public string? StandardInsuranceDisclaimer { get; set; }\n    public HashSet<Attachment>? StandardInsuranceAttachments { get; set; }\n\n    public InsurancePrices? PremiumInsurancePrices { get; set; }\n    public string? PremiumInsuranceInfoTip { get; set; }\n    public string? PremiumInsuranceDisclaimer { get; set; }\n    public HashSet<Attachment>? PremiumInsuranceAttachments { get; set; }\n    public string Type { get; set; }\n    public bool HasAttachments { get; set; }\n    public bool Enabled { get; set; }\n    public ISet<string> AppliedCountries { get; set; }\n    public DateTime Applies { get; set; }\n}\n\n\npublic class InsurancePrices\n{\n    public IDictionary<CoverageTier, int> Medical { get; set; }\n    public IDictionary<CoverageTier, int>? Dental { get; set; }\n}\n\npublic class CoveragePrice\n{\n    public CoverageTier CoverageTier { get; set; }\n    public int Price { get; set; }\n}\n\npublic class Attachment\n{\n    public string FileName { get; set; }\n    public long Size { get; set; }\n}\n\npublic enum CoverageTier\n{\n    WorkerOnly,\n    WorkerAndSpouse,\n    WorkersFamily,\n    WorkerAndChildren\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Services/Amdocs.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Models;\n\nnamespace Remundo.Pricing.Domain.Services;\n\npublic class Amdocs : ICostsCalculator\n{\n    private static IHttpService _httpService;\n    private static string _tenantId;\n    private static string _countryIsoCode;\n    private static PricingRules _pricingRule;\n    private static string _eorInstanceId;\n    private static decimal _monthlyTotalCost;\n    private static bool _isRecalculatedPrice;\n\n    public async Task<IDictionary<string, decimal>> CalculateAsync(IHttpService httpService, string tenantId, string countryIsoCode,\n       PricingRules pricingRule, string eorInstanceId, decimal monthlyTotalCost, bool isRecalculatedPrice)\n    {\n        _httpService = httpService;\n        _tenantId = tenantId;\n        _countryIsoCode = countryIsoCode;\n        _pricingRule = pricingRule;\n        _eorInstanceId = eorInstanceId;\n        _monthlyTotalCost = monthlyTotalCost;\n        _isRecalculatedPrice = isRecalculatedPrice;\n\n        decimal payRate = await CalculatePayRateAsync(_tenantId, _countryIsoCode, _eorInstanceId, _isRecalculatedPrice, _httpService);\n        var tenantCosts = new Dictionary<string, decimal>()\n            {\n                {\"Pay Rate\", payRate },\n                {\"Platform Fee\", CalculatePlatformFee(payRate)},\n                {\"MSP Fee\", await CalculateMSPFeeAsync(_tenantId, _countryIsoCode, _eorInstanceId, _isRecalculatedPrice, _httpService) },\n            };\n        return tenantCosts;\n    }\n\n    private static async Task<decimal> CalculateMSPFeeAsync(\n        string tenantId, string countryIsoCode, string? eorInstanceId, bool isRecalculatedPrice, IHttpService httpService)\n    {\n        if (_pricingRule.MSPFee == null || _pricingRule.PlatformFeePercentage == null)\n        {\n            return 0m;\n        }\n\n        decimal payRate = await CalculatePayRateAsync(tenantId, countryIsoCode, eorInstanceId, isRecalculatedPrice, httpService);\n        decimal platformFee = CalculatePlatformFee(payRate);\n        decimal mspFactor = (100 - (decimal)_pricingRule.MSPFee) / 100;\n        decimal billRate = (payRate + platformFee) / mspFactor;\n        decimal mspFee = billRate - (payRate + platformFee);\n\n        return mspFee;\n    }\n\n    private static decimal CalculatePlatformFee( decimal payRate)\n    {\n        return _pricingRule.PlatformFeePercentage != null ? (decimal)_pricingRule.PlatformFeePercentage / 100 * payRate : 0;\n    }\n\n    private static async Task<decimal> CalculatePayRateAsync(string tenantId, string countryIsoCode, string? eorInstanceId, bool isRecalculatedPrice, IHttpService httpService)\n    {\n        int actualWorkingDays = await GetActualWorkingDaysAsync(tenantId, countryIsoCode, eorInstanceId, isRecalculatedPrice, httpService);\n        decimal payRate = _monthlyTotalCost * 12 / actualWorkingDays;\n\n        return payRate;\n    }\n\n    #region Getters\n    public static Task<int> GetActualWorkingDaysAsync(string tenantId, string countryIsoCode, string? eorInstanceId, bool isRecalculatedPrice, IHttpService httpService)\n    {\n        if (isRecalculatedPrice)\n        {\n            return httpService.GetAsync<int>($\"api/{tenantId}/workingdays?eorId={eorInstanceId}\").ContinueWith(x =>\n            {\n                if (x.Exception != null)\n                {\n                    throw x.Exception;\n                }\n                return x.Result;\n            });\n        }\n        else\n        {\n            return httpService.GetAsync<int>($\"api/{tenantId}/workingdays?country={countryIsoCode}&workertype=employee\").ContinueWith(x =>\n            {\n                if (x.Exception != null)\n                {\n                    throw x.Exception;\n                }\n                return x.Result;\n            });\n        }\n\n    }\n    #endregion\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Services/ICostsCalculator.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\n\nnamespace Remundo.Pricing.Domain.Services;\n\n/// <summary>\n/// This should calculate only additional costs for a given tenant\n/// TODO this method can be eventually used to split out calculations from the aggregate and better structure the code\n/// </summary>\npublic interface ICostsCalculator \n{\n    Task<IDictionary<string, decimal>> CalculateAsync(IHttpService httpService, string tenantId, string countryIsoCode, PricingRules pricingRule, string eorInstanceId, decimal monthlyTotalCost, bool isRecalculatedPrice);\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Services/IEmployerCostCalculator.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Models;\n\nnamespace Remundo.Pricing.Domain.Services;\n\npublic interface IEmployerCostCalculator\n{\n    IDictionary<string, decimal> CalculateEmployerCosts(EmployerCostInfo info);\n    IDictionary<string, decimal> CalculateNonStatutoryCosts(decimal directCostOfEmployment, PricingRules pricingRules);\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Services/IHttpService.cs\n// service: src\n﻿\nusing Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Models;\nusing System.Text.Json.Nodes;\n\nnamespace Remundo.Pricing.Domain.Services;\npublic interface IHttpService\n{\n    Task<T> GetAsync<T>(string path);\n    Task PostAsync(JsonObject obj);\n    Task<decimal> GetExchangeRateAsync(string from, string to);\n    PricingRules GetPricingRules(string tenantId, string isoCode, string orgId);\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Services/InsurancesCalculator.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Utils;\n\nnamespace Remundo.Pricing.Domain.Services;\n\ninternal static class InsurancesCalculator\n{\n    public static Dictionary<string, bool> Calculate(PricingRules pricingRules, bool medicalInsuranceSelected, bool dentalInsuranceSelected, bool deathInsuranceSelected, decimal exchangeRateEurToUsd,\n        decimal exchangeRateUsdToEur, decimal medicalInsuranceExchangeRate, decimal dentalInsuranceExchangeRate,\n        decimal annualSalary, out Dictionary<string, decimal> insuranceCosts, ref decimal totalCost, ref decimal directCostOfEmployment, bool isDefault = false, string isoCode = \"\")\n    {\n        var deathInsuranceCost = Helpers.CalculateLifeAndAccidentsInsurance(annualSalary * exchangeRateEurToUsd) * exchangeRateUsdToEur;\n        var medicalInsuranceCost = pricingRules.PremiumMedicalInsurance.Value * medicalInsuranceExchangeRate;\n        var dentalInsuranceCost = pricingRules.DentalInsurance.Value * dentalInsuranceExchangeRate;\n        var insurances = new Dictionary<string, (bool, decimal)>()\n        {\n            {\"MedicalInsurance\", (medicalInsuranceSelected, medicalInsuranceCost ?? 0) },\n            {\"DentalInsurance\", (dentalInsuranceSelected, dentalInsuranceCost ?? 0) },\n            { \"DeathInsurance\", (deathInsuranceSelected, deathInsuranceCost) }\n        };\n\n        var insuranceBool = insurances.ToDictionary(x => x.Key, x => x.Value.Item1);\n        insuranceCosts = insurances.ToDictionary(x => x.Key, x => x.Value.Item2);\n\n        foreach (var (key, (selected, cost)) in insurances)\n        {\n            if (!selected) continue;\n            totalCost += cost;\n            directCostOfEmployment += cost;\n        }\n\n        return insuranceBool;\n    }\n\n    private static async Task<decimal> GetExchangeRateAsync(string fromCurrency, string toCurrency, IHttpService httpService)\n    {\n        return await httpService.GetAsync<decimal>($\"api/currencies/exchange-rates/{fromCurrency}/{toCurrency}\");\n    }\n\n    public static void RetrieveDataForCalculatingCosts(string currency, PricingRules pricingRules, string toCurrencyIsoCode, IHttpService httpService,\n        out decimal medicalInsuranceExchangeRate, out decimal exchangeRateGbpToUsd, out decimal exchangeRateForEvent,\n        out decimal convertExchangeRate, out decimal dentalInsuranceExchangeRate)\n    {\n        var tasks = new List<Task>();\n        var medicalInsuranceExchangeRateTask =\n            GetExchangeRateAsync(pricingRules.PremiumMedicalInsurance.Currency, currency, httpService);\n        tasks.Add(medicalInsuranceExchangeRateTask);\n        Task<decimal> dentalInsuranceExchangeRateTask = null;\n        if (pricingRules.DentalInsurance.Currency != pricingRules.PremiumMedicalInsurance.Currency)\n        {\n            dentalInsuranceExchangeRateTask =\n                GetExchangeRateAsync(pricingRules.PremiumMedicalInsurance.Currency, currency, httpService);\n            tasks.Add(dentalInsuranceExchangeRateTask);\n        }\n\n        var convertExchangeRateTask = GetExchangeRateAsync(toCurrencyIsoCode, currency, httpService);\n        tasks.Add(convertExchangeRateTask);\n        var exchangeRateGbpToUsdTask = GetExchangeRateAsync(currency, \"USD\", httpService);\n        tasks.Add(exchangeRateGbpToUsdTask);\n        var exchangeRateForEventTask = GetExchangeRateAsync(currency, toCurrencyIsoCode ?? currency, httpService);\n        tasks.Add(exchangeRateForEventTask);\n        Task.WhenAll(tasks.ToArray()).Wait();\n        convertExchangeRate = convertExchangeRateTask.Result;\n        dentalInsuranceExchangeRate =\n            dentalInsuranceExchangeRateTask?.Result ?? medicalInsuranceExchangeRateTask.Result;\n        medicalInsuranceExchangeRate = medicalInsuranceExchangeRateTask.Result;\n        exchangeRateForEvent = exchangeRateForEventTask.Result;\n        exchangeRateGbpToUsd = exchangeRateGbpToUsdTask.Result;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Services/InsuranceTemplateMapper.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Utils;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Remundo.Pricing.Domain.Services;\n\npublic static class InsuranceTemplateMapper\n{\n    //MAPS TEMPLATE PRICES TO OUR SELECTED INSURANCE DETAIL DICTIONARY\n\n    private static Dictionary<string, InsuranceSelectionDetail> GenerateInsuranceSelectionsWithCost(\n    TemplateInsurance template,\n    IDictionary<string, bool>? selectedFlags = null)\n    {\n        var result = new Dictionary<string, InsuranceSelectionDetail>();\n\n        void Add(string tier, string insuranceType, Dictionary<string, int>? groupCosts)\n        {\n            if (groupCosts == null) return;\n\n            foreach (var (coverageKey, cost) in groupCosts)\n            {\n                var key = $\"{tier}_{insuranceType}_{coverageKey}\";\n\n                var isSelected = selectedFlags != null &&\n                                 selectedFlags.TryGetValue(key, out var flag) &&\n                                 flag;\n\n                result[key] = new InsuranceSelectionDetail\n                {\n                    Selected = isSelected,\n                    Cost = cost\n                };\n            }\n        }\n\n        if (template.BasicInsurancePrices != null)\n        {\n            Add(\"Basic\", \"MedicalInsurance\", template.BasicInsurancePrices.Medical?.ToDictionary(k => k.Key.ToString(), v => v.Value));\n            Add(\"Basic\", \"DentalInsurance\", template.BasicInsurancePrices.Dental?.ToDictionary(k => k.Key.ToString(), v => v.Value));\n        }\n        if (template.StandardInsurancePrices != null)\n        {\n            Add(\"Standard\", \"MedicalInsurance\", template.StandardInsurancePrices.Medical?.ToDictionary(k => k.Key.ToString(), v => v.Value));\n            Add(\"Standard\", \"DentalInsurance\", template.StandardInsurancePrices.Dental?.ToDictionary(k => k.Key.ToString(), v => v.Value));\n        }\n        if (template.PremiumInsurancePrices != null)\n        {\n            Add(\"Premium\", \"MedicalInsurance\", template.PremiumInsurancePrices.Medical?.ToDictionary(k => k.Key.ToString(), v => v.Value));\n            Add(\"Premium\", \"DentalInsurance\", template.PremiumInsurancePrices.Dental?.ToDictionary(k => k.Key.ToString(), v => v.Value));\n        }\n\n        return result;\n    }\n\n    public static bool ValidateInsuranceSelectionsAgainstTemplate(\n        IDictionary<string, InsuranceSelectionDetail> selectedInsuranceDetails,\n        TemplateInsurance template)\n    {\n        var expectedMap = InsuranceTemplateMapper.GenerateInsuranceSelectionsWithCost(template);\n\n        // Step 1: Ensure all expected keys are present in selected\n        if (!selectedInsuranceDetails.Keys.OrderBy(x => x).SequenceEqual(expectedMap.Keys.OrderBy(x => x)))\n            return false;\n\n        return true;\n    }\n\n    public static void MapInsuranceDetailsToInsuranceFlagsAndCosts(\n    decimal annualSalary,\n    decimal usdToLocalExchangeRate,\n    decimal eurToLocalExchangeRate,\n    IDictionary<string, bool>? selectedInsuranceFlags,\n    TemplateInsurance? template,\n    out Dictionary<string, bool> insuranceFlags,\n    out Dictionary<string, decimal> insuranceCosts)\n    {\n        insuranceFlags = new Dictionary<string, bool>();\n        insuranceCosts = new Dictionary<string, decimal>();\n\n        var deathInsuranceCost = Helpers.CalculateLifeAndAccidentsInsurance(annualSalary * 1 / usdToLocalExchangeRate) * usdToLocalExchangeRate;\n        insuranceCosts[\"DeathInsurance\"] = deathInsuranceCost;\n\n        insuranceFlags[\"DeathInsurance\"] = selectedInsuranceFlags?.TryGetValue(\"DeathInsurance\", out var selected) == true && selected;\n\n        if (template is null) return;\n\n        var newTemplateInsurances = GenerateInsuranceSelectionsWithCost(template, selectedInsuranceFlags);\n\n        foreach (var (key, detail) in newTemplateInsurances)\n        {\n            insuranceFlags[key] = detail.Selected;\n            insuranceCosts[key] = detail.Cost * eurToLocalExchangeRate;\n        }\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Utils/AustriaEmployerCostCalculator.cs\n// service: src\n﻿\nusing Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Services;\nusing System;\n\nnamespace Remundo.Pricing.Domain.Utils;\n\npublic class AustriaEmployerCostCalculator : IEmployerCostCalculator\n{\n    private const decimal SocialSecurityCap = 5670m;\n    private readonly decimal _socialSecurityFactor = 0.2113m;\n    private const decimal AdditionalSocialSecurityCap = 11350m;\n    private readonly decimal _additionalSocialSecurityFactor = 0.2063m;\n    private readonly decimal _pensionFactor = 0.0153m;\n    private readonly decimal _chamberOfCommerceFactor = 0.0035m;\n    private readonly decimal _familyLevyFactor = 0.039m;\n    private readonly decimal _municipalTaxFactor = 0.03m;\n    private readonly decimal _employerContributionSurchargeFactor = 0.0037m;\n\n    public IDictionary<string, decimal> CalculateEmployerCosts(EmployerCostInfo info)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Pension Fund\", CalculatePension(info.GrossSalary) },\n            { \"Employer Social Security\", CalculateSocialSecurity(info.GrossSalary) },\n            { \"Employer Contribution Surcharge\", CalculateEmployerContributionSurcharge(info.GrossSalary) },\n            { \"Chamber Of Commerce\", CalculateChamberOfCommerce(info.GrossSalary) },\n            { \"Family Levy\", CalculateFamilyLevy(info.GrossSalary) },\n            { \"Municipal Tax\", CalculateMunicipalTax(info.GrossSalary) },\n            { \"Employer Social Security (13/14)\", CalculateAdditionalSocialSecurity(info.AnnualSalary) },\n        };\n    }\n\n    public IDictionary<string, decimal> CalculateNonStatutoryCosts(decimal directCostOfEmployment, PricingRules pricingRules)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Professional Indemnity\", (pricingRules.ProfessionalIndemnity / 100) * directCostOfEmployment },\n            { \"Occupational Health & Safety\", (pricingRules.OccupationalHealthAndSafety / 100) * directCostOfEmployment },\n            { \"Medical Leave\", (pricingRules.MedicalLeave / 100) * directCostOfEmployment },\n            { \"Severance Cost\", (pricingRules.SeveranceCost / 100) * directCostOfEmployment },\n            { \"HR Support\", Helpers.CalculateHRSupportAmount(pricingRules, directCostOfEmployment) },\n            { \"Payroll Processing Fee\", Helpers.CalculatePayrollProcessingFee(pricingRules, directCostOfEmployment) }\n        };\n    }\n\n    private decimal CalculatePension(decimal grossSalaryInEur)\n    {\n        return grossSalaryInEur * _pensionFactor;\n    }\n\n    private decimal CalculateSocialSecurity(decimal grossSalaryInEur)\n    {\n        decimal monthly = grossSalaryInEur / 12;\n        return Math.Min(SocialSecurityCap, grossSalaryInEur) * _socialSecurityFactor * 12;\n    }\n\n    private decimal CalculateAdditionalSocialSecurity(decimal baseSalaryInEur)\n    {\n        decimal minCap = Math.Min(AdditionalSocialSecurityCap, baseSalaryInEur);\n        return minCap * _additionalSocialSecurityFactor;\n    }\n\n    private decimal CalculateFamilyLevy(decimal grossSalaryInEur)\n    {\n        return _familyLevyFactor * grossSalaryInEur;\n    }\n\n    private decimal CalculateMunicipalTax(decimal grossSalaryInEur)\n    {\n        return _municipalTaxFactor * grossSalaryInEur;\n    }\n\n    private decimal CalculateEmployerContributionSurcharge(decimal grossSalaryInEur)\n    {\n        return grossSalaryInEur * _employerContributionSurchargeFactor;\n    }\n\n    private decimal CalculateChamberOfCommerce(decimal grossSalaryInEur)\n    {\n        return grossSalaryInEur * _chamberOfCommerceFactor;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Utils/BelgiumEmployerCostCalculator.cs\n// service: src\n﻿\nusing Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Services;\n\nnamespace Remundo.Pricing.Domain.Utils;\n\npublic class BelgiumEmployerCostCalculator : IEmployerCostCalculator\n{\n    public IDictionary<string, decimal> CalculateEmployerCosts(EmployerCostInfo info)\n    {\n        var social = CalculateSocialSecurity(info.GrossSalary); \n        return new Dictionary<string, decimal>\n        {\n            { \"Double Holiday Pay\", CalculateHolidayPay(info.GrossSalary + social) },\n            { \"Social Security\", social },\n            { \"Eco Vouchers\", CalculateEcoVouchers() },\n            { \"One-off Premium\",  CalculateOneOffPremium() },\n        };\n    }\n\n    public IDictionary<string, decimal> CalculateNonStatutoryCosts(decimal directCostOfEmployment, PricingRules pricingRules)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Professional Indemnity\", (pricingRules.ProfessionalIndemnity / 100) * directCostOfEmployment },\n            { \"Occupational Health & Safety\", (pricingRules.OccupationalHealthAndSafety / 100) * directCostOfEmployment },\n            { \"Medical Leave\", (pricingRules.MedicalLeave / 100) * directCostOfEmployment },\n            { \"Severance Cost\", (pricingRules.SeveranceCost / 100) * directCostOfEmployment },\n            { \"HR Support\", Helpers.CalculateHRSupportAmount(pricingRules, directCostOfEmployment) },\n            { \"Payroll Processing Fee\", Helpers.CalculatePayrollProcessingFee(pricingRules, directCostOfEmployment) }\n        };\n    }\n\n    private static decimal CalculateSocialSecurity(decimal grossSalary)\n    {\n        return 0.2553m * grossSalary;\n    }\n\n    private static decimal CalculateHolidayPay(decimal grossSalaryIncludingSocialSecurity)\n    {\n        return grossSalaryIncludingSocialSecurity * 0.0767m;\n    }\n\n    private static decimal CalculateEcoVouchers()\n    {\n        return 20.83m * 12;\n    }\n\n    private static decimal CalculateOneOffPremium()\n    {\n        return 26.04m * 12;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Utils/BulgariaEmployerCostCalculator.cs\n// service: src\n﻿\nusing Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Services;\nusing System;\n\nnamespace Remundo.Pricing.Domain.Utils;\n\npublic class BulgariaEmployerCostCalculator : IEmployerCostCalculator\n{\n    private const decimal _healthInsuranceContributionCappedCap = 3400m;\n    private readonly decimal _healthInsuranceContributionCappedFactor = 0.048m;\n\n    private readonly decimal _socialSecurityContributionCappedFactor = 0.1422m;\n    private readonly decimal _socialSecurityContributionCappedCap = 3400m;\n\n    public IDictionary<string, decimal> CalculateEmployerCosts(EmployerCostInfo info)\n    {\n        return new Dictionary<string, decimal>\n        {\n            {\"Health Insurance Contributions\", CalculateCappedCost(info.GrossSalary, _healthInsuranceContributionCappedFactor, _healthInsuranceContributionCappedCap) },\n            {\"Social Security Contribution\", CalculateCappedCost(info.GrossSalary, _socialSecurityContributionCappedFactor, _socialSecurityContributionCappedCap) },\n        };\n    }\n\n    public IDictionary<string, decimal> CalculateNonStatutoryCosts(decimal directCostOfEmployment, PricingRules pricingRules)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Professional Indemnity\", (pricingRules.ProfessionalIndemnity / 100) * directCostOfEmployment },\n            { \"Occupational Health & Safety\", (pricingRules.OccupationalHealthAndSafety / 100) * directCostOfEmployment },\n            { \"Medical Leave\", (pricingRules.MedicalLeave / 100) * directCostOfEmployment },\n            { \"Severance Cost\", (pricingRules.SeveranceCost / 100) * directCostOfEmployment },\n            { \"HR Support\", Helpers.CalculateHRSupportAmount(pricingRules, directCostOfEmployment) },\n            { \"Payroll Processing Fee\", Helpers.CalculatePayrollProcessingFee(pricingRules, directCostOfEmployment) }\n        };\n    }\n\n    private decimal CalculateCappedCost(decimal salary, decimal factor, decimal cap)\n    {\n        return Math.Min(salary / 12m, cap) * factor * 12;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Utils/CroatiaEmployerCostCalculator.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Services;\n\nnamespace Remundo.Pricing.Domain.Utils;\n\npublic class CroatiaEmployerCostCalculator : IEmployerCostCalculator\n{\n    public IDictionary<string, decimal> CalculateEmployerCosts(EmployerCostInfo info)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Employer Social Security\", CalculateSocialSecurity(info.GrossSalary) },\n            { \"Pension Fund\", CalculatePension(info.GrossSalary) },\n        };\n    }\n\n    public IDictionary<string, decimal> CalculateNonStatutoryCosts(decimal directCostOfEmployment, PricingRules pricingRules)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Professional Indemnity\", (pricingRules.ProfessionalIndemnity / 100) * directCostOfEmployment },\n            { \"Occupational Health & Safety\", (pricingRules.OccupationalHealthAndSafety / 100) * directCostOfEmployment },\n            { \"Medical Leave\", (pricingRules.MedicalLeave / 100) * directCostOfEmployment },\n            { \"Severance Cost\", (pricingRules.SeveranceCost / 100) * directCostOfEmployment },\n            { \"HR Support\", Helpers.CalculateHRSupportAmount(pricingRules, directCostOfEmployment) },\n            { \"Payroll Processing Fee\", Helpers.CalculatePayrollProcessingFee(pricingRules, directCostOfEmployment) }\n        };\n    }\n\n    private static decimal CalculateSocialSecurity(decimal grossSalary)\n    {\n        return Math.Round(0.165m * grossSalary, 2);\n    }\n\n    private static decimal CalculatePension(decimal grossSalary)\n    {\n        return grossSalary * 0.00m;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Utils/CyprusEmployerCostCalculator.cs\n// service: src\n﻿\nusing Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Services;\n\nnamespace Remundo.Pricing.Domain.Utils;\n\npublic class CyprusEmployerCostCalculator : IEmployerCostCalculator\n{\n    public IDictionary<string, decimal> CalculateEmployerCosts(EmployerCostInfo info)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Training Development Fund\", CalculateTrainingDevelopmentFund(info.GrossSalary) },\n            { \"Social Security Contribution\", CalculateSocialSecurityContribution(info.GrossSalary) },\n            { \"Social Cohesion Fund\", CalculateSocialCohesionFund(info.GrossSalary) },\n            { \"Severance Fund\", CalculateSeveranceFund(info.GrossSalary) },\n            { \"Holiday Fund\", CalculateHolidayFund(info.GrossSalary) },\n            { \"General Health System\", CalculateGeneralHealthSystem(info.GrossSalary) },\n        };\n    }\n\n    public IDictionary<string, decimal> CalculateNonStatutoryCosts(decimal directCostOfEmployment, PricingRules pricingRules)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Professional Indemnity\", (pricingRules.ProfessionalIndemnity / 100) * directCostOfEmployment },\n            { \"Occupational Health & Safety\", (pricingRules.OccupationalHealthAndSafety / 100) * directCostOfEmployment },\n            { \"Medical Leave\", (pricingRules.MedicalLeave / 100) * directCostOfEmployment },\n            { \"Severance Cost\", (pricingRules.SeveranceCost / 100) * directCostOfEmployment },\n            { \"HR Support\", Helpers.CalculateHRSupportAmount(pricingRules, directCostOfEmployment) },\n            { \"Payroll Processing Fee\", Helpers.CalculatePayrollProcessingFee(pricingRules, directCostOfEmployment) }\n        };\n    }\n\n    private static decimal CalculateGeneralHealthSystem(decimal grossSalaryInEur)\n    {\n        decimal cap = 180000m;\n        return Math.Min(cap, grossSalaryInEur) * 0.029m;\n    }\n\n    private static decimal CalculateTrainingDevelopmentFund(decimal grossSalaryInEur)\n    {\n        return grossSalaryInEur * 0.005m;\n    }\n\n    private static decimal CalculateSeveranceFund(decimal grossSalaryInEur)\n    {\n        return 0.012m * grossSalaryInEur;\n    }\n\n    private static decimal CalculateHolidayFund(decimal grossSalaryInEur)\n    {\n        return 0.08m * grossSalaryInEur;\n    }\n\n    private static decimal CalculateSocialSecurityContribution(decimal grossSalaryInEur)\n    {\n        decimal cap = 60060m / 12m;\n        return Math.Min(cap, grossSalaryInEur / 12m) * 0.083m * 12m;\n    }\n\n    private static decimal CalculateSocialCohesionFund(decimal grossSalaryInEur)\n    {\n        return 0.02m * grossSalaryInEur;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Utils/CzechRepublicEmployerCostCalculator.cs\n// service: src\n﻿\nusing Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Services;\nusing System;\n\nnamespace Remundo.Pricing.Domain.Utils;\n\npublic class CzechRepublicEmployerCostCalculator : IEmployerCostCalculator\n{\n    public IDictionary<string, decimal> CalculateEmployerCosts(EmployerCostInfo info)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Social Security Contributions\",  CalculateSocialSecurityContribution(info.GrossSalary) },\n            { \"Medical Check up\", CalculateMedicalCheckup(info.GrossSalary) },\n            { \"Health Insurance\", CalculateHealthInsurance(info.GrossSalary) },\n        };\n    }\n\n    public IDictionary<string, decimal> CalculateNonStatutoryCosts(decimal directCostOfEmployment, PricingRules pricingRules)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Professional Indemnity\", (pricingRules.ProfessionalIndemnity / 100) * directCostOfEmployment },\n            { \"Occupational Health & Safety\", (pricingRules.OccupationalHealthAndSafety / 100) * directCostOfEmployment },\n            { \"Medical Leave\", (pricingRules.MedicalLeave / 100) * directCostOfEmployment },\n            { \"Severance Cost\", (pricingRules.SeveranceCost / 100) * directCostOfEmployment },\n            { \"HR Support\", Helpers.CalculateHRSupportAmount(pricingRules, directCostOfEmployment) },\n            { \"Payroll Processing Fee\", Helpers.CalculatePayrollProcessingFee(pricingRules, directCostOfEmployment) }\n        };\n    }\n\n    private static decimal CalculateSocialSecurityContribution(decimal grossSalaryInCZK)\n    {\n        const decimal value = 0.248m; // 24.8%\n        const decimal cap = 161296;\n\n        var monthlyCost = value * Math.Min(cap, grossSalaryInCZK / 12m);\n        return monthlyCost * 12m;\n    }\n\n    private static decimal CalculateMedicalCheckup(decimal grossSalaryInCZK)\n    {\n        return 1200m;\n    }\n\n    private static decimal CalculateHealthInsurance(decimal grossSalaryInCZK)\n    {\n        const decimal value = 0.09m; // 9%\n        return grossSalaryInCZK * value;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Utils/DefaultEmployerCostCalculator.cs\n// service: src\n﻿\nusing Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Services;\n\nnamespace Remundo.Pricing.Domain.Utils;\n\npublic class DefaultEmployerCostCalculator : IEmployerCostCalculator\n{\n    public IDictionary<string, decimal> CalculateEmployerCosts(EmployerCostInfo info)\n    {\n        return new Dictionary<string, decimal>\n        {\n\n        };\n    }\n\n    public IDictionary<string, decimal> CalculateNonStatutoryCosts(decimal directCostOfEmployment, PricingRules pricingRules)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Professional Indemnity\", (pricingRules.ProfessionalIndemnity / 100) * directCostOfEmployment },\n            { \"Occupational Health & Safety\", (pricingRules.OccupationalHealthAndSafety / 100) * directCostOfEmployment },\n            { \"Medical Leave\", (pricingRules.MedicalLeave / 100) * directCostOfEmployment },\n            { \"Severance Cost\", (pricingRules.SeveranceCost / 100) * directCostOfEmployment },\n            { \"HR Support\", Helpers.CalculateHRSupportAmount(pricingRules, directCostOfEmployment) },\n            { \"Payroll Processing Fee\", Helpers.CalculatePayrollProcessingFee(pricingRules, directCostOfEmployment) }\n        };\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Utils/DenmarkEmployerCostCalculator.cs\n// service: src\n﻿\nusing Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Services;\n\nnamespace Remundo.Pricing.Domain.Utils;\n\npublic class DenmarkEmployerCostCalculator : IEmployerCostCalculator\n{\n    private readonly decimal _apprenticeshipsTrainingAnnual = 3590m;\n    private readonly decimal _industrialInjuriesInsuranceAnnual = 5000m;\n    private readonly decimal _jobLossPayAnnual = 592m;\n    private readonly decimal _maternityFundAnnual = 1500m;\n    private readonly decimal _pensionContributionAnnual = 2376m;\n\n\n    public IDictionary<string, decimal> CalculateEmployerCosts(EmployerCostInfo info)\n    {\n        return new Dictionary<string, decimal>\n        {\n            {\"Apprenticeships, Vocational Training\", CalculateApprenticeshipsTraining() },\n            {\"Industrial Injuries Insurance\", CalculateIndustrialInjuriesInsurance() },\n            {\"Job Loss Due To Health or Injury\", CalculateJobLossPay() },\n            {\"Maternity Fund Contribution\", CalculateMaternityFund() },\n            {\"Pension Contribution\",  CalculatePension()},\n        };\n    }\n\n    public IDictionary<string, decimal> CalculateNonStatutoryCosts(decimal directCostOfEmployment, PricingRules pricingRules)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Professional Indemnity\", (pricingRules.ProfessionalIndemnity / 100) * directCostOfEmployment },\n            { \"Occupational Health & Safety\", (pricingRules.OccupationalHealthAndSafety / 100) * directCostOfEmployment },\n            { \"Medical Leave\", (pricingRules.MedicalLeave / 100) * directCostOfEmployment },\n            { \"Severance Cost\", (pricingRules.SeveranceCost / 100) * directCostOfEmployment },\n            { \"HR Support\", Helpers.CalculateHRSupportAmount(pricingRules, directCostOfEmployment) },\n            { \"Payroll Processing Fee\", Helpers.CalculatePayrollProcessingFee(pricingRules, directCostOfEmployment) }\n        };\n    }\n\n    \n\n    private decimal CalculateApprenticeshipsTraining()\n    {\n        return _apprenticeshipsTrainingAnnual;\n    }\n\n    private decimal CalculateIndustrialInjuriesInsurance()\n    {\n        return _industrialInjuriesInsuranceAnnual;\n    }\n\n    private decimal CalculateJobLossPay()\n    {\n        return _jobLossPayAnnual;\n    }\n\n    private decimal CalculateMaternityFund()\n    {\n        return _maternityFundAnnual;\n    }\n\n    private decimal CalculatePension()\n    {\n        return _pensionContributionAnnual;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Utils/EnglandEmployerCostCalculator.cs\n// service: src\n﻿\nusing Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Services;\n\nnamespace Remundo.Pricing.Domain.Utils;\n\npublic class EnglandEmployerCostCalculator : IEmployerCostCalculator\n{\n    private static readonly decimal _apprenticeshipLevyFactor = 0.005m;\n    private static readonly decimal _pensionFactor = 0.03m;\n    private static readonly decimal _pensionCap = 50270m;\n    private static readonly decimal _pensionBase = 6240m;\n    private static readonly decimal _nationalInsuranceFactor = 0.15m;\n    private static readonly decimal _nationalInsuranceBase = (758m * 12m);\n\n    public IDictionary<string, decimal> CalculateEmployerCosts(EmployerCostInfo info)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Pension Contribution\", CalculatePension(info.GrossSalary) },\n            { \"Employer National Insurance\", CalculateNationalInsurance(info.GrossSalary) },\n            { \"Apprenticeship Levy\", CalculateApprenticeshipLevy(info.GrossSalary) },\n        };\n    }\n\n    public IDictionary<string, decimal> CalculateNonStatutoryCosts(decimal directCostOfEmployment, PricingRules pricingRules)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Professional Indemnity\", (pricingRules.ProfessionalIndemnity / 100) * directCostOfEmployment },\n            { \"Occupational Health & Safety\", (pricingRules.OccupationalHealthAndSafety / 100) * directCostOfEmployment },\n            { \"Medical Leave\", (pricingRules.MedicalLeave / 100) * directCostOfEmployment },\n            { \"Severance Cost\", (pricingRules.SeveranceCost / 100) * directCostOfEmployment },\n            { \"HR Support\", Helpers.CalculateHRSupportAmount(pricingRules, directCostOfEmployment) },\n            { \"Payroll Processing Fee\", Helpers.CalculatePayrollProcessingFee(pricingRules, directCostOfEmployment) }\n        };\n    }\n\n    private static decimal CalculateApprenticeshipLevy(decimal grossSalaryInGbp)\n    {\n        var apprenticeshipLevy = grossSalaryInGbp * _apprenticeshipLevyFactor;\n        return apprenticeshipLevy;\n    }\n\n    private static decimal CalculatePension(decimal grossSalaryInGbp)\n    {\n        var pension = (Math.Min(grossSalaryInGbp, _pensionCap) - _pensionBase) * _pensionFactor;\n        return pension;\n    }\n\n    private static decimal CalculateNationalInsurance(decimal grossSalaryInGbp)\n    {\n        return _nationalInsuranceFactor * (grossSalaryInGbp - _nationalInsuranceBase);\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Utils/FranceEmployerCostCalculator.cs\n// service: src\n﻿\nusing Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Services;\n\nnamespace Remundo.Pricing.Domain.Utils;\n\npublic class FranceEmployerCostCalculator : IEmployerCostCalculator\n{\n    private const decimal _socialSecuritySicknessFactor = 0.133m;\n    private const decimal _healthInsuranceCost = 100m;\n    private const decimal _socialSecurityInsuranceCappedFactor = 0.0855m;\n    private const decimal _socialSecurityInsuranceCappedCap = 3428m;\n    private const decimal _socialSecurityInsuranceUncappedFactor = 0.019m;\n\n    private const decimal _supplementaryContributionBracketOnePensionFactor = 0.0472m;\n    private const decimal _supplementaryContributionBracketOnePensionCap = 3428m;\n    private const decimal _supplementaryContributionBracketOneOtherFactor = 0.0129m;\n    private const decimal _supplementaryContributionBracketOneOtherCap = 3428m;\n    private const decimal _supplementaryContributionBracketTwoPensionFactor = 0.1295m;\n    private const decimal _supplementaryContributionBracketTwoPensionCap = 3428m;\n    private const decimal _supplementaryContributionBracketTwoOtherFactor = 0.0162m;\n    private const decimal _supplementaryContributionBracketTwoOtherCap = 3428m;\n\n    private const decimal _socialSecurityFamilyFactor = 0.0525m;\n    private const decimal _unemploymentInsuranceFactor = 0.0405m;\n    private const decimal _unemploymentInsuranceCap = 13712m;\n    private const decimal _associationForManagersFactor = 0.00036m;\n    private const decimal _tradeUnionContributionFactor = 0.0002m;\n    private const decimal _autonomySolidarityContributionFactor = 0.003m;\n    private const decimal _wageInsuranceFactor = 0.0015m;\n    private const decimal _wageInsuranceCap = 13712m;\n    private const decimal _otherCostsFactor = 0.022m;\n    private const decimal _holidayPayAccuralFactor = 0.1m;\n\n    public IDictionary<string, decimal> CalculateEmployerCosts(EmployerCostInfo info)\n    {\n        var grossSalary = info.GrossSalary / 12m;\n        return new Dictionary<string, decimal>\n        {\n            {\"Social Security - Health & sickness\", CalculateUncappedCost(grossSalary, _socialSecuritySicknessFactor) },\n            {\"Health Insurance\", _healthInsuranceCost * 12 },\n            {\"Social Security - Old-Age Insurance (Capped)\", CalculateCappedCost(grossSalary, _socialSecurityInsuranceCappedFactor, _socialSecurityInsuranceCappedCap) },\n            {\"Social Security - Old-Age Insurance (Uncapped)\", CalculateUncappedCost(grossSalary, _socialSecurityInsuranceUncappedFactor) },\n            {\"Supplementary Contribution - Bracket 1 - Pension\", CalculateCappedCost(grossSalary, _supplementaryContributionBracketOnePensionFactor, _supplementaryContributionBracketOnePensionCap) },\n            {\"Supplementary Contribution - Bracket 1 - Other\", CalculateCappedCost(grossSalary, _supplementaryContributionBracketOneOtherFactor, _supplementaryContributionBracketOneOtherCap) },\n            {\"Supplementary Contribution - Bracket 2 - Pension\", CalculateCostMinusCap(grossSalary, _supplementaryContributionBracketTwoPensionFactor, _supplementaryContributionBracketTwoPensionCap) },\n            {\"Supplementary Contribution - Bracket 2 - Other\", CalculateCostMinusCap(grossSalary, _supplementaryContributionBracketTwoOtherFactor, _supplementaryContributionBracketTwoOtherCap) },\n            {\"Social Security - Family\", CalculateUncappedCost(grossSalary, _socialSecurityFamilyFactor) },\n            {\"Unemployment Insurance\", CalculateCappedCost(grossSalary, _unemploymentInsuranceFactor, _unemploymentInsuranceCap) },\n            {\"Association for the Employment of Managers\", CalculateUncappedCost(grossSalary, _associationForManagersFactor) },\n            {\"Trade Union Contribution (ADESATT)\", CalculateUncappedCost(grossSalary, _tradeUnionContributionFactor) },\n            {\"Autonomy Solidarity Contribution (CSA)\", CalculateUncappedCost(grossSalary, _autonomySolidarityContributionFactor) },\n            {\"Wage Guarantee Insurance Association (AGS)\", CalculateCappedCost(grossSalary, _wageInsuranceFactor, _wageInsuranceCap) },\n            {\"Holiday Pay Accrual\", CalculateUncappedCost(grossSalary, _holidayPayAccuralFactor) },\n            {\"Other Payroll Costs\", CalculateUncappedCost(grossSalary, _otherCostsFactor) },\n        };\n    }\n\n    public IDictionary<string, decimal> CalculateNonStatutoryCosts(decimal directCostOfEmployment, PricingRules pricingRules)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Professional Indemnity\", (pricingRules.ProfessionalIndemnity / 100) * directCostOfEmployment },\n            { \"Occupational Health & Safety\", (pricingRules.OccupationalHealthAndSafety / 100) * directCostOfEmployment },\n            { \"Medical Leave\", (pricingRules.MedicalLeave / 100) * directCostOfEmployment },\n            { \"Severance Cost\", (pricingRules.SeveranceCost / 100) * directCostOfEmployment },\n            { \"HR Support\", Helpers.CalculateHRSupportAmount(pricingRules, directCostOfEmployment) },\n            { \"Payroll Processing Fee\", Helpers.CalculatePayrollProcessingFee(pricingRules, directCostOfEmployment) }\n        };\n    }\n\n    private decimal CalculateCappedCost(decimal salary, decimal factor, decimal cap)\n    {\n        if (salary > cap)\n        {\n            return cap * factor * 12;\n        }\n        return salary * factor * 12;\n    }\n\n    private static decimal CalculateCostMinusCap(decimal salary, decimal factor, decimal cap)\n    {\n        return Math.Max(0, salary - cap) * factor * 12;\n    }\n\n    private decimal CalculateUncappedCost(decimal salary, decimal factor)\n    {\n        return salary * factor * 12;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Utils/GermanyEmployerCostCalculator.cs\n// service: src\n﻿\nusing Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Services;\nusing System;\n\nnamespace Remundo.Pricing.Domain.Utils;\n\npublic class GermanyEmployerCostCalculator : IEmployerCostCalculator\n{\n    private static readonly decimal _careInsuranceCap = 4987.5m;\n    private static readonly decimal _careInsuranceFactor = 0.017m;\n\n    private static readonly decimal _accidentInsuranceFactor = 0.0032m;\n\n    private static readonly decimal _healthInsuranceCap = 4987.5m;\n    private static readonly decimal _healthInsuranceFactor = 0.073m;\n\n    private static readonly decimal _otherEmployerCostsFactor = 0.0324m;\n\n    private static readonly decimal _pensionInsuranceCap = 7100m;\n    private static readonly decimal _pensionInsuranceFactor = 0.093m;\n\n    private static readonly decimal _unemploymentInsuranceCap = 7100m;\n    private static readonly decimal _unemploymentInsuranceFactor = 0.0123m;\n\n    public IDictionary<string, decimal> CalculateEmployerCosts(EmployerCostInfo info)\n    {\n        return new Dictionary<string, decimal>\n        {\n            {\"Unemployment Insurance\", CalculateUnemploymentInsurance(info.GrossSalary) },\n            {\"Pension Insurance\", CalculatePensionInsurance(info.GrossSalary) },\n            {\"Other Employer Costs\", CalculateOtherEmployerCosts(info.GrossSalary) },\n            {\"Health Insurance\", CalculateHealthInsurance(info.GrossSalary) },\n            {\"Care Insurance\", CalculateCareInsurance(info.GrossSalary) },\n            {\"Accident Insurance\", CalculateAccidentInsurance(info.GrossSalary) },\n        };\n    }\n\n    public IDictionary<string, decimal> CalculateNonStatutoryCosts(decimal directCostOfEmployment, PricingRules pricingRules)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Professional Indemnity\", (pricingRules.ProfessionalIndemnity / 100) * directCostOfEmployment },\n            { \"Occupational Health & Safety\", (pricingRules.OccupationalHealthAndSafety / 100) * directCostOfEmployment },\n            { \"Medical Leave\", (pricingRules.MedicalLeave / 100) * directCostOfEmployment },\n            { \"Severance Cost\", (pricingRules.SeveranceCost / 100) * directCostOfEmployment },\n            { \"HR Support\", Helpers.CalculateHRSupportAmount(pricingRules, directCostOfEmployment) },\n            { \"Payroll Processing Fee\", Helpers.CalculatePayrollProcessingFee(pricingRules, directCostOfEmployment) }\n        };\n    }\n\n    private decimal CalculateUnemploymentInsurance(decimal grossSalary)\n    {\n        return Math.Min(_unemploymentInsuranceCap, grossSalary / 12m) * _unemploymentInsuranceFactor * 12;\n    }\n\n    private decimal CalculateCareInsurance(decimal grossSalary)\n    {\n        return Math.Min(_careInsuranceCap, grossSalary / 12m) * _careInsuranceFactor * 12;\n    }\n\n    private decimal CalculatePensionInsurance(decimal grossSalary)\n    {\n        return Math.Min(_pensionInsuranceCap, grossSalary / 12m) * _pensionInsuranceFactor * 12;\n    }\n\n    private decimal CalculateAccidentInsurance(decimal grossSalary)\n    {\n        return grossSalary * _accidentInsuranceFactor;\n    }\n\n    private decimal CalculateOtherEmployerCosts(decimal grossSalary)\n    {\n        return grossSalary * _otherEmployerCostsFactor;\n    }\n\n    private decimal CalculateHealthInsurance(decimal grossSalary)\n    {\n        return Math.Min(_healthInsuranceCap, grossSalary / 12m) * _healthInsuranceFactor * 12;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Utils/Helpers.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Commands;\nusing Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\n\nnamespace Remundo.Pricing.Domain.Utils;\n\npublic static class Helpers\n{\n    /* \n     * This file contains the insurances calculations for medical, life & accidents, and dental insurance.\n     * IMPORTANT NOTE: All the values calculated below might be in USD or EUR \n     * (see the excel spreadsheet):\n     * https://myxml.sharepoint.com/:x:/s/Remundo/EaQ6Ch8sr6pOjxt6yDOj_oEBAifdYS6X9BEPqbPvPq8BbA\n     * An exchange rate may need to be applied in some countries \n     */\n\n    private static readonly decimal _accidentalDeathInsuranceFactor = 0.00044m;\n    private static readonly decimal _lifeInsuranceFactor = 0.00091m;\n    private static readonly IDictionary<string, decimal> _medicalInsuranceCostPerCountry = new Dictionary<string, decimal>()\n    {\n        { \"AZ\", 1545.6m },\n        { \"CM\", 1545.6m },\n        { \"CO\", 1894.37m },\n        { \"CD\", 1702.68m },\n        { \"CI\", 1861.96m },\n        { \"EG\", 1702.68m },\n        { \"FI\", 1702.68m },\n        { \"GE\", 1707.62m },\n        { \"IT\", 1894.37m },\n        { \"KE\", 1545.6m },\n        { \"LV\", 1702.68m },\n        { \"MX\", 650m },\n        { \"PK\", 1545.6m },\n        { \"PL\", 340m },\n        { \"QA\", 1020.95m },\n        { \"MK\", 1526.92m },\n        { \"RW\", 1702.68m },\n        { \"SO\", 1702.68m },\n        { \"CH\", 2089.9m },\n        { \"TZ\", 1702.68m },\n        { \"UG\", 1545.6m },\n        { \"VE\", 1894.37m },\n        { \"VN\", 1702.68m }\n    };\n    private static readonly IDictionary<string, decimal> _dentalInsuranceCostPerCountry = new Dictionary<string, decimal>()\n    {\n        { \"AZ\", 314.7m },\n        { \"CM\", 314.7m },\n        { \"CD\", 354.12m },\n        { \"EG\", 267.4m },\n        { \"FI\", 354.12m },\n        { \"GE\", 354.78m },\n        { \"IT\", 409.97m },\n        { \"KE\", 314.7m },\n        { \"LV\", 354.12m },\n        { \"PK\", 314.7m },\n        { \"MK\", 307.48m },\n        { \"RW\", 354.12m },\n        { \"SO\", 354.12m },\n        { \"CH\", 409.97m },\n        { \"TZ\", 354.12m },\n        { \"UG\", 314.7m },\n        { \"VE\", 409.97m },\n        { \"VN\", 354.12m }\n    };\n    // note that an exchange rate might need to be applied\n    private static decimal CalculateLifeAndAccidentsByRate(decimal rate)\n    {\n        decimal xmlOverhead = 0;\n        switch (rate)\n        {\n            case 20000: xmlOverhead = 50; break;\n            case 50000: xmlOverhead = 100; break;\n            case 100000: xmlOverhead = 200; break;\n            case 150000: xmlOverhead = 250; break;\n            case 200000: xmlOverhead = 300; break;\n        }\n        decimal lifeInsurance = rate * _lifeInsuranceFactor;\n        decimal aDDInsurance = rate * _accidentalDeathInsuranceFactor;\n        decimal total = lifeInsurance + aDDInsurance;\n        decimal lifeAndADDInsurance = total + xmlOverhead;\n        return lifeAndADDInsurance;\n    }\n    // values in USD\n    public static decimal CalculateLifeAndAccidentsInsurance(decimal annualSalary)\n    {\n        // if  salary is <= rate\n        if (annualSalary <= 20000) return CalculateLifeAndAccidentsByRate(20000);\n        if (annualSalary <= 50000) return CalculateLifeAndAccidentsByRate(50000);\n        if (annualSalary <= 100000) return CalculateLifeAndAccidentsByRate(100000);\n        if (annualSalary <= 150000) return CalculateLifeAndAccidentsByRate(150000);\n        if (annualSalary <= 200000) return CalculateLifeAndAccidentsByRate(200000);\n\n        if (annualSalary > 200000) return CalculateLifeAndAccidentsByRate(200000);\n        return 0;\n    }\n    // values in EUR\n    public static decimal CalculateMedicalInsurance(string country)\n    {\n        decimal medicalInsuranceCost = 0;\n        switch (country)\n        {\n            case \"Spain\": medicalInsuranceCost = 2089.90m; break;\n            case \"Portugal\": medicalInsuranceCost = 2089.90m; break;\n            case \"England\": medicalInsuranceCost = 2089.90m; break;\n            case \"Ireland\": medicalInsuranceCost = 1278.07m; break;\n            case \"Luxembourg\": medicalInsuranceCost = 1545.60m; break;\n        }\n        return medicalInsuranceCost;\n    }\n    public static decimal CalculateDentalAndOpticalInsurance(string country)\n    {\n        decimal dentalInsuranceCost = 0;\n        switch (country)\n        {\n            case \"Spain\": dentalInsuranceCost = 409.97m; break;\n            case \"Portugal\": dentalInsuranceCost = 409.97m; break;\n            case \"England\": dentalInsuranceCost = 409.97m; break;\n            case \"Ireland\": dentalInsuranceCost = 175.21m; break;\n            case \"Luxembourg\": dentalInsuranceCost = 312.73m; break;\n        }\n        return dentalInsuranceCost;\n    }\n\n    public static decimal CalculatePlatformFee(decimal total, PricingRules pricingRules, decimal exchangeRateEURToLocal)\n    {\n        if (pricingRules.PlatformFeePercentage != null)\n            return (decimal)(pricingRules.PlatformFeePercentage / 100) * total * exchangeRateEURToLocal;\n\n        if (pricingRules.PlatformFee != null)\n            return (decimal)pricingRules.PlatformFee * 12 * exchangeRateEURToLocal;\n\n        return 0;\n    }\n\n    internal static decimal CalculateHRSupportAmount(PricingRules pricingRules, decimal employmentCost)\n    {\n        if (pricingRules.HRSupportAmountPercentage != null)\n            return (decimal)(pricingRules.HRSupportAmountPercentage / 100) * employmentCost;\n\n        if (pricingRules.HRSupportAmount != null)\n            return (decimal)pricingRules.HRSupportAmount * 12;\n\n        return 0;\n    }\n\n    internal static decimal CalculatePayrollProcessingFee(PricingRules pricingRules, decimal employmentCost)\n    {\n        if (pricingRules.PayrollProcessingFeePercentage != null)\n            return (decimal)(pricingRules.PayrollProcessingFeePercentage / 100) * employmentCost;\n\n        if (pricingRules.PayrollProcessingFee != null)\n            return (decimal)pricingRules.PayrollProcessingFee * 12;\n\n        return 0;\n    }\n\n    internal static decimal CalculateDeposit(PricingRules pricingRules, decimal total)\n    {\n        decimal monthlyTotal = total / 12;\n        return monthlyTotal * (pricingRules.DepositFactor ?? 2m);\n    }\n\n    internal static decimal CalculateRoundedDeposit(PricingRules pricingRules, List<decimal> costs)\n    {\n        decimal total = 0;\n        foreach (var cost in costs)\n        {\n            var roundedMonthly = Math.Ceiling(cost / 12);\n            total += roundedMonthly;\n        };\n        return Math.Ceiling(total * (pricingRules.DepositFactor ?? 2m));\n    }\n\n    private static decimal CalculateHolidayCost(decimal grossSalaryInGbp)\n    {\n        if (grossSalaryInGbp > 100000)\n        {\n            return (grossSalaryInGbp * 0) / 100;\n        }\n\n        return 0;\n    }\n\n    private static Task<decimal> GetExchangeRateAsync(string fromCurrency, string toCurrency, IHttpService httpService)\n    {\n        return httpService.GetAsync<decimal>($\"api/currencies/exchange-rates/{fromCurrency}/{toCurrency}\");\n    }\n\n    private static Task<TemplateInsurance?> GetInsuranceTemplate(string tenantId, string countryIsoCode, IHttpService httpService)\n    {\n        return httpService.GetAsync<TemplateInsurance>($\"api/{tenantId}/templates/insurances/countries/{countryIsoCode}\");\n    }\n\n    private static Task<PricingRules> GetPricingRules(string tenantId, string countryIsoCode, string? orgId, IHttpService httpService)\n    {\n        return httpService.GetAsync<PricingRules>($\"api/{tenantId}/reference-data/pricingrules/employee/{countryIsoCode}/organisations/{orgId ?? \"null\"}\");\n    }\n\n    public static IDictionary<string, decimal> Convert(IDictionary<string, decimal> dict, decimal exchangeRate)\n    {\n        IDictionary<string, decimal> newDict = new Dictionary<string, decimal>();\n        foreach (var x in dict) newDict.Add(x.Key, (x.Value * exchangeRate).PennyUp());\n        return newDict;\n    }\n\n    private static IDictionary<string, IDictionary<string, decimal>> Convert(IDictionary<string, IDictionary<string, decimal>> dict, decimal exchangeRate)\n    {\n        IDictionary<string, IDictionary<string, decimal>> newDict = new Dictionary<string, IDictionary<string, decimal>>();\n        foreach (var x in dict)\n        {\n            newDict[x.Key] = new Dictionary<string, decimal>();\n            foreach (var y in x.Value)\n                newDict[x.Key].Add(y.Key, (y.Value * exchangeRate).PennyUp());\n        }\n        return newDict;\n    }"}
{"text": "// file: src/Remundo.Pricing.Domain/Utils/Helpers.cs\n// service: src\nreturn (grossSalaryInGbp * 0) / 100;\n        }\n\n        return 0;\n    }\n\n    private static Task<decimal> GetExchangeRateAsync(string fromCurrency, string toCurrency, IHttpService httpService)\n    {\n        return httpService.GetAsync<decimal>($\"api/currencies/exchange-rates/{fromCurrency}/{toCurrency}\");\n    }\n\n    private static Task<TemplateInsurance?> GetInsuranceTemplate(string tenantId, string countryIsoCode, IHttpService httpService)\n    {\n        return httpService.GetAsync<TemplateInsurance>($\"api/{tenantId}/templates/insurances/countries/{countryIsoCode}\");\n    }\n\n    private static Task<PricingRules> GetPricingRules(string tenantId, string countryIsoCode, string? orgId, IHttpService httpService)\n    {\n        return httpService.GetAsync<PricingRules>($\"api/{tenantId}/reference-data/pricingrules/employee/{countryIsoCode}/organisations/{orgId ?? \"null\"}\");\n    }\n\n    public static IDictionary<string, decimal> Convert(IDictionary<string, decimal> dict, decimal exchangeRate)\n    {\n        IDictionary<string, decimal> newDict = new Dictionary<string, decimal>();\n        foreach (var x in dict) newDict.Add(x.Key, (x.Value * exchangeRate).PennyUp());\n        return newDict;\n    }\n\n    private static IDictionary<string, IDictionary<string, decimal>> Convert(IDictionary<string, IDictionary<string, decimal>> dict, decimal exchangeRate)\n    {\n        IDictionary<string, IDictionary<string, decimal>> newDict = new Dictionary<string, IDictionary<string, decimal>>();\n        foreach (var x in dict)\n        {\n            newDict[x.Key] = new Dictionary<string, decimal>();\n            foreach (var y in x.Value)\n                newDict[x.Key].Add(y.Key, (y.Value * exchangeRate).PennyUp());\n        }\n        return newDict;\n    }\n\n    public static TCommand Convert<TCommand>(TCommand command, decimal exchangeRate) where TCommand : CalculatePriceBase, new()\n    {\n        var annualSalary = command.AnnualSalary * exchangeRate;\n        var oneOffDataAmount = command.OneOffDataAmount * exchangeRate;\n        var vestingDataAmount = command.VestingDataAmount * exchangeRate;\n        var allowances = new Dictionary<string, decimal>();\n        foreach (var x in command.Allowances) allowances.Add(x.Key, (x.Value * exchangeRate));\n\n        return new TCommand\n        {\n            CorrelationId = command.CorrelationId,\n            AnnualSalary = annualSalary,\n            ToCurrencyIsoCode = command.ToCurrencyIsoCode,\n            MedicalInsuranceSelected = command.MedicalInsuranceSelected,\n            DentalInsuranceSelected = command.DentalInsuranceSelected,\n            DeathInsuranceSelected = command.DeathInsuranceSelected,\n            Allowances = allowances,\n            OrganisationId = command.OrganisationId,\n            OneOffDataAmount = oneOffDataAmount,\n            VestingDataAmount = vestingDataAmount,\n            VestingDataCliffMonths = command.VestingDataCliffMonths,\n            VestingDataTotalMonths = command.VestingDataTotalMonths,\n            Metadata = command.Metadata\n        };\n    }\n\n    public static PriceCalculatedV7 ConvertPriceEventToChosenCurrency(string currency, string isoCode, PriceCalculatedV7 evt, decimal exchangeRate)\n    {\n        var totalCost = evt.TotalCost * exchangeRate;\n        var grossSalary = evt.GrossSalary * exchangeRate;\n        var employerCost = evt.EmployerCost * exchangeRate;\n        var deposit = evt.Deposit * exchangeRate;\n        var depositRounded = Math.Ceiling(evt.DepositRounded * exchangeRate);\n        var platformFee = evt.PlatformFeeInLocalCurrency * exchangeRate;\n        var additionalHolidayCost = evt.AdditionalHolidayCost * exchangeRate;\n        var costs = Convert(evt.Costs, exchangeRate);\n\n        var allowances = Convert(evt.Allowances, exchangeRate);\n        var insurances = Convert(evt.EmployeeInsuranceFees, exchangeRate);\n\n        var oneOffBonusAmount = evt.SigningBonusAmount * exchangeRate;\n        var vestingBonusAmount = evt.VestingBonusAmount * exchangeRate;\n\n\n        return new PriceCalculatedV7(\n            currency,\n            evt.ConvertedCurrency,\n            isoCode,\n            evt.OrganisationId,\n            totalCost,\n            grossSalary,\n            employerCost,\n            evt.PlatformFeeInEuros,\n            platformFee,\n            deposit,\n            depositRounded,\n            additionalHolidayCost,\n            costs,\n            allowances,\n            oneOffBonusAmount,\n            vestingBonusAmount,\n            evt.VestingBonusCliffMonths,\n            evt.VestingBonusTotalMonths,\n            false,\n            false,\n            0,\n            evt.SelectedInsurances,\n            new Dictionary<string, decimal>(),\n            insurances,\n            new Dictionary<string, decimal>(),\n            new Dictionary<string, decimal>(),\n            evt.ContractTerm,\n            evt.Metadata);\n    }\n\n    public static void EnsureInputs(CalculatePriceBase command)\n    {\n        Ensure.NotNull(command, nameof(command));\n        Ensure.NotNull(command.Metadata, nameof(command.Metadata));\n        Ensure.Positive(command.AnnualSalary, nameof(command.AnnualSalary));\n    }\n\n    public static void EnsureInputs(RecalculatePrice command)\n    {\n        Ensure.NotNull(command, nameof(command));\n        Ensure.NotNull(command.Metadata, nameof(command.Metadata));\n    }\n\n    public static PricingRules LoadPricingRules(IHttpService httpService, string isoCode, string tenantId, string organisationId)\n    {\n        return GetPricingRules(tenantId, isoCode, organisationId, httpService).Result;\n    }\n\n    public static TemplateInsurance? LoadInsuranceTemplate(IHttpService httpService, string isoCode, string tenantId)\n    {\n        try\n        {\n            return GetInsuranceTemplate(tenantId, isoCode, httpService).Result;\n        }\n        catch (Exception)\n        {\n            return null;\n        }\n    }\n\n    public static ExchangeRates LoadExchangeRates(PricingRules pricingRules, string localCurrency, string toCurrencyIsoCode, string chosenCurrency, IHttpService httpService)\n    {\n        var medical = pricingRules.PremiumMedicalInsurance.Currency != localCurrency\n            ? GetExchangeRateAsync(pricingRules.PremiumMedicalInsurance.Currency ?? \"GBP\", localCurrency, httpService)\n            : Task.FromResult(1.0m);\n\n        var dental = pricingRules.PremiumMedicalInsurance.Currency != pricingRules.DentalInsurance.Currency\n            ? GetExchangeRateAsync(pricingRules.DentalInsurance.Currency ?? \"GBP\", localCurrency, httpService)\n            : medical;\n\n        var toLocal = GetExchangeRateAsync(toCurrencyIsoCode, localCurrency, httpService);\n        var toChosen = GetExchangeRateAsync(chosenCurrency, localCurrency, httpService);\n        var usdToLocal = GetExchangeRateAsync(\"USD\", localCurrency, httpService);\n        var eurToLocal = GetExchangeRateAsync(\"EUR\", localCurrency, httpService);\n\n        Task.WhenAll(medical, dental, toLocal, usdToLocal, eurToLocal).Wait();\n\n        return new ExchangeRates(medical.Result, dental.Result, toLocal.Result, usdToLocal.Result, eurToLocal.Result, toChosen.Result);\n    }\n\n    public static CalculatePriceBase PopulateCommandFromExistingPrice(RecalculatePrice command, Price _price)\n    {\n        return new CalculatePriceBase\n        {\n            CorrelationId = command.PriceId,\n            AnnualSalary = command.AnnualSalary ?? _price.AnnualSalary,\n            ToCurrencyIsoCode = command.ToCurrencyIsoCode ?? _price.ToCurrencyIsoCode,\n            OrganisationId = command.OrganisationId ?? _price.OrganisationId,\n            MedicalInsuranceSelected = command.MedicalInsurance ?? _price.MedicalInsuranceSelected ?? false,\n            DentalInsuranceSelected = command.DentalInsuranceSelected ?? _price.DentalInsuranceSelected ?? false,\n            DeathInsuranceSelected = command.DeathInsuranceSelected ?? _price.DeathInsuranceSelected ?? false,\n            Allowances = command.Allowances ?? _price.Allowances,\n            OneOffDataAmount = command.OneOffDataAmount ?? _price.OneOffDataAmount,\n            VestingDataAmount = command.VestingDataAmount ?? _price.VestingDataAmount,\n            VestingDataCliffMonths = command.VestingDataCliffMonths ?? _price.VestingDataCliffMonths,\n            VestingDataTotalMonths = command.VestingDataTotalMonths ?? _price.VestingDataTotalMonths,\n            Metadata = command.Metadata\n        };\n    }\n\n    public static void AddAdditionalBonuses(PriceCalculatedV6 evt, CalculatePriceBase command, PricingRules pricingRules, CountryPricingContext context)\n    {\n        var signingBonusCost = command.OneOffDataAmount == 0 ? 0 : CalculateBonusCost(command, evt, pricingRules, context, cmd =>\n        {\n            var copy = new CalculatePriceBase(cmd);\n            copy.AnnualSalary += copy.OneOffDataAmount;\n            return copy;\n        });\n        var vestingCost = command.VestingDataAmount == 0 ? 0 : CalculateBonusCost(command, evt, pricingRules, context, cmd =>\n        {\n            var copy = new CalculatePriceBase(cmd);\n            if (copy.VestingDataTotalMonths >= copy.VestingDataCliffMonths)\n            {\n                decimal numberOfPayments = copy.VestingDataTotalMonths / copy.VestingDataCliffMonths;\n                copy.AnnualSalary += copy.VestingDataAmount / numberOfPayments;\n            }\n            return copy;\n        });\n\n        evt.Costs[\"Additional Payments\"].Add(\"Signing Bonus\", signingBonusCost);\n        evt.Costs[\"Additional Payments\"].Add(\"Vesting Bonus\", vestingCost);\n    }\n    private static decimal CalculateBonusCost<TCommand>(\n        TCommand originalCommand,\n        PriceCalculatedV6 baseEvent,\n        PricingRules pricingRules,\n        CountryPricingContext context,\n        Func<TCommand, TCommand> modifyCommandFunc)\n        where TCommand : CalculatePriceBase, new()\n    {\n        var modifiedCommand = modifyCommandFunc(originalCommand);\n        var newEvent = CalculateLocalCosts(modifiedCommand, pricingRules, context);\n        return newEvent.TotalCost - baseEvent.TotalCost;\n    }"}
{"text": "// file: src/Remundo.Pricing.Domain/Utils/Helpers.cs\n// service: src\nVestingDataTotalMonths = command.VestingDataTotalMonths ?? _price.VestingDataTotalMonths,\n            Metadata = command.Metadata\n        };\n    }\n\n    public static void AddAdditionalBonuses(PriceCalculatedV6 evt, CalculatePriceBase command, PricingRules pricingRules, CountryPricingContext context)\n    {\n        var signingBonusCost = command.OneOffDataAmount == 0 ? 0 : CalculateBonusCost(command, evt, pricingRules, context, cmd =>\n        {\n            var copy = new CalculatePriceBase(cmd);\n            copy.AnnualSalary += copy.OneOffDataAmount;\n            return copy;\n        });\n        var vestingCost = command.VestingDataAmount == 0 ? 0 : CalculateBonusCost(command, evt, pricingRules, context, cmd =>\n        {\n            var copy = new CalculatePriceBase(cmd);\n            if (copy.VestingDataTotalMonths >= copy.VestingDataCliffMonths)\n            {\n                decimal numberOfPayments = copy.VestingDataTotalMonths / copy.VestingDataCliffMonths;\n                copy.AnnualSalary += copy.VestingDataAmount / numberOfPayments;\n            }\n            return copy;\n        });\n\n        evt.Costs[\"Additional Payments\"].Add(\"Signing Bonus\", signingBonusCost);\n        evt.Costs[\"Additional Payments\"].Add(\"Vesting Bonus\", vestingCost);\n    }\n    private static decimal CalculateBonusCost<TCommand>(\n        TCommand originalCommand,\n        PriceCalculatedV6 baseEvent,\n        PricingRules pricingRules,\n        CountryPricingContext context,\n        Func<TCommand, TCommand> modifyCommandFunc)\n        where TCommand : CalculatePriceBase, new()\n    {\n        var modifiedCommand = modifyCommandFunc(originalCommand);\n        var newEvent = CalculateLocalCosts(modifiedCommand, pricingRules, context);\n        return newEvent.TotalCost - baseEvent.TotalCost;\n    }\n\n    public static PriceCalculatedV7 CalculateLocalCosts<TCommand>(\n        TCommand command,\n        PricingRules pricingRules,\n        CountryPricingContext context) where TCommand : CalculatePriceBase, new()\n    {\n        var annualSalary = command.AnnualSalary;\n\n        var grossSalaryElements = new Dictionary<string, decimal>\n        {\n            { \"Base Salary\", annualSalary }\n        };\n\n        decimal totalAllowanceCost = command.Allowances.Values.Sum(x => x * 12);\n        if (totalAllowanceCost > 0)\n            grossSalaryElements[\"Allowances\"] = totalAllowanceCost;\n\n        decimal grossSalary = grossSalaryElements.Values.Sum();\n\n        var employerCostElements = context.EmployerCostCalculator.CalculateEmployerCosts(\n            EmployerCostInfo.Create(grossSalary, annualSalary, context));\n\n        var directCostOfEmployment = grossSalary + employerCostElements.Values.Sum();\n\n        foreach (var (key, selected) in context.SelectedInsurances)\n        {\n            if (!selected) continue;\n\n            if (context.DCoEIncludesInsurance && context.InsuranceCosts.TryGetValue(key, out var cost))\n            {\n                directCostOfEmployment += cost;\n            }\n        }\n\n        var nonStatutoryCostElements = context.EmployerCostCalculator.CalculateNonStatutoryCosts(directCostOfEmployment, pricingRules);\n\n        foreach (var cost in nonStatutoryCostElements)\n            employerCostElements.Add(cost.Key, cost.Value);\n\n        decimal specialPrices = 0;\n        if (pricingRules.SpecialPricesPercentage.HasValue || pricingRules.SpecialPricesNominal.HasValue)\n        {\n            var specialByPct = (pricingRules.SpecialPricesPercentage ?? 0) / 100 * grossSalary;\n            var specialNominal = (pricingRules.SpecialPricesNominal ?? 0) * 12;\n            specialPrices = specialByPct + specialNominal;\n            employerCostElements[\"Special Prices\"] = specialPrices;\n        }\n\n        decimal employerCost = employerCostElements.Values.Sum();\n\n        var oneOffOnboardingCost = (pricingRules.OneOffOnboardingFeePercentage ?? 0) / 100 * annualSalary\n            + (pricingRules.OneOffOnboardingFeeNominal ?? 0);\n        var oneOffOffboardingCost = (pricingRules.OneOffOffboardingFeePercentage ?? 0) / 100 * annualSalary\n            + (pricingRules.OneOffOffboardingFeeNominal ?? 0);\n\n        var additionalPayments = new Dictionary<string, decimal>\n        {\n            { \"One Off Onboarding\", oneOffOnboardingCost },\n            { \"One Off Offboarding\", oneOffOffboardingCost }\n        };\n\n\n        var totalCost = grossSalary + employerCost;\n\n        foreach (var (key, selected) in context.SelectedInsurances)\n        {\n            if (!selected) continue;\n\n            if (context.InsuranceCosts.TryGetValue(key, out var cost))\n            {\n                totalCost += cost;\n            }\n        }\n\n        var insuranceFlags = context.SelectedInsurances;\n\n        var insuranceCosts = context.InsuranceCosts;\n\n\n        var allCosts = new Dictionary<string, IDictionary<string, decimal>>\n        {\n            { \"Gross Salary\", grossSalaryElements },\n            { \"Employer Cost\", employerCostElements },\n            { \"Additional Payments\", additionalPayments }\n        };\n\n        IDictionary<string, decimal> tenantSpecificCalculation = new Dictionary<string, decimal>();\n        if (context.TenantCostsCalculator != null)\n        {\n            bool isRecalculatedPrice = command.Metadata.ContainsKey(\"RecalculatedPrice\");\n            var monthlyTotalCost = totalCost / 12;\n            tenantSpecificCalculation = context.TenantCostsCalculator.CalculateAsync(context.HttpService, command.Metadata[\"tenant-id\"].ToString(), context.CountryIsoCode, pricingRules, command.CorrelationId, monthlyTotalCost, isRecalculatedPrice).Result;\n            if (!allCosts.ContainsKey(\"Tenant Costs\")) allCosts.Add(\"Tenant Costs\", tenantSpecificCalculation);\n        }\n\n        var platformFee = CalculatePlatformFee(totalCost, pricingRules, 1);\n        totalCost += platformFee;\n\n        // Deposit Calculation\n        var depositBase = grossSalaryElements.Values\n            .Concat(employerCostElements.Values)\n            .Concat(insuranceCosts.Where(x => insuranceFlags[x.Key]).Select(x => x.Value))\n            .Concat(tenantSpecificCalculation.Values)\n            .Append(platformFee)\n            .ToList();\n\n        var deposit = pricingRules.DepositFactor <= 0 ? 0 : CalculateDeposit(pricingRules, depositBase.Sum());\n        var depositRounded = pricingRules.DepositFactor <= 0 ? 0 : CalculateRoundedDeposit(pricingRules, depositBase);\n\n\n        return new PriceCalculatedV7(\n            context.LocalCurrency,\n            command.ToCurrencyIsoCode,\n            context.CountryIsoCode,\n            command.OrganisationId,\n            totalCost,\n            grossSalary,\n            employerCost,\n            pricingRules.PlatformFee ?? 0,\n            platformFee,\n            deposit,\n            depositRounded,\n            context.IncludeAdditionalHolidayCost ? CalculateHolidayCost(grossSalary) : 0,\n            allCosts,\n            command.Allowances,\n            command.OneOffDataAmount,\n            command.VestingDataAmount,\n            command.VestingDataCliffMonths,\n            command.VestingDataTotalMonths,\n            false,\n            false,\n            0,\n            insuranceFlags,\n            new Dictionary<string, decimal>(),\n            insuranceCosts,\n            new Dictionary<string, decimal>(),\n            new Dictionary<string, decimal>(),\n            context.ContractTerm,\n            command.Metadata\n        );\n    }\n\n    public static CountryPricingContext CreateContext(\n      string isoCode,\n      string currency,\n      Price price,\n      IDictionary<string, bool>? insuranceFlags,\n      IHttpService httpService,\n      IEmployerCostCalculator employerCostCalculator,\n      ICostsCalculator? calculator)\n    {\n        return new()\n        {\n            HttpService = httpService,\n            CountryIsoCode = isoCode,\n            LocalCurrency = currency,\n            Price = price,\n            EmployerCostCalculator = employerCostCalculator,\n            TenantCostsCalculator = calculator,\n            SelectedInsurances = insuranceFlags ?? price?.SelectedInsurances ?? new Dictionary<string, bool>()\n        };\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Utils/IrelandEmployerCostCalculator.cs\n// service: src\n﻿\nusing Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Services;\n\nnamespace Remundo.Pricing.Domain.Utils;\n\npublic class IrelandEmployerCostCalculator : IEmployerCostCalculator\n{\n    private readonly decimal _pRSILowerRateFactor = 0.09m;\n    private readonly decimal _pRSIUpperRateFactor = 0.1125m;\n    private const decimal _pRSILowerRateCap = 22048.0m;\n\n    public IDictionary<string, decimal> CalculateEmployerCosts(EmployerCostInfo info)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Pay-related Social Insurance\", CalculatePRSI(info.GrossSalary) },\n        };\n    }\n\n    public IDictionary<string, decimal> CalculateNonStatutoryCosts(decimal directCostOfEmployment, PricingRules pricingRules)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Professional Indemnity\", (pricingRules.ProfessionalIndemnity / 100) * directCostOfEmployment },\n            { \"Occupational Health & Safety\", (pricingRules.OccupationalHealthAndSafety / 100) * directCostOfEmployment },\n            { \"Medical Leave\", (pricingRules.MedicalLeave / 100) * directCostOfEmployment },\n            { \"Severance Cost\", (pricingRules.SeveranceCost / 100) * directCostOfEmployment },\n            { \"HR Support\", Helpers.CalculateHRSupportAmount(pricingRules, directCostOfEmployment) },\n            { \"Payroll Processing Fee\", Helpers.CalculatePayrollProcessingFee(pricingRules, directCostOfEmployment) }\n        };\n    }\n\n    private decimal CalculatePRSI(decimal grossSalary)\n    {\n        if (grossSalary < _pRSILowerRateCap) return grossSalary * _pRSILowerRateFactor;\n        return  grossSalary * _pRSIUpperRateFactor;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Utils/ItalyEmployerCostCalculator.cs\n// service: src\n﻿\nusing Evento;\nusing Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Services;\n\nnamespace Remundo.Pricing.Domain.Utils;\n\npublic class ItalyEmployerCostCalculator : IEmployerCostCalculator\n{\n    public IDictionary<string, decimal> CalculateEmployerCosts(EmployerCostInfo info)\n    {\n        //Dirigenti\n        var fasdac = CalculateFASDAC(info.ContractType);\n        var negri = CalculateNegri(info.ContractType);\n        var pastore = CalculatePastore(info.ContractType);\n\n        //Quadri\n        var tradeUnions = CalculateTradeUnions(info.ContractType);\n\n        //All\n        var employerSocialSecurity = CalculateSocialSecurity(info.GrossSalary);\n        var amountToCalculateHolidayAccrual = info.GrossSalary + employerSocialSecurity + tradeUnions + fasdac\n            + negri + pastore;\n        var unusedHolidayAccrual = CalculateUnusedHolidayAccrual(amountToCalculateHolidayAccrual);\n        var tfrSeveranceAccrual = CalculateTfrSeveranceAccrual(amountToCalculateHolidayAccrual);\n        decimal nonDeductibeIRAPTax = 0;\n\n        if (info.ContractTerm == \"Fixed Term\")\n        {\n            nonDeductibeIRAPTax = CalculateNonDecutibleIrapTax(amountToCalculateHolidayAccrual);\n        }\n\n        return new Dictionary<string, decimal>\n        {\n            { \"FASDAC (Dirigenti's fund)\", fasdac },\n            { \"Negri (Dirigenti's fund)\", negri },\n            { \"Non-deductible IRAP Tax\", nonDeductibeIRAPTax },\n            { \"Pastore  (Dirigenti's fund)\", pastore },\n            { \"Social Security\", employerSocialSecurity },\n            { \"Trade Unions\", tradeUnions },\n            { \"Unused Holiday Accrual\", unusedHolidayAccrual },\n            {\"TFR Severance Accrual\", tfrSeveranceAccrual },\n        };\n    }\n\n    public IDictionary<string, decimal> CalculateNonStatutoryCosts(decimal directCostOfEmployment, PricingRules pricingRules)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Professional Indemnity\", (pricingRules.ProfessionalIndemnity / 100) * directCostOfEmployment },\n            { \"Occupational Health & Safety\", (pricingRules.OccupationalHealthAndSafety / 100) * directCostOfEmployment },\n            { \"Medical Leave\", (pricingRules.MedicalLeave / 100) * directCostOfEmployment },\n            { \"Severance Cost\", (pricingRules.SeveranceCost / 100) * directCostOfEmployment },\n            { \"HR Support\", Helpers.CalculateHRSupportAmount(pricingRules, directCostOfEmployment) },\n            { \"Payroll Processing Fee\", Helpers.CalculatePayrollProcessingFee(pricingRules, directCostOfEmployment) }\n        };\n    }\n\n    private static decimal CalculateTradeUnions(string contractType)\n    {\n        return contractType == \"Quadri\" ? 2.44m * 12 : 0.0m;\n    }\n\n    private static decimal CalculateSocialSecurity(decimal grossSalaryInEur)\n    {\n        return grossSalaryInEur * 0.32m;\n    }\n\n    private static decimal CalculatePastore(string contractType)\n    {\n        return contractType == \"Dirigenti\" ? 116.49m * 12 : 0.0m;\n    }\n\n    private static decimal CalculateNonDecutibleIrapTax(decimal amountIncludingCosts)\n    {\n        return amountIncludingCosts * 0.05m;\n    }\n\n    private static decimal CalculateNegri(string contractType)\n    {\n        return contractType == \"Dirigenti\" ? 356.82m * 12 : 0.0m;\n    }\n\n    private static decimal CalculateFASDAC(string contractType)\n    {\n        return contractType == \"Dirigenti\" ? 320.44m * 12 : 0.0m;\n    }\n\n    private static decimal CalculateUnusedHolidayAccrual(decimal amountIncludingCosts)\n    {\n        return 0.0833m * amountIncludingCosts;\n    }\n\n    private static decimal CalculateTfrSeveranceAccrual(decimal amount)\n    {\n        return 0.0769m * amount;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Utils/LuxembourgEmployerCostCalculator.cs\n// service: src\n﻿\nusing Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Services;\n\nnamespace Remundo.Pricing.Domain.Utils;\n\npublic class LuxembourgEmployerCostCalculator : IEmployerCostCalculator\n{\n    private static readonly decimal _salaryCap = 12541.18m;\n    private static readonly decimal _pensionFundFactor = 0.08m;\n    private static readonly decimal _healthInsuranceEmployerCostFactor = 0.028m;\n    private static readonly decimal _mutualInsuranceSchemeFactor = 0.0053m;\n    private static readonly decimal _healthAndSafetyAtWorkFactor = 0.0014m;\n    private static readonly decimal _accidentInsuranceFactor = 0.0113m;\n\n    public IDictionary<string, decimal> CalculateEmployerCosts(EmployerCostInfo info)\n    {\n        var monthlySalary = info.GrossSalary / 12m;\n        var healthInsurance = CalculateEmployerHealthInsurance(monthlySalary) * 12;\n        var pensionFund = CalculatePensionFund(monthlySalary) * 12;\n        var mutualInsuranceScheme = CalculateMutualInsuranceScheme(monthlySalary) * 12;\n        var healthAndSafetyAtWork = CalculateSafetyAndHealthAtWork(monthlySalary) * 12;\n        var accidentInsurance = CalculateEmployerAccidentInsurance(monthlySalary) * 12;\n        return new Dictionary<string, decimal>\n        {\n            { \"Health Insurance\", healthInsurance },\n            { \"Pension Fund\", pensionFund },\n            { \"Mutual Insurance Scheme\",  mutualInsuranceScheme},\n            { \"Safety & Health at Work\", healthAndSafetyAtWork },\n            { \"Accident Insurance\", accidentInsurance },\n        };\n    }\n\n    public IDictionary<string, decimal> CalculateNonStatutoryCosts(decimal directCostOfEmployment, PricingRules pricingRules)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Professional Indemnity\", (pricingRules.ProfessionalIndemnity / 100) * directCostOfEmployment },\n            { \"Occupational Health & Safety\", (pricingRules.OccupationalHealthAndSafety / 100) * directCostOfEmployment },\n            { \"Medical Leave\", (pricingRules.MedicalLeave / 100) * directCostOfEmployment },\n            { \"Severance Cost\", (pricingRules.SeveranceCost / 100) * directCostOfEmployment },\n            { \"HR Support\", Helpers.CalculateHRSupportAmount(pricingRules, directCostOfEmployment) },\n            { \"Payroll Processing Fee\", Helpers.CalculatePayrollProcessingFee(pricingRules, directCostOfEmployment) }\n        };\n    }\n\n    private decimal CalculateEmployerAccidentInsurance(decimal monthlyTotalBasicPay)\n    {\n        decimal minimum = Math.Min(_salaryCap, monthlyTotalBasicPay);\n        decimal employerAccidentInsurance = minimum * _accidentInsuranceFactor;\n        return employerAccidentInsurance;\n    }\n\n    private decimal CalculateEmployerHealthInsurance(decimal monthlyTotalBasicPay)\n    {\n        decimal minimum = Math.Min(_salaryCap, monthlyTotalBasicPay);\n        decimal employerHealthInsurance = minimum * _healthInsuranceEmployerCostFactor;\n        return employerHealthInsurance;\n    }\n\n    private decimal CalculatePensionFund(decimal monthlyTotalBasicPay)\n    {\n        decimal minimum = Math.Min(monthlyTotalBasicPay, _salaryCap);\n        decimal pensionFund = minimum * _pensionFundFactor;\n        return pensionFund;\n    }\n\n    private decimal CalculateMutualInsuranceScheme(decimal monthlyTotalBasicPay)\n    {\n        decimal mututalInsuranceScheme = monthlyTotalBasicPay * _mutualInsuranceSchemeFactor;\n        return mututalInsuranceScheme;\n    }\n\n    private decimal CalculateSafetyAndHealthAtWork(decimal monthlyTotalBasicPay)\n    {\n        decimal minimum = Math.Min(_salaryCap, monthlyTotalBasicPay);\n        decimal healthAndSafetyAtWork = minimum * _healthAndSafetyAtWorkFactor;\n        return healthAndSafetyAtWork;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Utils/NetherlandsEmployerCostCalculator.cs\n// service: src\n﻿\nusing Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Services;\n\nnamespace Remundo.Pricing.Domain.Utils;\n\npublic class NetherlandsEmployerCostCalculator : IEmployerCostCalculator\n{\n    private const decimal _socialSecurityTier1MonthlyCap = 3174.83m;\n    private const decimal _socialSecurityTier1Percentage = 0.1m;\n    private const decimal _socialSecurityTier2MonthlyCap = 5650.333m;\n    private const decimal _socialSecurityTier2PercentageForFixedTerm = 0.1765m;\n    private const decimal _socialSecurityTier2PercentageForOpenEnded = 0.1265m;\n\n\n    public IDictionary<string, decimal> CalculateEmployerCosts(EmployerCostInfo info)\n    {\n        return new Dictionary<string, decimal>\n        {\n            {\"Social Security - Tier 1\", CalculateSocialSecurityTier1(info.GrossSalary)},\n            {\"Social Security - Tier 2\", CalculateSocialSecurityTier2(info.GrossSalary, info.ContractTerm)},\n        };\n    }\n\n    public IDictionary<string, decimal> CalculateNonStatutoryCosts(decimal directCostOfEmployment, PricingRules pricingRules)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Professional Indemnity\", (pricingRules.ProfessionalIndemnity / 100) * directCostOfEmployment },\n            { \"Occupational Health & Safety\", (pricingRules.OccupationalHealthAndSafety / 100) * directCostOfEmployment },\n            { \"Medical Leave\", (pricingRules.MedicalLeave / 100) * directCostOfEmployment },\n            { \"Severance Cost\", (pricingRules.SeveranceCost / 100) * directCostOfEmployment },\n            { \"HR Support\", Helpers.CalculateHRSupportAmount(pricingRules, directCostOfEmployment) },\n            { \"Payroll Processing Fee\", Helpers.CalculatePayrollProcessingFee(pricingRules, directCostOfEmployment) }\n        };\n    }\n\n    private static decimal CalculateSocialSecurityTier1(decimal grossSalary)\n    {\n        return Math.Min(_socialSecurityTier1MonthlyCap, grossSalary / 12) * _socialSecurityTier1Percentage * 12;\n    }\n\n    private static decimal CalculateSocialSecurityTier2(decimal grossSalary, string contractTerm)\n    {\n        var percentage = contractTerm.Equals(\"Fixed Term\") ? _socialSecurityTier2PercentageForFixedTerm \n                                                           : _socialSecurityTier2PercentageForOpenEnded;\n        return Math.Min(_socialSecurityTier2MonthlyCap, grossSalary / 12) * percentage * 12;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Utils/PortugalEmployerCostCalculator.cs\n// service: src\n﻿\nusing Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Services;\n\nnamespace Remundo.Pricing.Domain.Utils;\n\npublic class PortugalEmployerCostCalculator : IEmployerCostCalculator\n{\n    private static readonly decimal _employerSocialSecurityFactor = 0.2375m;\n    private static readonly decimal _medicalCheckupValue = 5m;\n    private static readonly decimal _professionalTrainingFactor = 0.02m;\n\n    public IDictionary<string, decimal> CalculateEmployerCosts(EmployerCostInfo info)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Employer Social Security\", CalculateEmployerSocialSecurity(info.GrossSalary) },\n            { \"Medical Check-up\", CalculateMedicalCheckUp() },\n            { \"Professional Training\", CalculateProfessionalTraining(info.GrossSalary) }\n        };\n    }\n\n    public IDictionary<string, decimal> CalculateNonStatutoryCosts(decimal directCostOfEmployment, PricingRules pricingRules)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Professional Indemnity\", (pricingRules.ProfessionalIndemnity / 100) * directCostOfEmployment },\n            { \"Occupational Health & Safety\", (pricingRules.OccupationalHealthAndSafety / 100) * directCostOfEmployment },\n            { \"Medical Leave\", (pricingRules.MedicalLeave / 100) * directCostOfEmployment },\n            { \"Severance Cost\", (pricingRules.SeveranceCost / 100) * directCostOfEmployment },\n            { \"HR Support\", Helpers.CalculateHRSupportAmount(pricingRules, directCostOfEmployment) },\n            { \"Payroll Processing Fee\", Helpers.CalculatePayrollProcessingFee(pricingRules, directCostOfEmployment) }\n        };\n    }\n\n    private decimal CalculateMedicalCheckUp()\n    {\n        return _medicalCheckupValue * 12;\n    }\n\n    private decimal CalculateEmployerSocialSecurity(decimal annualSalary)\n    {\n        return annualSalary * _employerSocialSecurityFactor;\n    }\n\n    private decimal CalculateProfessionalTraining(decimal grossSalary)\n    {\n        return grossSalary * _professionalTrainingFactor;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Utils/SlovakiaEmployerCostCalculator.cs\n// service: src\n﻿\nusing Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Services;\n\nnamespace Remundo.Pricing.Domain.Utils;\n\npublic class SlovakiaEmployerCostCalculator : IEmployerCostCalculator\n{\n    private const decimal _unemploymentInsuranceCap = 7931;\n    private const decimal _unemploymentInsuranceFactor = 0.01m;\n    private const decimal _sicknessInsuranceCap = 7931;\n    private const decimal _sicknessInsuranceFactor = 0.014m;\n    private const decimal _reserveFundCap = 7931;\n    private const decimal _reserveFundFactor = 0.0475m;\n    private const decimal _pensionContributionCap = 7931;\n    private const decimal _pensionContributionFactor = 0.14m; \n    private const decimal _healthInsuranceFactor = 0.1m;\n    private const decimal _guaranteeCap = 7931;\n    private const decimal _guaranteeFactor = 0.0025m;\n    private const decimal _disabilityInsuranceCap = 7931;\n    private const decimal _disabilityInsuranceFactor = 0.03m;\n    private const decimal _accidentInsuranceCap = 7931;\n    private const decimal _accidentInsuranceFactor = 0.008m;\n\n    public IDictionary<string, decimal> CalculateEmployerCosts(EmployerCostInfo info)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Unemployment Insurance\", CalculateUnemploymentInsurance(info.GrossSalary) },\n            { \"Sickness Insurance\", CalculateSicknessInsurance(info.GrossSalary) },\n            { \"Reserve Fund\", CalculateReserveFund(info.GrossSalary) },\n            { \"Pension Contribution\", CalculatePensionContribution(info.GrossSalary) },\n            { \"Health Insurance\", CalculateHealthInsurance(info.GrossSalary) },\n            { \"Guarantee\", CalculateGuarantee(info.GrossSalary) },\n            { \"Disability Insurance\", CalculateDisabilityInsurance(info.GrossSalary) },\n            { \"Accident Insurance\", CalculateAccidentInsurance(info.GrossSalary) },\n        };\n    }\n\n    public IDictionary<string, decimal> CalculateNonStatutoryCosts(decimal directCostOfEmployment, PricingRules pricingRules)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Professional Indemnity\", (pricingRules.ProfessionalIndemnity / 100) * directCostOfEmployment },\n            { \"Occupational Health & Safety\", (pricingRules.OccupationalHealthAndSafety / 100) * directCostOfEmployment },\n            { \"Medical Leave\", (pricingRules.MedicalLeave / 100) * directCostOfEmployment },\n            { \"Severance Cost\", (pricingRules.SeveranceCost / 100) * directCostOfEmployment },\n            { \"HR Support\", Helpers.CalculateHRSupportAmount(pricingRules, directCostOfEmployment) },\n            { \"Payroll Processing Fee\", Helpers.CalculatePayrollProcessingFee(pricingRules, directCostOfEmployment) }\n        };\n    }\n\n    static private decimal CalculateUnemploymentInsurance(decimal salary, decimal taxableDiscretionary = 0)\n    {\n\n        decimal monthly = salary / 12m;\n\n        return Math.Min(_unemploymentInsuranceCap, (monthly + taxableDiscretionary)) * _unemploymentInsuranceFactor * 12;\n    }\n\n    static private decimal CalculateSicknessInsurance(decimal salary, decimal taxableDiscretionary = 0)\n    {\n\n        decimal monthly = salary / 12m;\n\n        return Math.Min(_sicknessInsuranceCap, (monthly + taxableDiscretionary)) * _sicknessInsuranceFactor * 12;\n    }\n\n    static private decimal CalculateReserveFund(decimal salary, decimal taxableDiscretionary = 0)\n    {\n\n        decimal monthly = salary / 12m;\n\n        return Math.Min(_reserveFundCap, (monthly + taxableDiscretionary)) * _reserveFundFactor * 12;\n    }\n\n    static private decimal CalculatePensionContribution(decimal salary, decimal taxableDiscretionary = 0)\n    {\n\n        decimal monthly = salary / 12m;\n\n        return Math.Min(_pensionContributionCap, (monthly + taxableDiscretionary)) * _pensionContributionFactor * 12;\n    }\n\n    static private decimal CalculateHealthInsurance(decimal salary, decimal taxableDiscretionary = 0)\n    {\n\n        decimal monthly = salary / 12m;\n\n        return (monthly + taxableDiscretionary) * _healthInsuranceFactor * 12;\n    }\n\n    static private decimal CalculateGuarantee(decimal salary, decimal taxableDiscretionary = 0)\n    {\n\n        decimal monthly = salary / 12m;\n\n        return Math.Min(_guaranteeCap, (monthly + taxableDiscretionary)) * _guaranteeFactor * 12;\n    }\n\n    static private decimal CalculateDisabilityInsurance(decimal salary, decimal taxableDiscretionary = 0)\n    {\n\n        decimal monthly = salary / 12m;\n\n        return Math.Min(_disabilityInsuranceCap, (monthly + taxableDiscretionary)) * _disabilityInsuranceFactor* 12;\n    }\n\n    static private decimal CalculateAccidentInsurance(decimal salary, decimal taxableDiscretionary = 0)\n    {\n\n        decimal monthly = salary / 12m;\n\n        return Math.Min(_accidentInsuranceCap, (monthly + taxableDiscretionary)) * _accidentInsuranceFactor  * 12;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Utils/SpainEmployerCostCalculator.cs\n// service: src\n﻿\nusing Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Services;\n\nnamespace Remundo.Pricing.Domain.Utils;\n\npublic class SpainEmployerCostCalculator : IEmployerCostCalculator\n{\n    private static readonly decimal _employerSocialSecurityCap = 4909.5m;\n    private static readonly decimal _employerSocialSecurityFactor = 0.3057m;\n\n    private static readonly decimal _professionalContigencyFactor = 0.015m;\n    private static readonly decimal _professionalContigencyCap = 4909.5m;\n\n    private static readonly decimal _solidarityContributionFactor = 0.015m;\n    private static readonly decimal _solidarityContributionCap = 4909.5m;\n\n    public IDictionary<string, decimal> CalculateEmployerCosts(EmployerCostInfo info)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Employer Social Security\", CalculateEmployerSocialSecurity(info.AnnualSalary) },\n            { \"Professional Contingency\", CalculateProfessionalContigency(info.AnnualSalary) },\n            { \"Solidarity Contribution\", CalculateSolidarityContribution(info.AnnualSalary) },\n        };\n    }\n\n    public IDictionary<string, decimal> CalculateNonStatutoryCosts(decimal directCostOfEmployment, PricingRules pricingRules)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Professional Indemnity\", (pricingRules.ProfessionalIndemnity / 100) * directCostOfEmployment },\n            { \"Occupational Health & Safety\", (pricingRules.OccupationalHealthAndSafety / 100) * directCostOfEmployment },\n            { \"Medical Leave\", (pricingRules.MedicalLeave / 100) * directCostOfEmployment },\n            { \"Severance Cost\", (pricingRules.SeveranceCost / 100) * directCostOfEmployment },\n            { \"HR Support\", Helpers.CalculateHRSupportAmount(pricingRules, directCostOfEmployment) },\n            { \"Payroll Processing Fee\", Helpers.CalculatePayrollProcessingFee(pricingRules, directCostOfEmployment) }\n        };\n    }\n\n    private decimal CalculateProfessionalContigency(decimal annualSalary)\n    {\n        return Math.Min(_professionalContigencyCap, annualSalary/12) * _professionalContigencyFactor * 12;\n    }\n\n    private decimal CalculateSolidarityContribution(decimal annualSalary)\n    {\n        return Math.Max(0, (annualSalary / 12) - _solidarityContributionCap) * _solidarityContributionFactor * 12;\n    }\n\n    private decimal CalculateEmployerSocialSecurity(decimal annualSalary)\n    {\n        return Math.Min(_employerSocialSecurityCap, annualSalary/12) * _employerSocialSecurityFactor * 12;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Domain/Utils/SwitzerlandEmployerCostCalculator.cs\n// service: src\n﻿\nusing Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Services;\n\nnamespace Remundo.Pricing.Domain.Utils;\n\npublic class SwitzerlandEmployerCostCalculator : IEmployerCostCalculator\n{\n    private const decimal _insuranceNBUVMonthlyCap = 12350m;\n    private readonly decimal _insuranceNBUVFactor = 0.00584m;\n    private const decimal _insuranceUVGZMonthlyCap = 12350m;\n    private readonly decimal _insuranceUVGZFactor = 0.00154m;\n    private const decimal _insuranceUVGZIIMonthlyCap = 12650m;\n    private readonly decimal _insuranceUVGZIIFactor = 0.00084m;\n    private readonly decimal _pensionAHVAdminFactor = 0.0018m;\n    private readonly decimal _accidentInsuranceFactor = 0.001802m;\n    private readonly decimal _accidentInsuranceMonthlyCap = 12350m;\n    private readonly decimal _pensionALVFactor = 0.011m;\n    private readonly decimal _pensionALVMonthlyCap = 12350m;\n    private readonly decimal _socialSecurityOSDIFactor = 0.053m;\n    private readonly decimal _unemploymentFactor = 0.0045m;\n    private readonly decimal _unemploymentMonthlyCap = 12650m;\n    private readonly decimal _unemploymentALVZFactor = 0.005m;\n    private readonly decimal _unemploymentALVZMonthlyCap = 12350m;\n    private readonly decimal _familyAHVMonthlyCap = 13500m;\n    private readonly decimal _familyAHVFactor = 0.0135m;\n\n    public IDictionary<string, decimal> CalculateEmployerCosts(EmployerCostInfo info)\n    {\n        return new Dictionary<string, decimal>\n        {\n            {\"Insurance UVGZ\", CalculateInsuranceUVGZ(info.GrossSalary) },\n            {\"Accident Insurance\", CalculateAccidentInsurance(info.GrossSalary) },\n            {\"Insurance NBUV\", CalculateInsuranceNBUV(info.GrossSalary) },\n            {\"Insurance UVGZ-II\", CalculateInsuranceUVGZII(info.GrossSalary) },\n            {\"Pension AHV Administrative\",  CalculatePensionAHVAdmin(info.GrossSalary)},\n            {\"Pension ALV\", CalculatePensionALV(info.GrossSalary) },\n            {\"Social Security-OSDI\", CalculateSocialSecurityOSDI(info.GrossSalary) },\n            {\"Unemployment\",  CalculateUnemployment(info.GrossSalary)},\n            {\"Unemployment ALVZ\", CalculateUnemploymentALVZ(info.GrossSalary) },\n            {\"Family AHV\", CalculateFamilyAHV(info.GrossSalary)},\n        };\n    }\n\n    public IDictionary<string, decimal> CalculateNonStatutoryCosts(decimal directCostOfEmployment, PricingRules pricingRules)\n    {\n        return new Dictionary<string, decimal>\n        {\n            { \"Professional Indemnity\", (pricingRules.ProfessionalIndemnity / 100) * directCostOfEmployment },\n            { \"Occupational Health & Safety\", (pricingRules.OccupationalHealthAndSafety / 100) * directCostOfEmployment },\n            { \"Medical Leave\", (pricingRules.MedicalLeave / 100) * directCostOfEmployment },\n            { \"Severance Cost\", (pricingRules.SeveranceCost / 100) * directCostOfEmployment },\n            { \"HR Support\", Helpers.CalculateHRSupportAmount(pricingRules, directCostOfEmployment) },\n            { \"Payroll Processing Fee\", Helpers.CalculatePayrollProcessingFee(pricingRules, directCostOfEmployment) }\n        };\n    }\n\n    private decimal CalculatePensionAHVAdmin(decimal grossSalary)\n    {\n        return grossSalary * _pensionAHVAdminFactor;\n    }\n\n    private decimal CalculateInsuranceNBUV(decimal grossSalary)\n    {\n        decimal monthly = grossSalary / 12;\n        return Math.Min(_insuranceNBUVMonthlyCap, monthly) * _insuranceNBUVFactor * 12;\n    }\n\n    private decimal CalculateInsuranceUVGZ(decimal grossSalary)\n    {\n        decimal minCap = Math.Min(_insuranceUVGZMonthlyCap, grossSalary / 12);\n        return minCap * _insuranceUVGZFactor * 12;\n    }\n\n    private decimal CalculatePensionALV(decimal grossSalary)\n    {\n        decimal minCap = Math.Min(_pensionALVMonthlyCap, grossSalary / 12);\n        return minCap * _pensionALVFactor * 12;\n    }\n\n    private decimal CalculateSocialSecurityOSDI(decimal grossSalary)\n    {\n        return _socialSecurityOSDIFactor * grossSalary;\n    }\n\n    private decimal CalculateUnemployment(decimal grossSalary)\n    {\n        return Math.Min(_unemploymentMonthlyCap, grossSalary / 12) * _unemploymentFactor * 12;\n    }\n\n    private decimal CalculateAccidentInsurance(decimal grossSalary)\n    {\n        return Math.Min(_accidentInsuranceMonthlyCap, grossSalary / 12)  * _accidentInsuranceFactor * 12;\n    }\n\n    private decimal CalculateFamilyAHV(decimal grossSalary)\n    {\n        return Math.Min(_familyAHVMonthlyCap, grossSalary / 12) * _familyAHVFactor * 12;\n    }\n\n    private decimal CalculateUnemploymentALVZ(decimal grossSalary)\n    {\n        return Math.Max(0, ((grossSalary / 12) - _unemploymentALVZMonthlyCap)) * _unemploymentALVZFactor * 12;\n    }\n\n    private decimal CalculateInsuranceUVGZII(decimal grossSalary)\n    {\n        return Math.Min(_insuranceUVGZIIMonthlyCap, grossSalary / 12) * _insuranceUVGZIIFactor * 12;\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.HttpLib/HttpService.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Services;\nusing System.Net.Http.Json;\nusing System.Text;\nusing System.Text.Json.Nodes;\n\nnamespace Remundo.Pricing.HttpLib;\n\npublic class HttpService : IHttpService\n{\n    private readonly string _hostName;\n    private readonly HttpClient _client;\n    public HttpService(HttpClient httpClient, string hostName)\n    {\n        _hostName = hostName;\n        _client = httpClient;\n        _client.Timeout = new TimeSpan(0, 0, 60); // 60 seconds\n    }\n\n    public async Task PostAsync(JsonObject obj)\n    {\n        if (!obj.TryGetPropertyValue(\"DataSchema\", out var schema))\n            throw new Exception(\"Cannot parse DataSchema from json object\");\n\n        var json = obj.ToString();\n        var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n        var res = await _client.PostAsync($\"{_hostName}/api/servicing\", content);\n\n        if (res.IsSuccessStatusCode)\n            return;\n        throw new Exception($\"Request {schema} failed: {res.StatusCode} - {res} \");\n    }\n\n    public async Task<T> GetAsync<T>(string path)\n    {\n        var uri = _hostName.Contains(\"/servicing\") ? _hostName.Replace(\"/servicing\", path) : $\"{path}\";\n        var response = await _client.GetAsync($\"{_hostName}/{uri}\");\n\n        if (!response.IsSuccessStatusCode)\n            throw new Exception($\"GetAsync failed for Path: {path} Status: {response.StatusCode} Content: {response.Content}\");\n\n        var responseBody = await response.Content.ReadFromJsonAsync<T>();\n        return responseBody;\n    }\n\n    public async Task<decimal> GetExchangeRateAsync(string fromCurrency, string toCurrency)\n    {\n        return await GetAsync<decimal>($\"api/currencies/exchange-rates/{fromCurrency}/{toCurrency}\");\n    }\n\n    public PricingRules GetPricingRules(string tenantId, string countryIsoCode, string orgId)\n    {\n        return GetAsync<PricingRules>(\n                $\"api/{tenantId}/reference-data/pricingrules/employee/{countryIsoCode}/organisations/{orgId ?? \"null\"}\")\n            .Result ?? throw new Exception(\"Pricing Rules were not found.\");\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/AustriaTests.cs\n// service: src\n﻿using Remundo.Pricing.Adapter;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Tests.Fakes;\nusing Remundo.Pricing.Tests.Utils;\nusing NLog;\n\nnamespace Remundo.Pricing.Tests;\n\npublic class AustriaTests\n{\n    private InMemoryDomainRepository _inMemoryDomainRepo;\n    private Worker _sut;\n    private IHttpService _httpService;\n\n    [SetUp]\n    public void Setup()\n    {\n        _inMemoryDomainRepo = new InMemoryDomainRepository();\n        _httpService = new FakeHttpService();\n        _sut = new Worker(_inMemoryDomainRepo, LogManager.CreateNullLogger(), _httpService);\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_Then_I_Expect_PriceCalculatedV6_event()\n    {\n        // Assign\n        var expectedPricingIdentity = \"AT\";\n        var expectedEmployerCosts = new Dictionary<string, decimal>\n        {\n            {\"Pension Fund\", 1838.2032m.PennyUp() },\n            {\"Municipal Tax\", 3604.320m.PennyUp() },\n            {\"Family Levy\", 4685.616m.PennyUp() },\n            {\"Employer Social Security\", 14376.852m.PennyUp() },\n            {\"Employer Social Security (13/14)\",  2341.505m.PennyUp()},\n            {\"Employer Contribution Surcharge\", 444.5328m.PennyUp() },\n            {\"Chamber Of Commerce\", 420.504m.PennyUp() },\n            {\"Severance Cost\", 2838.8262336m.PennyUp() },\n            {\"Medical Leave\", 4435.66599m.PennyUp() },\n            {\"Occupational Health & Safety\", 2217.832995m.PennyUp() },\n            {\"Professional Indemnity\", 1478.55533m.PennyUp() },\n            {\"HR Support\", 6000m },\n            {\"Payroll Processing Fee\", 1680m },\n        };\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Austria/pricing-austria-1_0.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        var evt = (PriceCalculatedV7)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        var employerCosts = evt.Costs[\"Employer Cost\"].Where(x => x.Value != 0m).ToDictionary(x => x.Key, x => x.Value);\n        // Assert\n        Assert.That(evt.IsoCode, Is.EqualTo(expectedPricingIdentity));\n        CollectionAssert.AreEquivalent(expectedEmployerCosts, employerCosts);\n    }\n\n    [Test]\n    public void Given_I_receive_ReCalculatePrice_command_Then_I_Expect_PriceCalculatedV6_event()\n    {\n        // Assign\n        var expectedPricingIdentity = \"AT\";\n        var expectedEmployerCosts = new Dictionary<string, decimal>\n        {\n            {\"Pension Fund\", 1838.2032m.PennyUp() },\n            {\"Municipal Tax\", 3604.320m.PennyUp() },\n            {\"Family Levy\", 4685.616m.PennyUp() },\n            {\"Employer Social Security\", 14376.852m.PennyUp() },\n            {\"Employer Social Security (13/14)\",  2341.505m.PennyUp()},\n            {\"Employer Contribution Surcharge\", 444.5328m.PennyUp()},\n            {\"Chamber Of Commerce\", 420.504m.PennyUp() },\n            {\"Severance Cost\", 2838.8262336m.PennyUp() },\n            {\"Medical Leave\", 4435.66599m.PennyUp() },\n            {\"Occupational Health & Safety\", 2217.832995m.PennyUp() },\n            {\"Professional Indemnity\", 1478.55533m.PennyUp() },\n            {\"HR Support\", 6000m },\n            {\"Payroll Processing Fee\", 1680m },\n        };\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Austria/pricing-austria-1_0.json\");\n        var recloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Austria/recalculateprice-AT-1_0.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n        _sut.Process(recloudRequest);\n\n        var evt = (PriceCalculatedV7)_inMemoryDomainRepo.EventStore.Single().Value[1];\n        var employerCosts = evt.Costs[\"Employer Cost\"].Where(x => x.Value != 0m).ToDictionary(x => x.Key, x => x.Value);\n        // Assert\n        Assert.That(evt.IsoCode, Is.EqualTo(expectedPricingIdentity));\n        CollectionAssert.AreEquivalent(expectedEmployerCosts, evt.Costs[\"Employer Cost\"].Where(x => x.Value != 0m).ToDictionary(x=>x.Key, x=>x.Value));\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/BelgiumTests.cs\n// service: src\n﻿using NLog;\nusing Remundo.Pricing.Adapter;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Tests.Fakes;\nusing Remundo.Pricing.Tests.Utils;\nusing System.Reflection;\n\nnamespace Remundo.Pricing.Tests;\n\npublic class BelgiumTests\n{\n    private const decimal ACCURACY = 0.01m;\n\n    private InMemoryDomainRepository _inMemoryDomainRepo;\n    private Worker _sut;\n    private IHttpService _httpService;\n\n    [SetUp]\n    public void Setup()\n    {\n        _inMemoryDomainRepo = new InMemoryDomainRepository();\n        _httpService = new FakeHttpService();\n        _sut = new Worker(_inMemoryDomainRepo, LogManager.CreateNullLogger(), _httpService);\n    }\n\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_Then_I_Expect_PriceCalculatedV6_event()\n    {\n        // Assign\n        var expectedPricingIdentity = \"BE\";\n        var expectedEmployerCosts = new Dictionary<string, decimal>\n        {\n        //Statutory Costs\n            { \"Double Holiday Pay\", 963.97047812m },\n            { \"Social Security\", 2556.0636m },\n            { \"Eco Vouchers\", 20.83m },\n            { \"One-off Premium\", 26.04m },\n                //XML Costs\n            { \"Professional Indemnity\", 135.7890407812m},\n            { \"Occupational Health & Safety\", 203.6835611718m},\n            { \"Medical Leave\", 407.3671223436m},\n            { \"Severance Cost\", 3394.72601953m},\n        };\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Belgium/pricing-belgium-1_0.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        var evt = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        var employerCosts = evt.Costs[\"Employer Cost\"].Where(x => x.Value != 0m).ToDictionary(x => x.Key, x => x.Value / 12);\n\n        // Assert\n\n        Assert.Multiple(() =>\n        {\n            Assert.That(evt.IsoCode, Is.EqualTo(expectedPricingIdentity));\n            foreach (var (key, cost) in employerCosts)\n            {\n                Assert.That(employerCosts[key], Is.EqualTo(expectedEmployerCosts[key]).Within(ACCURACY), $\"Label: {key}\");\n            }\n        });\n    }\n\n    [Test]\n    public void Given_I_receive_ReCalculatePrice_command_Then_I_Expect_PriceCalculatedV6_event()\n    {\n        // Assign\n        var expectedPricingIdentity = \"BE\";\n        var expectedEmployerCosts = new Dictionary<string, decimal>\n        {\n        //Statutory Costs\n            { \"Double Holiday Pay\", 963.97047812m },\n            { \"Social Security\", 2556.0636m },\n            { \"Eco Vouchers\", 20.83m },\n            { \"One-off Premium\", 26.04m },\n                //XML Costs\n            { \"Professional Indemnity\", 135.7890407812m},\n            { \"Occupational Health & Safety\", 203.6835611718m},\n            { \"Medical Leave\", 407.3671223436m},\n            { \"Severance Cost\", 3394.72601953m},\n        };\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Belgium/pricing-belgium-1_0.json\");\n        var recloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Belgium/recalculateprice-BE-1_0.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n        _sut.Process(recloudRequest);\n\n        var evt = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1];\n        var employerCosts = evt.Costs[\"Employer Cost\"].Where(x => x.Value != 0m).ToDictionary(x => x.Key, x => x.Value / 12);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(evt.IsoCode, Is.EqualTo(expectedPricingIdentity));\n            foreach (var (key, cost) in employerCosts)\n            {\n                Assert.That(employerCosts[key], Is.EqualTo(expectedEmployerCosts[key]).Within(ACCURACY), $\"Label: {key}\");\n            }\n        });\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/BulgariaTests.cs\n// service: src\n﻿using Evento;\nusing Newtonsoft.Json.Linq;\nusing NLog;\nusing Remundo.Pricing.Adapter;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Tests.Fakes;\nusing Remundo.Pricing.Tests.Utils;\nusing NullLogger = NLog.NullLogger;\n\nnamespace Remundo.Pricing.Tests;\n\npublic class BulgariaTests\n{\n    private IHttpService _fakeHttpService;\n    private InMemoryDomainRepository _inMemoryDomainRepo;\n    private Worker _sut;\n\n    [SetUp]\n    public void Setup()\n    {\n        _inMemoryDomainRepo = new InMemoryDomainRepository();\n        _fakeHttpService = new FakeHttpServiceOriginal();\n        _sut = new Worker(_inMemoryDomainRepo, LogManager.CreateNullLogger(), _fakeHttpService);\n    }\n\n    [Test]\n    [TestCase(\"./PayloadSamples/Bulgaria/pricing-bg-1_0.json\")]\n    public void Given_I_Receive_A_CalculatePriceCommand_I_Expect_The_Correct_TotalCost(string payloadSample)\n    {\n        // Assign\n        var expectedTotalcost = 289377.29616m;\n        var cloudRequest = Helpers.BuildCloudRequest(payloadSample);\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost, Is.EqualTo(expectedTotalcost));\n\n    }\n\n    [Test]\n    public void Given_I_Receive_A_ReCalculatePriceCommand_I_Expect_The_Correct_TotalCost()\n    {\n        // Assign\n        var expectedTotalcost = 289377.29616m;\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Bulgaria/pricing-bg-1_0.json\");\n        var recalculate = Helpers.BuildCloudRequest(\"./PayloadSamples/Bulgaria/pricing-bg-vesting-1_0.json\");\n        // Act\n        _sut.Process(cloudRequest);\n        _sut.Process(recalculate);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1]).TotalCost, Is.EqualTo(expectedTotalcost));\n    }\n\n    [Test]\n    public void Given_I_Receive_A_ReCalculatePriceCommand_With_Incorrect_Id_I_Expect_An_Exception()\n    {\n        // Assign\n        var expectedTotalcost = 290308.51536m;\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Bulgaria/pricing-bg-1_0.json\");\n        var recalculate = Helpers.BuildCloudRequest(\"./PayloadSamples/Bulgaria/pricing-bg-wrongId-1_0.json\");\n        // Act\n        _sut.Process(cloudRequest);\n        Assert.Throws<AggregateNotFoundException>(() => _sut.Process(recalculate));\n    }\n\n    [Test]\n    [TestCase(\"Amdocs\", 17.20)]\n    [TestCase(\"XML-INT\", null)]\n    public void Given_I_receive_a_calculate_price_command_I_expect_to_get_the_correct_MSPFee_value_for_a_specific_tenant(string tenantId, decimal? expectedMSPFee)\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Bulgaria/pricing-bg-with-tenant-id-1_0.json\");\n\n        var data = JObject.Parse(cloudRequest.Data);\n        data[\"TenantId\"] = tenantId;\n        cloudRequest.Data = data.ToString();\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        var @event = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        var mspFee = @event.Costs.ContainsKey(\"Tenant Costs\") ? @event.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n\n        // Assert\n        Assert.That(mspFee, Is.EqualTo(expectedMSPFee));\n    }\n\n    [Test]\n    [TestCase(\"Amdocs\", 17.20, 7.78)]\n    [TestCase(\"XML-INT\", null, null)]\n    [TestCase(\"Acme\", null, null)]\n    public void Given_I_receive_a_RecalculatePrice_command_I_expect_the_MSPFee_value_to_be_recalculated_for_a_specific_tenant(string tenantId, decimal? expectedMSPFee, decimal? expectedRecalculatedMSPFee)\n    {\n        // Assign\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Bulgaria/pricing-bg-with-tenant-id-1_0.json\");\n        var recalculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Bulgaria/pricing-bg-recalculate-tenantCosts.json\");\n\n        var calculatePriceData = JObject.Parse(calculatePrice.Data);\n        calculatePriceData[\"TenantId\"] = tenantId;\n        calculatePrice.Data = calculatePriceData.ToString();\n\n        var recalculatePriceData = JObject.Parse(recalculatePrice.Data);\n        recalculatePriceData[\"TenantId\"] = tenantId;\n        recalculatePrice.Data = recalculatePriceData.ToString();\n\n        // Act\n        _sut.Process(calculatePrice);\n        _sut.Process(recalculatePrice);\n\n        var firstEvent = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        var secondEvent = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1];\n        var firstMspFee = firstEvent.Costs.ContainsKey(\"Tenant Costs\") ? firstEvent.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n        var recalculatedMspFee = secondEvent.Costs.ContainsKey(\"Tenant Costs\") ? secondEvent.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(firstMspFee, Is.EqualTo(expectedMSPFee));\n            Assert.That(recalculatedMspFee, Is.EqualTo(expectedRecalculatedMSPFee));\n        });\n    }\n\n    [TestCase(12345, 6484.1054865, 6494)]\n    [TestCase(120000, 48229.54936, 48238)]\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_with_a_Deposit_factor_I_expect_the_deposit_to_be_calculated_correctly(decimal annualSalary, decimal expectedDeposit, decimal expectedRounded)\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Bulgaria/pricing-bg-1_0-deposit-factor.json\");\n\n        // Replace the annual salary from the payload sample\n        var data = JObject.Parse(cloudRequest.Data);\n        data[\"AnnualSalary\"] = annualSalary;\n        cloudRequest.Data = data.ToString();\n\n        // Act\n        _sut.Process(cloudRequest);\n        // Assert\n        var @event = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        Assert.That(@event.Deposit, Is.EqualTo(expectedDeposit));\n        Assert.That(@event.DepositRounded, Is.EqualTo(expectedRounded));\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/CroatiaTests.cs\n// service: src\n﻿using Remundo.Pricing.Adapter;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Tests.Fakes;\nusing Remundo.Pricing.Tests.Utils;\nusing NLog;\n\nnamespace Remundo.Pricing.Tests;\n\npublic class CroatiaTests\n{\n    private const decimal ACCURACY = 0.01m;\n    private InMemoryDomainRepository _inMemoryDomainRepo;\n    private Worker _sut;\n    private IHttpService _httpService;\n\n    [SetUp]\n    public void Setup()\n    {\n        _inMemoryDomainRepo = new InMemoryDomainRepository();\n        _httpService = new FakeHttpService();\n        _sut = new Worker(_inMemoryDomainRepo, LogManager.CreateNullLogger(), _httpService);\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_Then_I_Expect_PriceCalculatedV6_event()\n    {\n        // Assign\n        var expectedPricingIdentity = \"HR\";\n        var expectedEmployerCosts = new Dictionary<string, decimal>\n        {\n            // Statutory costs = Employer Costs\n            {\"Employer Social Security\", 188.76m },\n\n            //XML Costs\n            {\"Professional Indemnity\", 13.33m },\n            {\"Occupational Health & Safety\", 19.99m },\n            {\"Medical Leave\", 39.98m },\n            {\"Severance Cost\", 111.02m },\n        };\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Croatia/pricing-croatia-1_0.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        var evt = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        var employerCosts = evt.Costs[\"Employer Cost\"].Where(x => x.Value != 0m).ToDictionary(x => x.Key, x => x.Value);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(evt.IsoCode, Is.EqualTo(expectedPricingIdentity));\n            foreach (var (key, cost) in employerCosts)\n            {\n                Assert.That(employerCosts[key], Is.EqualTo(expectedEmployerCosts[key]).Within(ACCURACY), $\"Label: {key}\");\n            }\n        });\n    }\n\n    [Test]\n    public void Given_I_receive_ReCalculatePrice_command_Then_I_Expect_PriceCalculatedV6_event()\n    {\n        // Assign\n        var expectedPricingIdentity = \"HR\";\n        var expectedEmployerCosts = new Dictionary<string, decimal>\n        {\n            // Statutory costs = Employer Costs\n            {\"Employer Social Security\", 188.76m },\n\n            //XML Costs\n            {\"Professional Indemnity\", 13.33m },\n            {\"Occupational Health & Safety\", 19.99m },\n            {\"Medical Leave\", 39.98m },\n            {\"Severance Cost\", 111.02m },\n        };\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Croatia/pricing-croatia-1_0.json\");\n        var recloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Croatia/recalculateprice-HR-1_0.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n        _sut.Process(recloudRequest);\n\n        var evt = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1];\n        var employerCosts = evt.Costs[\"Employer Cost\"].Where(x => x.Value != 0m).ToDictionary(x => x.Key, x => x.Value);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(evt.IsoCode, Is.EqualTo(expectedPricingIdentity));\n            foreach (var (key, cost) in employerCosts)\n            {\n                Assert.That(employerCosts[key], Is.EqualTo(expectedEmployerCosts[key]).Within(ACCURACY), $\"Label: {key}\");\n            }\n        });\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/CyprusTests.cs\n// service: src\nusing Newtonsoft.Json.Linq;\nusing NLog;\nusing Remundo.Pricing.Adapter;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Tests.Fakes;\nusing Remundo.Pricing.Tests.Utils;\n\nnamespace Remundo.Pricing.Tests;\n\npublic class CyprusTests\n{\n    private IHttpService _fakeHttpService;\n    private InMemoryDomainRepository _inMemoryDomainRepo;\n    private Worker _sut;\n\n    [SetUp]\n    public void Setup()\n    {\n        _inMemoryDomainRepo = new InMemoryDomainRepository();\n        _fakeHttpService = new FakeHttpService();\n        _sut = new Worker(_inMemoryDomainRepo, LogManager.CreateNullLogger(), _fakeHttpService);\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_I_expect_the_correct_total_cost_of_employment()\n    {\n        // Assign\n        const decimal expectedTotalCostOfEmployment = 14024.63m;\n        var calculatePriceV2 = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-1_0-pricecalculatedV2.json\");\n\n        // Act\n        _sut.Process(calculatePriceV2);\n\n        // Assert\n        Assert.That((((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost / 12).PennyUp(), Is.EqualTo(expectedTotalCostOfEmployment));\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePriceCyprus_command_I_expect_the_correct_monthly_employer_cost()\n    {\n        // Assign\n        const decimal expectedMonthlyEmployerCost = 2985.77m;\n        var calculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-1_0-pricecalculatedV2.json\");\n\n        // Act\n        _sut.Process(calculatePriceInEUR);\n\n        // Assert\n        Assert.That(((((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).EmployerCost) / 12).PennyUp(), Is.EqualTo(expectedMonthlyEmployerCost));\n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_Then_I_Expect_PriceCalculatedV2_event_with_the_new_insurance_data_in_command()\n    {\n        var expectedInsuranceFlags = new Dictionary<string, bool>\n        {\n            { \"Basic_MedicalInsurance_WorkerOnly\", true },\n            { \"Basic_MedicalInsurance_WorkerAndSpouse\", false },\n            { \"Basic_DentalInsurance_WorkerOnly\", false },\n            { \"Basic_DentalInsurance_WorkerAndSpouse\", false },\n            { \"Standard_MedicalInsurance_WorkerOnly\", false },\n            { \"DeathInsurance\", false }\n        };\n\n        var expectedLocalCurrencyInsuranceCosts = new Dictionary<string, decimal>\n        {\n            { \"Basic_MedicalInsurance_WorkerOnly\", 100m },\n            { \"Basic_MedicalInsurance_WorkerAndSpouse\", 200m },\n            { \"Basic_DentalInsurance_WorkerOnly\", 120m },\n            { \"Basic_DentalInsurance_WorkerAndSpouse\", 220m },\n            { \"Standard_MedicalInsurance_WorkerOnly\", 123m },\n            { \"DeathInsurance\", 461.55m },\n        };\n\n        // Assign\n        const decimal expectedAnnualSalary = 120000m;\n        const bool expectedDeathInsuranceSelected = false;\n        var calculatePriceV2 = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-1_0-pricecalculatedV2.json\");\n        var recalculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-1_0-RecalculatePrice-InsurancesV2-2.0.json\");\n\n        // Act\n        _sut.Process(calculatePriceV2);\n        _sut.Process(recalculatePrice);\n        var @event = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1];\n\n        // Assert\n        Assert.That(@event.GrossSalary, Is.EqualTo(expectedAnnualSalary));\n        Assert.That((((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).SelectedInsurances[\"DeathInsurance\"]), Is.EqualTo(expectedDeathInsuranceSelected));\n\n        CollectionAssert.AreEquivalent(expectedInsuranceFlags, @event.SelectedInsurances);\n\n        // Validate insurance costs except DeathInsurance (handle separately)\n        foreach (var kvp in expectedLocalCurrencyInsuranceCosts)\n        {\n            Assert.That(@event.EmployeeInsuranceFees[kvp.Key], Is.EqualTo(kvp.Value));\n        }\n\n    }\n\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_Then_I_Expect_the_price_to_be_correct()\n    {\n        // Assign\n        const decimal expectedBaseSalary = 120000m;\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-1_0-pricecalculatedV2.json\");\n\n        // Act\n        _sut.Process(calculatePrice);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).GrossSalary, Is.EqualTo(expectedBaseSalary));\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_Then_I_Expect_the_allowances_to_be_correct()\n    {\n        // Assign\n        decimal expectedAllowanceCost = 536.01m;\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-1_0-CurrencyV2.json\");\n\n        // Act\n        _sut.Process(calculatePrice);\n\n        // Assert\n        Assert.That((((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).Allowances[\"Car/Transportation\"]).PennyUp()\n            , Is.EqualTo(expectedAllowanceCost));\n\n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_I_should_be_able_to_get_the_correct_salary()\n    {\n        // Assign\n        decimal expectedBaseAnnualSalary = 120000m;\n        var recalculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-1_0-RecalculatePrice-InsurancesV2.json\");\n        var calculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-1_0-pricecalculatedV2.json\");\n\n        //Act\n        _sut.Process(calculatePriceInEUR);\n        _sut.Process(recalculatePriceInEUR);\n\n        // Assert\n        Assert.That((((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).GrossSalary),\n            Is.EqualTo(expectedBaseAnnualSalary));\n    }\n\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_oneoff_bonus_and_vesting_then_bonus_will_be_set()\n    {\n        // Assign\n        const decimal expectedBonusIncludingCosts = 12.48m;\n        const decimal expectedBonusAmount = 12m;\n        const decimal expectedVestingAmount = 1000m;\n        const decimal expectedVestingIncludingCosts = 1039.99999999999999999999999m;\n        const decimal expectedBonusTotal = 1052.47999999999999999999999m;\n        var calculatePriceInGbp = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-1_0-pricecalculatedV2.json\");\n        var recalculatePriceWithOneOffData = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-signingbonus-1_0.json\");\n        var recalculatePriceWithVestingBonus = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-vesting-1_0.json\");\n        var recalculatePriceWithInsurances = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-1_0-RecalculatePrice-InsurancesV2.json\");\n\n\n        //Act\n        _sut.Process(calculatePriceInGbp);\n        _sut.Process(recalculatePriceWithOneOffData);\n        _sut.Process(recalculatePriceWithVestingBonus);\n        _sut.Process(recalculatePriceWithOneOffData);\n        _sut.Process(recalculatePriceWithInsurances);\n\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[4]).VestingBonusAmount, Is.EqualTo(expectedVestingAmount));\n\n        // Assert\n        //Assert.That(((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[4]).SigningBonusCosts, Is.EqualTo(expectedBonusIncludingCosts));\n        //Assert.That(((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[4]).SigningBonusAmount, Is.EqualTo(expectedBonusAmount));\n        //Assert.That(((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[4]).VestingBonusAmount, Is.EqualTo(expectedVestingAmount));\n        //Assert.That(((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[4]).VestingBonusCosts, Is.EqualTo(expectedVestingIncludingCosts));\n        //Assert.That(((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[4]).AdditionalPaymentsTotal, Is.EqualTo(expectedBonusTotal));\n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_remove_vesting_bonus_then_vesting_will_be_set_to_zero()\n    {\n        // Assign\n        const decimal expectedVestingAmount = 0m;\n        const decimal expectedCliffMonths = 0m;\n        const decimal expectedTotalMonths = 0m;\n        var calculatePriceInGbp = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-1_0-pricecalculatedV2.json\");\n        var recalculatePriceWithVestingBonus = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-removevesting-1_0.json\");\n\n        // Act\n        _sut.Process(calculatePriceInGbp);\n        _sut.Process(recalculatePriceWithVestingBonus);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1]).VestingBonusAmount, Is.EqualTo(expectedVestingAmount));\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1]).VestingBonusCliffMonths, Is.EqualTo(expectedCliffMonths));\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1]).VestingBonusTotalMonths, Is.EqualTo(expectedTotalMonths));\n        });\n        \n    }\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_vesting_bonus_then_vesting_will_be_set()\n    {\n        var expectedVestingAmount = 1000m;\n        var expectedCliffMonths = 12m;\n        var expectedTotalMonths = 15m;\n        var calculateCloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-1_0-pricecalculatedV2.json\");\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-vesting-1_0.json\");\n\n        //Act\n        _sut.Process(calculateCloudRequest);\n        _sut.Process(cloudRequest);\n\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1]).VestingBonusAmount, Is.EqualTo(expectedVestingAmount));"}
{"text": "// file: src/Remundo.Pricing.Tests/CyprusTests.cs\n// service: src\n[Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_remove_vesting_bonus_then_vesting_will_be_set_to_zero()\n    {\n        // Assign\n        const decimal expectedVestingAmount = 0m;\n        const decimal expectedCliffMonths = 0m;\n        const decimal expectedTotalMonths = 0m;\n        var calculatePriceInGbp = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-1_0-pricecalculatedV2.json\");\n        var recalculatePriceWithVestingBonus = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-removevesting-1_0.json\");\n\n        // Act\n        _sut.Process(calculatePriceInGbp);\n        _sut.Process(recalculatePriceWithVestingBonus);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1]).VestingBonusAmount, Is.EqualTo(expectedVestingAmount));\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1]).VestingBonusCliffMonths, Is.EqualTo(expectedCliffMonths));\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1]).VestingBonusTotalMonths, Is.EqualTo(expectedTotalMonths));\n        });\n        \n    }\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_vesting_bonus_then_vesting_will_be_set()\n    {\n        var expectedVestingAmount = 1000m;\n        var expectedCliffMonths = 12m;\n        var expectedTotalMonths = 15m;\n        var calculateCloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-1_0-pricecalculatedV2.json\");\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-vesting-1_0.json\");\n\n        //Act\n        _sut.Process(calculateCloudRequest);\n        _sut.Process(cloudRequest);\n\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1]).VestingBonusAmount, Is.EqualTo(expectedVestingAmount));\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1]).VestingBonusCliffMonths, Is.EqualTo(expectedCliffMonths));\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1]).VestingBonusTotalMonths, Is.EqualTo(expectedTotalMonths));\n        });\n        \n    }\n\n    [Test]\n    public void Given_I_Select_An_Insurance_When_I_RecalculatePrice_I_expect_the_correct_monthly_total_Cost()\n    {\n        // Assign\n        const decimal expectedMonthlyTotalCostWithInsurance = 14024.63m;\n\n        var calculatePriceV2 = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-1_0-pricecalculatedV2.json\");\n        var recalculatePriceV2 = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-1_0-RecalculatePrice-InsurancesV2.json\");\n        // Act\n        _sut.Process(calculatePriceV2);\n        _sut.Process(recalculatePriceV2);\n\n        // Assert\n        Assert.That((((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost/12).PennyUp(), \n            Is.EqualTo(expectedMonthlyTotalCostWithInsurance));\n    }\n\n    [TestCase(188000, 581.4)] //551 EUR is 570 USD (rate is 1.033)\n    [TestCase(200000, 581.4)] \n    [TestCase(250000, 581.4)] \n    [TestCase(500000, 581.4)]\n    [Test]\n    public void Given_I_recieve_a_CalculatePrice_request_I_expect_to_calculate_the_correct_total(decimal annualSalary, decimal expectedLifeInsurance)\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-1_0-pricecalculatedV2.json\");\n\n        // Replace the annual salary from the payload sample\n        var data = JObject.Parse(cloudRequest.Data);\n        data[\"AnnualSalary\"] = annualSalary;\n        cloudRequest.Data = data.ToString();\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        // Assert\n        var @event = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        Assert.That(@event.EmployeeInsuranceFees[\"DeathInsurance\"].PennyUp(), Is.EqualTo(expectedLifeInsurance));\n    }\n    \n    [TestCase(50000, 12095.2035)]\n    [TestCase(120000, 28049.2552134)]\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_I_expect_the_deposit_to_be_calculated_correctly(decimal annualSalary, decimal expectedDeposit)\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-1_0-pricecalculatedV2.json\");\n\n        // Replace the annual salary from the payload sample\n        var data = JObject.Parse(cloudRequest.Data);\n        data[\"AnnualSalary\"] = annualSalary;\n        cloudRequest.Data = data.ToString();\n\n        // Act\n        _sut.Process(cloudRequest);\n        // Assert\n        var @event = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        Assert.That(@event.Deposit, Is.EqualTo(expectedDeposit));\n    }\n\n    [TestCase(12345, 9776.129025, 9800)]\n    [TestCase(120000, 69834.8489, 69850)]\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_with_a_Deposit_factor_I_expect_the_deposit_to_be_calculated_correctly(decimal annualSalary, decimal expectedDeposit, decimal expectedRounded)\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-1_0-deposit-factor.json\");\n\n        // Replace the annual salary from the payload sample\n        var data = JObject.Parse(cloudRequest.Data);\n        data[\"AnnualSalary\"] = annualSalary;\n        cloudRequest.Data = data.ToString();\n\n        // Act\n        _sut.Process(cloudRequest);\n        // Assert\n        var @event = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        Assert.That(@event.Deposit, Is.EqualTo(expectedDeposit));\n        Assert.That(@event.DepositRounded, Is.EqualTo(expectedRounded));\n    }\n\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_with_domain_and_allowances_I_expect_the_employer_cost_to_be_calculated_correctly()\n    {\n        // Assign\n        var eEmployerCost = 37457.462862m;\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-1_0-with-domain-and-allowances.json\");\n        //var exchangeRate = _fakExchangeRateReader.GetExchangeRate(\"USD\", \"EUR\").Result;\n        // Act\n        _sut.Process(cloudRequest);\n        // Assert\n        var @event = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n\n        Assert.Multiple(() => \n        {\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Professional Indemnity\"], Is.EqualTo(1498.77m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Occupational Health & Safety\"], Is.EqualTo(2248.15m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Medical Leave\"], Is.EqualTo(4496.29m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Severance Cost\"], Is.EqualTo(5770.23m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Training Development Fund\"], Is.EqualTo(632.16m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Social Security Contribution\"], Is.EqualTo(4984.98m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Social Cohesion Fund\"], Is.EqualTo(2528.64m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Severance Fund\"], Is.EqualTo(1517.19m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Holiday Fund\"], Is.EqualTo(10114.56m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"General Health System\"], Is.EqualTo(3666.53m));\n\n            Assert.That(@event.EmployerCost, Is.EqualTo(eEmployerCost));\n        });\n        \n    }\n\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_with_domain_and_allowances_followed_by_a_signing_bonus_command_then_I_expect_the_employer_cost_to_be_calculated_correctly()\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-1_0-with-domain-and-allowances.json\");\n        var cloudRequestRecalculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-signingbonus-2_0.json\");\n        //var exchangeRate = _fakExchangeRateReader.GetExchangeRate(\"USD\", \"EUR\").Result;\n        // Act\n        _sut.Process(cloudRequest);\n        _sut.Process(cloudRequestRecalculatePrice);\n\n        // Assert\n        var @event = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1];\n\n        Assert.Multiple(() =>\n        {\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Professional Indemnity\"], Is.EqualTo(1498.77m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Occupational Health & Safety\"], Is.EqualTo(2248.15m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Medical Leave\"], Is.EqualTo(4496.29m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Severance Cost\"], Is.EqualTo(5770.23m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Training Development Fund\"], Is.EqualTo(632.16m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Social Security Contribution\"], Is.EqualTo(4984.98m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Social Cohesion Fund\"], Is.EqualTo(2528.64m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Severance Fund\"], Is.EqualTo(1517.19m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Holiday Fund\"], Is.EqualTo(10114.56m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"General Health System\"], Is.EqualTo(3666.53m));\n            Assert.That(@event.EmployerCost, Is.EqualTo(37457.462862m));\n        });\n    }\n\n    [Test]\n    public void Given_platform_Fee_is_a_percentage_when_I_receive_a_CalculatePrice_request_I_expect_the_correct_total_cost()\n    {\n        // Assign\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-1_0-platformFee-percentage.json\");\n\n        var data = JObject.Parse(calculatePrice.Data);\n        data[\"IsoCode\"] = \"ES\";\n        calculatePrice.Data = data.ToString();\n\n        decimal expectedTotalCost = 81267.625m;\n        decimal expectedPlatformFee = 10600.125m;\n\n        // Act\n        _sut.Process(calculatePrice);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).PlatformFeeInLocalCurrency, Is.EqualTo(expectedPlatformFee));\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost, Is.EqualTo(expectedTotalCost));\n        });\n        \n\n    }\n\n    [Test]\n    public void Given_platform_Fee_is_a_fixed_fee_when_I_receive_a_CalculatePrice_request_I_expect_the_correct_total_cost()\n    {\n        // Assign\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-1_0-platformFee-fixed-fee.json\");\n\n        var data = JObject.Parse(calculatePrice.Data);"}
{"text": "// file: src/Remundo.Pricing.Tests/CyprusTests.cs\n// service: src\nAssert.That(@event.Costs[\"Employer Cost\"][\"Severance Fund\"], Is.EqualTo(1517.19m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Holiday Fund\"], Is.EqualTo(10114.56m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"General Health System\"], Is.EqualTo(3666.53m));\n            Assert.That(@event.EmployerCost, Is.EqualTo(37457.462862m));\n        });\n    }\n\n    [Test]\n    public void Given_platform_Fee_is_a_percentage_when_I_receive_a_CalculatePrice_request_I_expect_the_correct_total_cost()\n    {\n        // Assign\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-1_0-platformFee-percentage.json\");\n\n        var data = JObject.Parse(calculatePrice.Data);\n        data[\"IsoCode\"] = \"ES\";\n        calculatePrice.Data = data.ToString();\n\n        decimal expectedTotalCost = 81267.625m;\n        decimal expectedPlatformFee = 10600.125m;\n\n        // Act\n        _sut.Process(calculatePrice);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).PlatformFeeInLocalCurrency, Is.EqualTo(expectedPlatformFee));\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost, Is.EqualTo(expectedTotalCost));\n        });\n        \n\n    }\n\n    [Test]\n    public void Given_platform_Fee_is_a_fixed_fee_when_I_receive_a_CalculatePrice_request_I_expect_the_correct_total_cost()\n    {\n        // Assign\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-1_0-platformFee-fixed-fee.json\");\n\n        var data = JObject.Parse(calculatePrice.Data);\n        data[\"IsoCode\"] = \"ES\";\n        calculatePrice.Data = data.ToString();\n\n        decimal expectedPlatformFee = 6000m;\n        decimal expectedTotalCost = 9629m;\n\n        // Act\n        _sut.Process(calculatePrice);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).PlatformFeeInLocalCurrency, Is.EqualTo(expectedPlatformFee));\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost, Is.EqualTo(expectedTotalCost));\n        });\n        \n\n    }\n\n    [Test]\n    [TestCase(81267.63, true)]\n    [TestCase(9629, false)]\n    public void Given_hrsupport_is_or_isnt_a_percentage_when_I_receive_a_calculatePrice_request_I_expect_the_correct_total_cost(decimal expectedTotalCost, bool isPercentage)\n    {\n        // Assign\n        var calculatePrice = Helpers.BuildCloudRequest($\"./PayloadSamples/Cyprus/pricing-CY-1_0-platformFee-{(isPercentage ? \"percentage\" : \"fixed-fee\")}.json\");\n\n        // Act\n        _sut.Process(calculatePrice);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost.PennyUp(), Is.EqualTo(expectedTotalCost));\n        });\n    }\n\n    [Test]\n    [TestCase(81267.63, true)]\n    [TestCase(9629, false)]\n    public void Given_payrollprocessingfee_is_or_isnt_a_percentage_when_I_receive_a_calculatePrice_request_I_expect_the_correct_total_cost(decimal expectedTotalCost, bool isPercentage)\n    {\n        // Assign\n        var calculatePrice = Helpers.BuildCloudRequest($\"./PayloadSamples/Cyprus/pricing-CY-1_0-platformFee-{(isPercentage ? \"percentage\" : \"fixed-fee\")}.json\");\n\n        // Act\n        _sut.Process(calculatePrice);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost.PennyUp(), Is.EqualTo(expectedTotalCost));\n        });\n    }\n\n    [Test]\n    [TestCase(\"Amdocs\", 19.02)]\n    [TestCase(\"XML-INT\", null)]\n    public void Given_I_receive_a_calculate_price_command_I_expect_to_get_the_correct_MSPFee_value_for_a_specific_tenant(string tenantId, decimal? expectedMSPFee)\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-tenantCosts.json\");\n\n        var data = JObject.Parse(cloudRequest.Data);\n        data[\"TenantId\"] = tenantId;\n        cloudRequest.Data = data.ToString();\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        var @event = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        var mspFee = @event.Costs.ContainsKey(\"Tenant Costs\") ? @event.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n\n        // Assert\n        Assert.That(mspFee, Is.EqualTo(expectedMSPFee));\n    }\n\n    [Test]\n    [TestCase(\"Amdocs\", 19.02, 41.06)]\n    [TestCase(\"XML-INT\", null, null)]\n    [TestCase(\"Acme\", null, null)]\n    public void Given_I_receive_a_RecalculatePrice_command_I_expect_the_MSPFee_value_to_be_recalculated_for_a_specific_tenant(string tenantId, decimal? expectedMSPFee, decimal? expectedRecalculatedMSPFee)\n    {\n        // Assign\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/pricing-CY-tenantCosts.json\");\n        var recalculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Cyprus/recalculateprice-CY-tenantCosts.json\");\n\n        var calculatePriceData = JObject.Parse(calculatePrice.Data);\n        calculatePriceData[\"TenantId\"] = tenantId;\n        calculatePrice.Data = calculatePriceData.ToString();\n\n        var recalculatePriceData = JObject.Parse(recalculatePrice.Data);\n        recalculatePriceData[\"TenantId\"] = tenantId;\n        recalculatePrice.Data = recalculatePriceData.ToString();\n\n        // Act\n        _sut.Process(calculatePrice);\n        _sut.Process(recalculatePrice);\n\n        var firstEvent = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        var secondEvent = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1];\n        var firstMspFee = firstEvent.Costs.ContainsKey(\"Tenant Costs\") ? firstEvent.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n        var recalculatedMspFee = secondEvent.Costs.ContainsKey(\"Tenant Costs\") ? secondEvent.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(firstMspFee, Is.EqualTo(expectedMSPFee));\n            Assert.That(recalculatedMspFee, Is.EqualTo(expectedRecalculatedMSPFee));\n        });\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/CzechRepublicTests.cs\n// service: src\nusing Newtonsoft.Json.Linq;\nusing NLog;\nusing Remundo.Pricing.Adapter;\nusing Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Tests.Fakes;\nusing Remundo.Pricing.Tests.Utils;\n\nnamespace Remundo.Pricing.Tests;\n\n[TestFixture]\npublic class CzechRepublicTests\n{\n    private const string PAYLOAD_DIR = $\"./PayloadSamples/CzechRepublic\";\n    private const decimal ACCURACY = 0.1m; // Accurate to 1.d.p (Prices in Access are rounded to 2.d.p) \n\n    private IHttpService _http;\n    private ILogger _logger;\n    private InMemoryDomainRepository _repo;\n    private Worker _sut;\n\n    [SetUp]\n    public void Setup()\n    {\n        _repo = new InMemoryDomainRepository();\n        _http = new FakeHttpService();\n        _logger = LogManager.CreateNullLogger();\n        _sut = new Worker(_repo, _logger, _http);\n    }\n\n    [Test, Category(\"Statutory\")]\n    [TestCase(30000, 620 * 12, 225 * 12, 1200)]\n    [TestCase(45000, 930 * 12, 337.50 * 12, 1200)]\n    [TestCase(60000, 1240 * 12, 450 * 12, 1200)]\n    [TestCase(420000, 8680 * 12, 3150 * 12, 1200)]\n    public void CalculatePriceCzechRepublic_CalculatesStatutoryCorrectCosts(\n        decimal salary, \n        decimal eSocialSecurity, \n        decimal eHealthInsurance, \n        decimal eMedicalCheckup)\n    {\n\n        var c1 = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-CZ-1_0-pricecalculatedV2.json\");\n        // Assign\n        var calculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-CZ-1_0-pricecalculatedV2.json\"),\n            new Dictionary<string, dynamic>\n            {\n                { \"AnnualSalary\", salary },\n            }); \n\n        // Act\n        _sut.Process(calculate);\n\n        // Assert\n        var stream = _repo.EventStore.Single().Value;\n        var evt = (PriceCalculatedV6)stream.First();\n        var costs = evt.Costs[\"Employer Cost\"];\n        Assert.Multiple(() =>\n        {\n            Assert.That(costs[\"Social Security Contributions\"], Is.EqualTo(eSocialSecurity).Within(ACCURACY), \"Social Security Contributions\");\n            Assert.That(costs[\"Health Insurance\"], Is.EqualTo(eHealthInsurance).Within(ACCURACY), \"Health Insurance\");\n            Assert.That(costs[\"Medical Check up\"], Is.EqualTo(eMedicalCheckup).Within(ACCURACY), \"Medical Check up\");\n        }); \n    }\n\n    [Test, Category(\"Non Statutory\")]\n    [TestCase(30000, 34.45 * 12, 51.68 * 12, 103.35 * 12, 287.08 * 12)]\n    [TestCase(45000, 51.18 * 12, 76.76 * 12, 153.52 * 12, 426.46 * 12)]\n    [TestCase(60000, 67.90 * 12, 101.85 * 12, 203.70 * 12, 565.83 * 12)]\n    [TestCase(420000, 469.30 * 12, 703.95 * 12, 1407.90 * 12, 3910.82 * 12)]\n    public void CalculatePriceCzechRepublic_CalculatesNonStatutoryCorrectCosts(\n        decimal salary,\n        decimal eProfessionalIndemnity,\n        decimal eOccupationalHealth,\n        decimal eMedicalLeave,\n        decimal eSeverance)\n    {\n        // Assign\n        var calculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-CZ-1_0-pricecalculatedV2.json\"),\n            new Dictionary<string, dynamic>\n            {\n                { \"AnnualSalary\", salary },\n            });\n\n        // Act\n        _sut.Process(calculate);\n\n        // Assert\n        var stream = _repo.EventStore.Single().Value;\n        var evt = (PriceCalculatedV6)stream.First();\n        var costs = evt.Costs[\"Employer Cost\"];\n        Assert.Multiple(() =>\n        {\n            Assert.That(costs[\"Professional Indemnity\"], Is.EqualTo(eProfessionalIndemnity).Within(ACCURACY), \"Professional Indemnity\");\n            Assert.That(costs[\"Occupational Health & Safety\"], Is.EqualTo(eOccupationalHealth).Within(ACCURACY), \"Occupational Health & Safety\");\n            Assert.That(costs[\"Medical Leave\"], Is.EqualTo(eMedicalLeave).Within(ACCURACY), \"Medical Leave\");\n            Assert.That(costs[\"Severance Cost\"], Is.EqualTo(eSeverance).Within(ACCURACY), \"Severance Cost\");\n        });\n    }\n\n    [Test, Category(\"Statutory\")]\n    [TestCase(30000, 620 * 12, 225 * 12, 1200)]\n    [TestCase(45000, 930 * 12, 337.50 * 12, 1200)]\n    [TestCase(60000, 1240 * 12, 450 * 12, 1200)]\n    [TestCase(420000, 8680 * 12, 3150 * 12, 1200)]\n    public void RecalculatePrice_CalculatesStatutoryCorrectCosts(\n        decimal salary,\n        decimal eSocialSecurity,\n        decimal eHealthInsurance,\n        decimal eMedicalCheckup)\n    {\n        // Assign\n        var calculate = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-CZ-1_0-pricecalculatedV2.json\");\n\n        var recalculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-CZ-1_0-RecalculatePrice.json\"),\n            new Dictionary<string, dynamic>\n            {\n                { \"AnnualSalary\", salary },\n            });\n\n        // Act\n        _sut.Process(calculate);\n        _sut.Process(recalculate);\n\n        // Assert\n        var stream = _repo.EventStore.Single().Value;\n        var evt = (PriceCalculatedV6)stream.Last();\n        var costs = evt.Costs[\"Employer Cost\"];\n        Assert.Multiple(() =>\n        {\n            Assert.That(costs[\"Social Security Contributions\"], Is.EqualTo(eSocialSecurity).Within(ACCURACY), \"Social Security Contributions\");\n            Assert.That(costs[\"Health Insurance\"], Is.EqualTo(eHealthInsurance).Within(ACCURACY), \"Health Insurance\");\n            Assert.That(costs[\"Medical Check up\"], Is.EqualTo(eMedicalCheckup).Within(ACCURACY), \"Medical Check up\");\n        });\n    }\n\n    [Test, Category(\"Non Statutory\")]\n    [TestCase(30000, 34.45 * 12, 51.68 * 12, 103.35 * 12, 287.08 * 12)]\n    [TestCase(45000, 51.18 * 12, 76.76 * 12, 153.52 * 12, 426.46 * 12)]\n    [TestCase(60000, 67.90 * 12, 101.85 * 12, 203.70 * 12, 565.83 * 12)]\n    [TestCase(420000, 469.30 * 12, 703.95 * 12, 1407.90 * 12, 3910.82 * 12)]\n    public void RecalculatePrice_CalculatesNonStatutoryCorrectCosts(\n        decimal salary,\n        decimal eProfessionalIndemnity,\n        decimal eOccupationalHealth,\n        decimal eMedicalLeave,\n        decimal eSeverance)\n    {\n        // Assign\n        var calculate = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-CZ-1_0-pricecalculatedV2.json\");\n\n        var recalculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-CZ-1_0-RecalculatePrice.json\"),\n            new Dictionary<string, dynamic>\n            {\n                { \"AnnualSalary\", salary },\n            });\n\n        // Act\n        _sut.Process(calculate);\n        _sut.Process(recalculate);\n\n        // Assert\n        var stream = _repo.EventStore.Single().Value;\n        var evt = (PriceCalculatedV6)stream.Last();\n        var costs = evt.Costs[\"Employer Cost\"];\n        Assert.Multiple(() =>\n        {\n            Assert.That(costs[\"Professional Indemnity\"], Is.EqualTo(eProfessionalIndemnity).Within(ACCURACY), \"Professional Indemnity\");\n            Assert.That(costs[\"Occupational Health & Safety\"], Is.EqualTo(eOccupationalHealth).Within(ACCURACY), \"Occupational Health & Safety\");\n            Assert.That(costs[\"Medical Leave\"], Is.EqualTo(eMedicalLeave).Within(ACCURACY), \"Medical Leave\");\n            Assert.That(costs[\"Severance Cost\"], Is.EqualTo(eSeverance).Within(ACCURACY), \"Severance Cost\");\n        });\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/DefaultTests.cs\n// service: src\nusing NLog;\nusing Newtonsoft.Json.Linq;\nusing Remundo.Pricing.Adapter;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Tests.Fakes;\nusing Remundo.Pricing.Tests.Utils;\n\nnamespace Remundo.Pricing.Tests;\n\npublic class DefaultTests\n{\n    private readonly IHttpService _fakeHttpService = new FakeHttpService();\n\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_with_domain_and_allowances_I_expect_the_employer_cost_to_be_calculated_correctly()\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _fakeHttpService);\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Default/pricing-Default-1_0-with-domain-and-allowances.json\");\n        //var exchangeRate = _fakExchangeRateReader.GetExchangeRate(\"USD\", \"EUR\").Result;\n\n        // Act\n        sut.Process(cloudRequest);\n\n        // Assert\n        var @event = (PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[0];\n        Assert.Multiple(() =>\n        {\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Professional Indemnity\"], Is.EqualTo(1264.32m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Occupational Health & Safety\"], Is.EqualTo(1896.48m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Medical Leave\"], Is.EqualTo(3792.96m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Severance Cost\"], Is.EqualTo(16044.23m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"HR Support\"], Is.EqualTo(144m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Payroll Processing Fee\"], Is.EqualTo(144m));\n\n            Assert.That(@event.EmployerCost, Is.EqualTo(23285.9808m));\n        });\n    }\n\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_with_domain_and_allowances_followed_by_a_signing_bonus_command_then_I_expect_the_employer_cost_to_be_calculated_correctly()\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _fakeHttpService);\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Default/pricing-Default-1_0-with-domain-and-allowances.json\");\n        var cloudRequestRecalculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Default/pricing-Default-signingbonus-2_0.json\");\n        //var exchangeRate = _fakExchangeRateReader.GetExchangeRate(\"USD\", \"EUR\").Result;\n        // Act\n        sut.Process(cloudRequest);\n        sut.Process(cloudRequestRecalculatePrice);\n\n        // Assert\n        var @event = (PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[1];\n\n        Assert.Multiple(() =>\n        {\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Professional Indemnity\"], Is.EqualTo(1264.32m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Occupational Health & Safety\"], Is.EqualTo(1896.48m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Medical Leave\"], Is.EqualTo(3792.96m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Severance Cost\"], Is.EqualTo(16044.23m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"HR Support\"], Is.EqualTo(170.22m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Payroll Processing Fee\"], Is.EqualTo(170.22m));\n            Assert.That(@event.Costs[\"Additional Payments\"][\"Signing Bonus\"], Is.EqualTo(14.19m));\n\n            Assert.That(@event.EmployerCost, Is.EqualTo(23338.406331914893617021276595m));\n        });\n    }\n\n    [TestCase(\"default\")]\n    [Test]\n    public void Given_An_IsoCode_Is_In_Medical_And_Dental_Insurance_Dictionary_Then_The_Medical_And_Dental_Insurance_Cost_Is_Correct(string isoCode)\n    {\n        var expectedInsuranceFlags = new Dictionary<string, bool>\n        {\n            { \"DeathInsurance\", false },\n            { \"Basic_MedicalInsurance_WorkerOnly\", false },\n            { \"Basic_MedicalInsurance_WorkerAndSpouse\", false },\n            { \"Basic_DentalInsurance_WorkerOnly\", false },\n            { \"Basic_DentalInsurance_WorkerAndSpouse\", false },\n            { \"Standard_MedicalInsurance_WorkerOnly\", false },            \n        };\n\n        var expectedLocalCurrencyInsuranceCosts = new Dictionary<string, decimal>\n        {\n            { \"Basic_MedicalInsurance_WorkerOnly\", 94m },\n            { \"Basic_MedicalInsurance_WorkerAndSpouse\", 188m },\n            { \"Basic_DentalInsurance_WorkerOnly\", 112.8m },\n            { \"Basic_DentalInsurance_WorkerAndSpouse\", 206.8m },\n            { \"Standard_MedicalInsurance_WorkerOnly\", 115.62m },\n            { \"DeathInsurance\", 274.7m },\n        };\n\n        var expectedLifeInsuranceCost = expectedLocalCurrencyInsuranceCosts[\"DeathInsurance\"];\n\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _fakeHttpService);\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Default/pricing-Default-1_0-v2.json\");\n        var recalculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Default/pricing-Default-1_0-RecalculatePrice-v2.json\");\n        //Replace IsoCode with test value\n        var data = JObject.Parse(calculatePrice.Data);\n        data[\"IsoCode\"] = isoCode;\n        calculatePrice.Data = data.ToString();\n\n        var recalcData = JObject.Parse(recalculatePrice.Data);\n        recalcData[\"IsoCode\"] = isoCode;\n        recalculatePrice.Data = recalcData.ToString();\n\n        // Act\n        sut.Process(calculatePrice);\n        sut.Process(recalculatePrice);\n        // Assert\n\n        var @event = (PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[0];\n\n        Assert.That(((PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[0]).EmployeeInsuranceFees[\"DeathInsurance\"], Is.EqualTo(expectedLifeInsuranceCost));\n        CollectionAssert.AreEquivalent(expectedInsuranceFlags, @event.SelectedInsurances);\n\n        // Validate insurance costs except DeathInsurance (handle separately)\n        foreach (var kvp in expectedLocalCurrencyInsuranceCosts)\n        {\n            Assert.That(@event.EmployeeInsuranceFees[kvp.Key], Is.EqualTo(kvp.Value));\n        }\n    }\n\n    [Test]\n    public void Given_platform_Fee_is_a_percentage_when_I_receive_a_CalculatePrice_request_I_expect_the_correct_total_cost()\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _fakeHttpService);\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Default/pricing-Default-1_0-platformFee-percentage.json\");\n\n        var data = JObject.Parse(calculatePrice.Data);\n        data[\"IsoCode\"] = \"default\";\n        calculatePrice.Data = data.ToString();\n\n        decimal expectedTotalCost = 66125m;\n        decimal expectedPlatformFee = 8625m;\n\n        // Act\n        sut.Process(calculatePrice);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[0]).PlatformFeeInLocalCurrency, Is.EqualTo(expectedPlatformFee));\n            Assert.That(((PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost, Is.EqualTo(expectedTotalCost));\n        });\n    }\n\n    [Test]\n    public void Given_platform_Fee_is_a_fixed_fee_when_I_receive_a_CalculatePrice_request_I_expect_the_correct_total_cost()\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _fakeHttpService);\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Default/pricing-Default-1_0-platformFee-fixed-fee.json\");\n\n        var data = JObject.Parse(calculatePrice.Data);\n        data[\"IsoCode\"] = \"default\";\n        calculatePrice.Data = data.ToString();\n\n        decimal expectedPlatformFee = 6000m;\n        decimal expectedTotalCost = 9400m;\n\n        // Act\n        sut.Process(calculatePrice);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[0]).PlatformFeeInLocalCurrency, Is.EqualTo(expectedPlatformFee));\n            Assert.That(((PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost, Is.EqualTo(expectedTotalCost));\n        });\n    }\n\n\n    [Test]\n    [TestCase(66125, true)]\n    [TestCase(9400, false)]\n    public void Given_hrsupport_is_or_isnt_a_percentage_when_I_receive_a_calculatePrice_request_I_expect_the_correct_total_cost(decimal expectedTotalCost, bool isPercentage)\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _fakeHttpService);\n        var calculatePrice = Helpers.BuildCloudRequest($\"./PayloadSamples/Default/pricing-Default-1_0-platformFee-{(isPercentage ? \"percentage\" : \"fixed-fee\")}.json\");\n\n        // Act\n        sut.Process(calculatePrice);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost.PennyUp(), Is.EqualTo(expectedTotalCost));\n        });\n    }\n\n    [Test]\n    [TestCase(66125, true)]\n    [TestCase(9400, false)]\n    public void Given_payrollprocessingfee_is_or_isnt_a_percentage_when_I_receive_a_calculatePrice_request_I_expect_the_correct_total_cost(decimal expectedTotalCost, bool isPercentage)\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _fakeHttpService);\n        var calculatePrice = Helpers.BuildCloudRequest($\"./PayloadSamples/Default/pricing-Default-1_0-platformFee-{(isPercentage ? \"percentage\" : \"fixed-fee\")}.json\");\n\n        // Act\n        sut.Process(calculatePrice);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost.PennyUp(), Is.EqualTo(expectedTotalCost));\n    }\n\n    [Test]\n    [TestCase(\"Amdocs\", 16.63)]"}
{"text": "// file: src/Remundo.Pricing.Tests/DefaultTests.cs\n// service: src\n[Test]\n    [TestCase(66125, true)]\n    [TestCase(9400, false)]\n    public void Given_hrsupport_is_or_isnt_a_percentage_when_I_receive_a_calculatePrice_request_I_expect_the_correct_total_cost(decimal expectedTotalCost, bool isPercentage)\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _fakeHttpService);\n        var calculatePrice = Helpers.BuildCloudRequest($\"./PayloadSamples/Default/pricing-Default-1_0-platformFee-{(isPercentage ? \"percentage\" : \"fixed-fee\")}.json\");\n\n        // Act\n        sut.Process(calculatePrice);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost.PennyUp(), Is.EqualTo(expectedTotalCost));\n        });\n    }\n\n    [Test]\n    [TestCase(66125, true)]\n    [TestCase(9400, false)]\n    public void Given_payrollprocessingfee_is_or_isnt_a_percentage_when_I_receive_a_calculatePrice_request_I_expect_the_correct_total_cost(decimal expectedTotalCost, bool isPercentage)\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _fakeHttpService);\n        var calculatePrice = Helpers.BuildCloudRequest($\"./PayloadSamples/Default/pricing-Default-1_0-platformFee-{(isPercentage ? \"percentage\" : \"fixed-fee\")}.json\");\n\n        // Act\n        sut.Process(calculatePrice);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost.PennyUp(), Is.EqualTo(expectedTotalCost));\n    }\n\n    [Test]\n    [TestCase(\"Amdocs\", 16.63)]\n    [TestCase(\"XML-INT\", null)]\n    public void Given_I_receive_a_calculate_price_command_I_expect_to_get_the_correct_MSPFee_value_for_a_specific_tenant(string tenantId, decimal? expectedMSPFee)\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _fakeHttpService);\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Default/pricing-Default-1_0-with-tenant-id.json\");\n\n        var data = JObject.Parse(cloudRequest.Data);\n        data[\"TenantId\"] = tenantId;\n        cloudRequest.Data = data.ToString();\n\n        // Act\n        sut.Process(cloudRequest);\n\n        var @event = (PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[0];\n        var mspFee = @event.Costs.ContainsKey(\"Tenant Costs\") ? @event.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n\n        // Assert\n        Assert.That(mspFee, Is.EqualTo(expectedMSPFee));\n    }\n\n    [Test]\n    [TestCase(\"Amdocs\", 16.63, 32.54)]\n    [TestCase(\"XML-INT\", null, null)]\n    [TestCase(\"Acme\", null, null)]\n    public void Given_I_receive_a_RecalculatePrice_command_I_expect_the_MSPFee_value_to_be_recalculated_for_a_specific_tenant(string tenantId, decimal? expectedMSPFee, decimal? expectedRecalculatedMSPFee)\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _fakeHttpService);\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Default/pricing-Default-1_0-with-tenant-id.json\");\n        var recalculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Default/recalculateprice-V2-Default-tenantCosts.json\");\n\n        var calculatePriceData = JObject.Parse(calculatePrice.Data);\n        calculatePriceData[\"TenantId\"] = tenantId;\n        calculatePrice.Data = calculatePriceData.ToString();\n\n        var recalculatePriceData = JObject.Parse(recalculatePrice.Data);\n        recalculatePriceData[\"TenantId\"] = tenantId;\n        recalculatePrice.Data = recalculatePriceData.ToString();\n\n        // Act\n        sut.Process(calculatePrice);\n        sut.Process(recalculatePrice);\n\n        var firstEvent = (PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[0];\n        var secondEvent = (PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[1];\n        var firstMspFee = firstEvent.Costs.ContainsKey(\"Tenant Costs\") ? firstEvent.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n        var recalculatedMspFee = secondEvent.Costs.ContainsKey(\"Tenant Costs\") ? secondEvent.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(firstMspFee, Is.EqualTo(expectedMSPFee));\n            Assert.That(recalculatedMspFee, Is.EqualTo(expectedRecalculatedMSPFee));\n        });\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/DenmarkTests.cs\n// service: src\n﻿using Remundo.Pricing.Adapter;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Tests.Fakes;\nusing Remundo.Pricing.Tests.Utils;\nusing NLog;\n\nnamespace Remundo.Pricing.Tests;\n\npublic class DenmarkTests\n{\n    private InMemoryDomainRepository _inMemoryDomainRepo;\n    private Worker _sut;\n    private IHttpService _httpService;\n    private const string PAYLOAD_DIR = \"./PayloadSamples/Denmark\";\n\n    [SetUp]\n    public void Setup()\n    {\n        _inMemoryDomainRepo = new InMemoryDomainRepository();\n        _httpService = new FakeHttpService();\n        _sut = new Worker(_inMemoryDomainRepo, LogManager.CreateNullLogger(), _httpService);\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_Then_I_Expect_PriceCalculatedV7_event()\n    {\n        // Assign\n        var expectedPricingIdentity = \"DK\";\n        var expectedMonthlyEmployerCostTotal = 5191.87m;\n        var expectedEmployerCosts = new Dictionary<string, decimal>\n        {\n            {\"Apprenticeships, Vocational Training\", 3590m },\n            {\"Industrial Injuries Insurance\", 5000m },\n            {\"Job Loss Due To Health or Injury\", 592m },\n            {\"Maternity Fund Contribution\", 1500m },\n            {\"Pension Contribution\",  2376m},\n            {\"Professional Indemnity\", 610.58m },\n            {\"Occupational Health & Safety\", 915.87m },\n            {\"Medical Leave\", 1831.74m },\n            {\"Severance Cost\", 5086.14m },\n            {\"HR Support\", 32640m },\n            {\"Payroll Processing Fee\", 8160m },\n            {\"Special Prices\", 0m },\n        };\n        var cloudRequest = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-DK-1_0.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        var evt = (PriceCalculatedV7)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        var employerCosts = evt.Costs[\"Employer Cost\"].ToDictionary(x => x.Key, x => x.Value.PennyUp());\n\n        // Assert\n        CollectionAssert.AreEquivalent(expectedEmployerCosts, employerCosts);\n        Assert.Multiple(() =>\n        {\n            Assert.That(evt.IsoCode, Is.EqualTo(expectedPricingIdentity));\n            Assert.That((employerCosts.Sum(x => x.Value) / 12).PennyUp(), Is.EqualTo(expectedMonthlyEmployerCostTotal));\n        });\n    }\n\n    [Test]\n    public void Given_I_receive_ReCalculatePrice_command_WithInsurances_Then_I_Expect_PriceCalculatedV7_event()\n    {\n        // Assign\n        var expectedPricingIdentity = \"DK\";\n        var expectedMonthlyTotalCost = 9199.89m;\n        var expectedEmployerCosts = new Dictionary<string, decimal>\n        {\n            {\"Apprenticeships, Vocational Training\", 3590m },\n            {\"Industrial Injuries Insurance\", 5000m },\n            {\"Job Loss Due To Health or Injury\", 592m },\n            {\"Maternity Fund Contribution\", 1500m },\n            {\"Pension Contribution\",  2376m},\n            {\"Professional Indemnity\", 611.43m },\n            {\"Occupational Health & Safety\", 917.14m },\n            {\"Medical Leave\", 1834.28m },\n            {\"Severance Cost\", 5093.18m },\n            {\"HR Support\", 32640m },\n            {\"Payroll Processing Fee\", 8160m },\n            {\"Special Prices\", 0m },\n        };\n        var cloudRequest = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-DK-1_0.json\");\n        var recalculatePriceRequest = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/recalculateprice-DK-1_0.json\",\n            new()\n            {\n                { \"PriceId\", \"123\"},\n                {\n                    \"SelectedInsuranceDetails\", new Dictionary<string, bool>\n                    {\n                        { \"Basic_MedicalInsurance_WorkerOnly\", true },\n                        { \"Basic_MedicalInsurance_WorkerAndSpouse\", false },\n                        { \"Basic_DentalInsurance_WorkerOnly\", false },\n                        { \"Basic_DentalInsurance_WorkerAndSpouse\", false },\n                        { \"Standard_MedicalInsurance_WorkerOnly\", false }\n                    }\n                },\n            }\n        );\n\n        // Act\n        _sut.Process(cloudRequest);\n        _sut.Process(recalculatePriceRequest);\n\n        var evt = (PriceCalculatedV7)_inMemoryDomainRepo.EventStore.Single().Value[1];\n        var employerCosts = evt.Costs[\"Employer Cost\"].ToDictionary(x => x.Key, x => x.Value.PennyUp());\n        Assert.Multiple(() =>\n        {\n            // Assert\n            Assert.That(evt.IsoCode, Is.EqualTo(expectedPricingIdentity));\n            Assert.That(((evt.TotalCost - evt.PlatformFeeInLocalCurrency) /12).PennyUp(), Is.EqualTo(expectedMonthlyTotalCost));\n        });\n        CollectionAssert.AreEquivalent(expectedEmployerCosts, evt.Costs[\"Employer Cost\"].ToDictionary(x => x.Key, x => x.Value));\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/EnglandTests.cs\n// service: src\nusing NLog;\nusing Newtonsoft.Json.Linq;\nusing Remundo.Pricing.Adapter;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Tests.Fakes;\nusing Remundo.Pricing.Tests.Utils;\n\nnamespace Remundo.Pricing.Tests;\n\npublic class EnglandTests\n{\n    private InMemoryDomainRepository _inMemoryDomainRepo;\n    private Worker _sut;\n    private IHttpService _httpService;\n\n    ///\n    /// All commented out expected values are due to the temporary removal of apprenticeship levy.\n    ///\n\n    [SetUp]\n    public void Setup()\n    {\n        _inMemoryDomainRepo = new InMemoryDomainRepository();\n        _httpService = new FakeHttpService();\n        _sut = new Worker(_inMemoryDomainRepo, LogManager.CreateNullLogger(), _httpService);\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_Then_I_Expect_PriceCalculatedV6_event()\n    {\n        // Assign\n        var expectedPricingIdentity = \"GB-ENG\"; //CHANGE TO GB-ENG\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).IsoCode, Is.EqualTo(expectedPricingIdentity));\n    }\n\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_Then_I_Expect_PriceCalculatedV7_event()\n    {\n        // Assign\n        var expectedPricingIdentity = \"GB-ENG\";\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0-V2.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).IsoCode, Is.EqualTo(expectedPricingIdentity));\n    }\n\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_with_insurances_And_50000_salary_Then_I_Expect_PriceCalculatedV6_correct_costs()\n    {\n        // Assigns\n        var expectedLifeInsuranceCost = 279.17m;\n\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0.json\");\n\n        var expectedInsuranceFlags = new Dictionary<string, bool>\n        {\n            { \"Basic_MedicalInsurance_WorkerOnly\", false },\n            { \"Basic_MedicalInsurance_WorkerAndSpouse\", false },\n            { \"Basic_DentalInsurance_WorkerOnly\", false },\n            { \"Basic_DentalInsurance_WorkerAndSpouse\", false },\n            { \"Standard_MedicalInsurance_WorkerOnly\", false },\n            { \"DeathInsurance\", false }\n        };\n\n        var expectedLocalCurrencyInsuranceCosts = new Dictionary<string, decimal>\n        {\n            { \"Basic_MedicalInsurance_WorkerOnly\", 84.6m },\n            { \"Basic_MedicalInsurance_WorkerAndSpouse\", 169.2m },\n            { \"Basic_DentalInsurance_WorkerOnly\", 101.52m },\n            { \"Basic_DentalInsurance_WorkerAndSpouse\", 186.12m },\n            { \"Standard_MedicalInsurance_WorkerOnly\", 104.06m },\n            { \"DeathInsurance\", 279.17m },\n        };\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        // Assert\n        var @event = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).EmployeeInsuranceFees[\"DeathInsurance\"], Is.EqualTo(expectedLifeInsuranceCost));\n        CollectionAssert.AreEquivalent(expectedInsuranceFlags, @event.SelectedInsurances);\n\n        // Validate insurance costs except DeathInsurance (handle separately)\n        foreach (var kvp in expectedLocalCurrencyInsuranceCosts)\n        {\n            Assert.That(@event.EmployeeInsuranceFees[kvp.Key], Is.EqualTo(kvp.Value));\n        }\n    }\n\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_with_deathInsurance_And_15000_salary_Then_I_Expect_PriceCalculatedV6_event()\n    {\n        // Assigns\n        var expectedDeathInsuranceCost = 64.17m;\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-15000.json\");\n        var expectedMonthlyTotalCostWithInsurance = 3536.55m;\n\n        // Act\n        _sut.Process(cloudRequest);\n\n\n        // Assert\n        Assert.That((((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).EmployeeInsuranceFees[\"DeathInsurance\"]).PennyUp(),\n            Is.EqualTo(expectedDeathInsuranceCost));\n        Assert.That((((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost/12).PennyUp(),\n            Is.EqualTo(expectedMonthlyTotalCostWithInsurance));\n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_Then_I_Expect_PriceCalculatedV6_event()\n    {\n        // Assign\n        const decimal expectedResult01 = 133777.54m;\n        const decimal expectedResult02 = 120729.12m;\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0.json\");\n        var recalculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/recalculateprice-1_0.json\");\n\n        // Act\n        _sut.Process(calculatePrice);\n        _sut.Process(recalculatePrice);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost.PennyUp(), Is.EqualTo(expectedResult01));\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1]).TotalCost.PennyUp(), Is.EqualTo(expectedResult02));\n        });\n    }\n\n    [Test]\n    public void With_All_Insurances_Chosen_with_50000_salary_I_Expect_Correct_Total_Cost_Calculated()\n    {\n        var expectedInsuranceFlags = new Dictionary<string, bool>\n        {\n            { \"Basic_MedicalInsurance_WorkerOnly\", true },\n            { \"Basic_MedicalInsurance_WorkerAndSpouse\", false },\n            { \"Basic_DentalInsurance_WorkerOnly\", false },\n            { \"Basic_DentalInsurance_WorkerAndSpouse\", false },\n            { \"Standard_MedicalInsurance_WorkerOnly\", false },\n            { \"DeathInsurance\", false }\n        };\n\n        var expectedLocalCurrencyInsuranceCosts = new Dictionary<string, decimal>\n        {\n            { \"Basic_MedicalInsurance_WorkerOnly\", 84.6m },\n            { \"Basic_MedicalInsurance_WorkerAndSpouse\", 169.2m },\n            { \"Basic_DentalInsurance_WorkerOnly\", 101.52m },\n            { \"Basic_DentalInsurance_WorkerAndSpouse\", 186.12m },\n            { \"Standard_MedicalInsurance_WorkerOnly\", 104.06m },\n            { \"DeathInsurance\", 279.17m },\n        };\n\n        // Assign\n        decimal expectedCost = 11148.13m;\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0.json\");\n        var recalculateCloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0-all-insurances.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n        _sut.Process(recalculateCloudRequest);\n\n        // Assert\n        Assert.That((((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost /12).PennyUp(),\n           Is.EqualTo(expectedCost));\n    }\n\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_with_neg_salary_Then_I_Expect_an_exception()\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-negative.json\");\n\n        // Assert\n        Assert.Throws<ArgumentOutOfRangeException>(() => {\n            // Act\n            _sut.Process(cloudRequest);\n        });\n    }\n\n    [Test]\n    public void Calculate_Rounding_Up_Pennies_Correctly()\n    {\n        // Assign\n        const decimal expectedCosts = 59105.53m;\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0-uneven_pennies.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost.PennyUp(), Is.EqualTo(expectedCosts));\n    }\n\n\n    [Test]\n    public void Get_Salary_Under_NIN_Threshold_Calulate_Cost_Correctly()\n    {\n        // Assign\n        decimal expectedCosts = 22083.0204m;\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0-under-nin-threshold.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        // Assert"}
{"text": "// file: src/Remundo.Pricing.Tests/EnglandTests.cs\n// service: src\n[Test]\n    public void Given_I_receive_CalculatePrice_command_with_neg_salary_Then_I_Expect_an_exception()\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-negative.json\");\n\n        // Assert\n        Assert.Throws<ArgumentOutOfRangeException>(() => {\n            // Act\n            _sut.Process(cloudRequest);\n        });\n    }\n\n    [Test]\n    public void Calculate_Rounding_Up_Pennies_Correctly()\n    {\n        // Assign\n        const decimal expectedCosts = 59105.53m;\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0-uneven_pennies.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost.PennyUp(), Is.EqualTo(expectedCosts));\n    }\n\n\n    [Test]\n    public void Get_Salary_Under_NIN_Threshold_Calulate_Cost_Correctly()\n    {\n        // Assign\n        decimal expectedCosts = 22083.0204m;\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0-under-nin-threshold.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost, Is.EqualTo(expectedCosts));\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_with_USD_selected_And_50000_salary_Then_I_Expect_PriceCalculatedV6_event_With_Converted_Currency()\n    {\n        // Assigns\n        const decimal expectedTotalCost = 134436.2m;\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-convert-to-usd.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost.PennyUp(), Is.EqualTo(expectedTotalCost));\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_with_a_salary_with_too_many_digits_then_the_salary_will_be_rounded_up()\n    {\n        // Assigns\n        var expectedAnnualSalary = 15000.24m;\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-too-many-digits.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).Costs[\"Gross Salary\"][\"Base Salary\"].PennyUp(), Is.EqualTo(expectedAnnualSalary));\n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_oneoff_bonus_then_oneoff_will_be_set()\n    {\n        // Assign\n        var expectedBonusIncludingCosts = 31.32m;\n        var calculateCloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0.json\");\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-oneoffdata-1.0.json\");\n\n        // Act\n        _sut.Process(calculateCloudRequest);\n        _sut.Process(cloudRequest);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1]).Costs[\"Additional Payments\"][\"Signing Bonus\"], Is.EqualTo(expectedBonusIncludingCosts));\n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_vesting_bonus_then_vesting_will_be_set()\n    {\n        // Assign\n        var expectedVestingAmount = 1000m;\n        var expectedVestingCosts = 2054.35m;\n        var calculateCloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0.json\");\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-vesting-1.0.json\");\n\n        //Act\n        _sut.Process(calculateCloudRequest);\n        _sut.Process(cloudRequest);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1]).Costs[\"Additional Payments\"][\"Vesting Bonus\"], Is.EqualTo(expectedVestingCosts));\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1]).VestingBonusAmount, Is.EqualTo(expectedVestingAmount));\n\n    }\n    [Test]\n    public void Given_I_recieve_a_new_currency_After_a_Contract_is_Created_in_local_currency_I_expect_the_salary_amount_to_be_converted_correctly()\n    {\n        // Assign\n        var expectedSalary = 60000.03m;\n        var calculateUKPrice = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0.json\");\n        var convertToUSD = Helpers.BuildCloudRequest(\"./PayloadSamples/convert-to-USD.json\");\n\n        // Act\n        _sut.Process(calculateUKPrice);\n        _sut.Process(convertToUSD);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1]).GrossSalary.PennyUp(), Is.EqualTo(expectedSalary));\n    }\n\n    [Test]\n    public void Given_I_recieve_a_EUR_currency_After_a_Contract_is_Created_in_usd_currency_I_expect_the_salary_amount_to_be_converted_correctly()\n    {\n        // Assign\n        var expectedSalary = 49251.36m;\n        var calculatePriceUkWithUSDCurrency = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-convert-to-usd.json\");//50kUSD\n        var convertToEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/convert-to-EUR.json\");//USD->GBP->EUR\n\n        //Act\n        _sut.Process(calculatePriceUkWithUSDCurrency);\n        _sut.Process(convertToEUR);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1]).GrossSalary.PennyUp(), Is.EqualTo(expectedSalary));\n    }\n\n    [Test]\n    public void Given_I_recieve_a_eur_currency_after_adding_a_bonus_and_changing_it_back_to_gbp_I_expect_the_bonus_amount_to_be_converted_correctly()\n    {\n        // Assign\n        const decimal expectedBonus = 2563.68m;\n        var calculateUKPrice = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0.json\");\n        var addOneOffBonus = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-1000-one-off-bonus.json\");\n        var convertToEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/convert-to-EUR.json\");\n        var convertToGBP = Helpers.BuildCloudRequest(\"./PayloadSamples/convert-to-GBP.json\");\n\n        //Act\n        _sut.Process(calculateUKPrice);\n        _sut.Process(addOneOffBonus);\n        _sut.Process(convertToEUR);\n        _sut.Process(convertToGBP);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[3]).Costs[\"Additional Payments\"][\"Signing Bonus\"], Is.EqualTo(expectedBonus));\n    }\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_oneoff_bonus_removed_then_oneoff_will_be_set_to_zero()\n    {\n        // Assign\n        const decimal expectedBonusIncludingCosts = 0m;\n        const decimal expectedBonusTotal = 0m;\n        var calculatePriceInGbp = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0.json\");\n        var recalculatePriceWithOneOffData = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-removesigningbonus-1.0.json\");\n\n        //Act\n        _sut.Process(calculatePriceInGbp);\n        _sut.Process(recalculatePriceWithOneOffData);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1]).Costs[\"Additional Payments\"][\"Vesting Bonus\"], Is.EqualTo(expectedBonusIncludingCosts));\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1]).Costs[\"Additional Payments\"][\"Vesting Bonus\"], Is.EqualTo(expectedBonusTotal));\n    }\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_oneoff_bonus_and_vesting_then_bonus_will_be_set()\n    {\n        // Assign\n        const decimal expectedBonusIncludingCosts = 31.32m;\n        const decimal expectedVestingAmount = 1000m;\n        const decimal expectedVestingIncludingCosts = 2054.35m;\n        //const decimal expectedBonusIncludingCosts = 13.866m;\n        //const decimal expectedBonusAmount = 12m;\n        //const decimal expectedVestingAmount = 1000m;\n        //const decimal expectedVestingIncludingCosts = 577.75m;\n        var calculatePriceInGbp = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0.json\");\n        var recalculatePriceWithOneOffData = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-oneoffdata-1.0.json\");\n        var recalculatePriceWithVestingBonus = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-vesting-1.0.json\");\n\n        //Act\n        _sut.Process(calculatePriceInGbp);\n        _sut.Process(recalculatePriceWithOneOffData);\n        _sut.Process(recalculatePriceWithVestingBonus);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[2]).Costs[\"Additional Payments\"][\"Signing Bonus\"], Is.EqualTo(expectedBonusIncludingCosts));\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[2]).VestingBonusAmount, Is.EqualTo(expectedVestingAmount));\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[2]).Costs[\"Additional Payments\"][\"Vesting Bonus\"], Is.EqualTo(expectedVestingIncludingCosts));\n        });\n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_remove_vesting_bonus_then_vesting_will_be_set_to_zero()\n    {\n        // Assign\n        const decimal expectedVestingAmount = 0m;\n        var calculatePriceInGbp = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0.json\");\n        var recalculatePriceWithVestingBonus = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-removevesting-1.0.json\");\n\n        // Act\n        _sut.Process(calculatePriceInGbp);\n        _sut.Process(recalculatePriceWithVestingBonus);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1]).Costs[\"Additional Payments\"][\"Vesting Bonus\"], Is.EqualTo(expectedVestingAmount));\n    }\n\n    [TestCase(50000, 29834.412, 29860)]\n    [TestCase(120000, 67972.4825, 67995)]"}
{"text": "// file: src/Remundo.Pricing.Tests/EnglandTests.cs\n// service: src\n//const decimal expectedBonusIncludingCosts = 13.866m;\n        //const decimal expectedBonusAmount = 12m;\n        //const decimal expectedVestingAmount = 1000m;\n        //const decimal expectedVestingIncludingCosts = 577.75m;\n        var calculatePriceInGbp = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0.json\");\n        var recalculatePriceWithOneOffData = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-oneoffdata-1.0.json\");\n        var recalculatePriceWithVestingBonus = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-vesting-1.0.json\");\n\n        //Act\n        _sut.Process(calculatePriceInGbp);\n        _sut.Process(recalculatePriceWithOneOffData);\n        _sut.Process(recalculatePriceWithVestingBonus);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[2]).Costs[\"Additional Payments\"][\"Signing Bonus\"], Is.EqualTo(expectedBonusIncludingCosts));\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[2]).VestingBonusAmount, Is.EqualTo(expectedVestingAmount));\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[2]).Costs[\"Additional Payments\"][\"Vesting Bonus\"], Is.EqualTo(expectedVestingIncludingCosts));\n        });\n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_remove_vesting_bonus_then_vesting_will_be_set_to_zero()\n    {\n        // Assign\n        const decimal expectedVestingAmount = 0m;\n        var calculatePriceInGbp = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0.json\");\n        var recalculatePriceWithVestingBonus = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-removevesting-1.0.json\");\n\n        // Act\n        _sut.Process(calculatePriceInGbp);\n        _sut.Process(recalculatePriceWithVestingBonus);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1]).Costs[\"Additional Payments\"][\"Vesting Bonus\"], Is.EqualTo(expectedVestingAmount));\n    }\n\n    [TestCase(50000, 29834.412, 29860)]\n    [TestCase(120000, 67972.4825, 67995)]\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_with_a_Deposit_factor_I_expect_the_deposit_to_be_calculated_correctly(decimal annualSalary, decimal expectedDeposit, decimal expectedRounded)\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0-deposit-factor.json\");\n\n        // Replace the annual salary from the payload sample\n        var data = JObject.Parse(cloudRequest.Data);\n        data[\"AnnualSalary\"] = annualSalary;\n        cloudRequest.Data = data.ToString();\n\n        // Act\n        _sut.Process(cloudRequest);\n        // Assert\n        var @event = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        Assert.That(@event.Deposit, Is.EqualTo(expectedDeposit));\n        Assert.That(@event.DepositRounded, Is.EqualTo(expectedRounded));\n    }\n\n    //[Test]\n    //public void Given_I_receive_CalculatePrice_command_with_allowances_then_I_Expect_The_Correct_Overhead()\n    //{\n    //    // Assign\n    //    const decimal expectedOverhead = 5816.47872m;\n    //    var calculatePriceInGbp = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0-Overhead.json\");\n\n    //    // Act\n    //    _sut.Process(calculatePriceInGbp);\n\n    //    // Assert\n    //    Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).EmployerCostElements[\"EHS/OSHA\"], Is.EqualTo(expectedOverhead));\n    //}\n\n    [TestCase(188000, 475)]\n    [TestCase(200000, 475)]\n    [TestCase(250000, 475)]\n    [TestCase(500000, 475)]\n    [Test]\n    public void Given_I_recieve_a_CalculatePrice_request_I_expect_to_calculate_the_correct_total(decimal annualSalary, double expectedLifeInsurance)\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0.json\");\n\n        // Replace the annual salary from the payload sample\n        var data = JObject.Parse(cloudRequest.Data);\n        data[\"AnnualSalary\"] = annualSalary;\n        cloudRequest.Data = data.ToString();\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        // Assert\n        var @event = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        Assert.That(@event.EmployeeInsuranceFees[\"DeathInsurance\"].PennyUp(), Is.EqualTo(expectedLifeInsurance));\n    }\n\n    [TestCase(50000, 22296.26)]\n    [TestCase(120000, 52010.07)]\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_I_expect_the_deposit_to_be_calculated_correctly(decimal annualSalary, decimal expectedDeposit)\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0.json\");\n\n        // Replace the annual salary from the payload sample\n        var data = JObject.Parse(cloudRequest.Data);\n        data[\"AnnualSalary\"] = annualSalary;\n        cloudRequest.Data = data.ToString();\n\n        // Act\n        _sut.Process(cloudRequest);\n        // Assert\n        var @event = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        Assert.That(@event.Deposit.PennyUp(), Is.EqualTo(expectedDeposit));\n    }\n\n\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_with_domain_I_expect_the_event_to_be_calculated_correctly()\n    {\n        // Assign\n        var annualSalary = 120000;\n        var expectedOnboardingFee = (12.0m/100) * annualSalary;\n        var expectedOffboardingFee = (12.0m/100) * annualSalary;\n        var expectedIndemnity = 49880.34m;\n        var expectedOccupationalHealthAndSafety = 41566.95m;\n        var expectedMedicalLeave = 44476.64m;\n        var expectedSeverance = 16626.78m;\n        var expectedHR = 144m;\n        var expectedPayroll = 144m;\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0-with-domain.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        // Assert\n        var @event = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        Assert.Multiple(() =>\n        {\n            Assert.That(@event.Costs[\"Additional Payments\"][\"One Off Onboarding\"], Is.EqualTo(expectedOnboardingFee));\n            Assert.That(@event.Costs[\"Additional Payments\"][\"One Off Offboarding\"], Is.EqualTo(expectedOffboardingFee));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Professional Indemnity\"], Is.EqualTo(expectedIndemnity));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Occupational Health & Safety\"], Is.EqualTo(expectedOccupationalHealthAndSafety));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Medical Leave\"], Is.EqualTo(expectedMedicalLeave));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Severance Cost\"], Is.EqualTo(expectedSeverance));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"HR Support\"], Is.EqualTo(expectedHR));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Payroll Processing Fee\"], Is.EqualTo(expectedPayroll));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Special Prices\"], Is.EqualTo(14400m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Apprenticeship Levy\"], Is.EqualTo(600m));\n        });\n    }\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_with_domain_and_allowances_I_expect_the_event_to_be_calculated_correctly()\n    {\n        // Assign\n        var expectedOnboardingFee = 0m;\n        var expectedOffboardingFee = 0m;\n        var expectedIndemnity = 314.14m;\n        var expectedOccupationalHealthAndSafety = 471.21m;\n        var expectedMedicalLeave = 942.41m;\n        var expectedSeverance = 2418.84m;\n        var expectedHR = 144m;\n        var expectedPayroll = 144m;\n        var expectedSpecialPrices = 0m;\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0-with-domain-and-allowances.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        // Assert\n        var @event = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        Assert.Multiple(() =>\n        {\n            Assert.That(@event.Costs[\"Additional Payments\"][\"One Off Onboarding\"], Is.EqualTo(expectedOnboardingFee));\n            Assert.That(@event.Costs[\"Additional Payments\"][\"One Off Offboarding\"], Is.EqualTo(expectedOffboardingFee));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Professional Indemnity\"], Is.EqualTo(expectedIndemnity));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Occupational Health & Safety\"], Is.EqualTo(expectedOccupationalHealthAndSafety));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Medical Leave\"], Is.EqualTo(expectedMedicalLeave));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Severance Cost\"], Is.EqualTo(expectedSeverance));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"HR Support\"], Is.EqualTo(expectedHR));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Payroll Processing Fee\"], Is.EqualTo(expectedPayroll));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Special Prices\"], Is.EqualTo(expectedSpecialPrices));\n        });\n    }\n\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_with_domain_and_signing_bonus_I_expect_the_event_to_be_calculated_correctly()\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0-with-domain-60000.json\");\n        var recalculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-oneoffdata-2.0.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n        _sut.Process(recalculatePrice);\n\n        // Assert\n        var @event = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1];\n        Assert.That(@event.Costs[\"Additional Payments\"][\"Signing Bonus\"], Is.EqualTo(7844.76m));\n    }\n\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_with_medicalInsurance_I_expect_the_event_to_be_calculated_correctly()\n    {\n        var expectedInsuranceFlags = new Dictionary<string, bool>\n        {\n            { \"Basic_MedicalInsurance_WorkerOnly\", true },\n            { \"Basic_MedicalInsurance_WorkerAndSpouse\", false },\n            { \"Basic_DentalInsurance_WorkerOnly\", false },\n            { \"Basic_DentalInsurance_WorkerAndSpouse\", false },\n            { \"Standard_MedicalInsurance_WorkerOnly\", false },\n            { \"DeathInsurance\", false }\n        };\n\n        var expectedLocalCurrencyInsuranceCosts = new Dictionary<string, decimal>\n        {\n            { \"Basic_MedicalInsurance_WorkerOnly\", 84.6m },\n            { \"Basic_MedicalInsurance_WorkerAndSpouse\", 169.2m },\n            { \"Basic_DentalInsurance_WorkerOnly\", 101.52m },\n            { \"Basic_DentalInsurance_WorkerAndSpouse\", 186.12m },"}
{"text": "// file: src/Remundo.Pricing.Tests/EnglandTests.cs\n// service: src\nAssert.That(@event.Costs[\"Employer Cost\"][\"Payroll Processing Fee\"], Is.EqualTo(expectedPayroll));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Special Prices\"], Is.EqualTo(expectedSpecialPrices));\n        });\n    }\n\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_with_domain_and_signing_bonus_I_expect_the_event_to_be_calculated_correctly()\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0-with-domain-60000.json\");\n        var recalculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-oneoffdata-2.0.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n        _sut.Process(recalculatePrice);\n\n        // Assert\n        var @event = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1];\n        Assert.That(@event.Costs[\"Additional Payments\"][\"Signing Bonus\"], Is.EqualTo(7844.76m));\n    }\n\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_with_medicalInsurance_I_expect_the_event_to_be_calculated_correctly()\n    {\n        var expectedInsuranceFlags = new Dictionary<string, bool>\n        {\n            { \"Basic_MedicalInsurance_WorkerOnly\", true },\n            { \"Basic_MedicalInsurance_WorkerAndSpouse\", false },\n            { \"Basic_DentalInsurance_WorkerOnly\", false },\n            { \"Basic_DentalInsurance_WorkerAndSpouse\", false },\n            { \"Standard_MedicalInsurance_WorkerOnly\", false },\n            { \"DeathInsurance\", false }\n        };\n\n        var expectedLocalCurrencyInsuranceCosts = new Dictionary<string, decimal>\n        {\n            { \"Basic_MedicalInsurance_WorkerOnly\", 84.6m },\n            { \"Basic_MedicalInsurance_WorkerAndSpouse\", 169.2m },\n            { \"Basic_DentalInsurance_WorkerOnly\", 101.52m },\n            { \"Basic_DentalInsurance_WorkerAndSpouse\", 186.12m },\n            { \"Standard_MedicalInsurance_WorkerOnly\", 104.06m },\n            { \"DeathInsurance\", 279.17m },\n        };\n\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0-with-domain-60000.json\");\n        var recalculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-oneoffdata-3.0.json\");\n        var allowancesWithoutInsurances = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0-with-domain-and-allowances-with-insurances.json\");\n\n\n        // Act\n        _sut.Process(cloudRequest);\n        _sut.Process(recalculatePrice);\n        _sut.Process(allowancesWithoutInsurances);\n\n        // Assert\n        var @event = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[2];\n\n        // Validate insurance flags\n        CollectionAssert.AreEquivalent(expectedInsuranceFlags, @event.SelectedInsurances);\n\n        // Validate insurance costs except DeathInsurance (handle separately)\n        foreach (var kvp in expectedLocalCurrencyInsuranceCosts)\n        {\n            Assert.That(@event.EmployeeInsuranceFees[kvp.Key], Is.EqualTo(kvp.Value));\n        }\n    }\n\n    [Test]\n\n    public void Given_I_make_an_api_call_I_expect_the_correct_annual_platform_fee_for_England()\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0.json\");\n        decimal expectedPlatformFee = 6000;\n        // Act\n        _sut.Process(cloudRequest);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).PlatformFeeInLocalCurrency, Is.EqualTo(expectedPlatformFee));\n    }\n\n    [Test]\n    public void Given_platform_Fee_is_a_percentage_when_I_receive_a_CalculatePrice_request_I_expect_the_correct_total_cost()\n    {\n        // Assign\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0-platformFee-percentage.json\");\n\n        var data = JObject.Parse(calculatePrice.Data);\n        data[\"IsoCode\"] = \"GB\";\n        calculatePrice.Data = data.ToString();\n\n        decimal expectedTotalCost = 76306.134m;\n        decimal expectedPlatformFee = 9952.974m;\n\n        // Act\n        _sut.Process(calculatePrice);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).PlatformFeeInLocalCurrency, Is.EqualTo(expectedPlatformFee));\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost, Is.EqualTo(expectedTotalCost));\n        });\n    }\n\n    [Test]\n    public void Given_platform_Fee_is_a_fixed_fee_when_I_receive_a_CalculatePrice_request_I_expect_the_correct_total_cost()\n    {\n        // Assign\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0-platformFee-fixed-fee.json\");\n\n        var data = JObject.Parse(calculatePrice.Data);\n        data[\"IsoCode\"] = \"GB\";\n        calculatePrice.Data = data.ToString();\n\n        decimal expectedPlatformFee = 6000m;\n        decimal expectedTotalCost = 2033.4m + expectedPlatformFee;\n\n        // Act\n        _sut.Process(calculatePrice);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).PlatformFeeInLocalCurrency, Is.EqualTo(expectedPlatformFee));\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost, Is.EqualTo(expectedTotalCost));\n\n    }\n\n    [Test]\n    [TestCase(76306.14, true)]\n    [TestCase(8033.4, false)]\n    public void Given_hrsupport_is_or_isnt_a_percentage_when_I_receive_a_calculatePrice_request_I_expect_the_correct_total_cost(decimal expectedTotalCost, bool isPercentage)\n    {\n        // Assign\n        var calculatePrice = Helpers.BuildCloudRequest($\"./PayloadSamples/England/pricing-uk-england-1_0-platformFee-{(isPercentage ? \"percentage\" : \"fixed-fee\")}.json\");\n\n        // Act\n        _sut.Process(calculatePrice);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost.PennyUp(), Is.EqualTo(expectedTotalCost));\n        });\n    }\n\n    [Test]\n    [TestCase(76306.14, true)]\n    [TestCase(8033.4, false)]\n    public void Given_payrollprocessingfee_is_or_isnt_a_percentage_when_I_receive_a_calculatePrice_request_I_expect_the_correct_total_cost(decimal expectedTotalCost, bool isPercentage)\n    {\n        // Assign\n        var calculatePrice = Helpers.BuildCloudRequest($\"./PayloadSamples/England/pricing-uk-england-1_0-platformFee-{(isPercentage ? \"percentage\" : \"fixed-fee\")}.json\");\n\n        // Act\n        _sut.Process(calculatePrice);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost.PennyUp(), Is.EqualTo(expectedTotalCost));\n        });\n    }\n\n    [Test]\n    [TestCase(\"Amdocs\", 19.05)]\n    [TestCase(\"XML-INT\", null)]\n    public void Given_I_receive_a_calculate_price_command_I_expect_to_get_the_correct_MSPFee_value_for_a_specific_tenant(string tenantId, decimal? expectedMSPFee)\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0-with-tenant-id.json\");\n        \n        var data = JObject.Parse(cloudRequest.Data);\n        data[\"TenantId\"] = tenantId;\n        cloudRequest.Data = data.ToString();\n\n        // Act\n        _sut.Process(cloudRequest);\n        \n        var @event = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        var mspFee = @event.Costs.ContainsKey(\"Tenant Costs\") ? @event.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n\n        // Assert\n        Assert.That(mspFee, Is.EqualTo(expectedMSPFee));\n    }\n\n    [Test]\n    [TestCase(\"Amdocs\", 19.05, 14.26)]\n    [TestCase(\"XML-INT\", null, null)]\n    [TestCase(\"Acme\", null, null)]\n    public void Given_I_receive_a_RecalculatePrice_command_I_expect_the_MSPFee_value_to_be_recalculated_for_a_specific_tenant(string tenantId, decimal? expectedMSPFee, decimal? expectedRecalculatedMSPFee)\n    {\n        // Assign\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0-with-tenant-id.json\");\n        var recalculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/recalculateprice-V2-GB-tenantCosts-1_0.json\");\n\n        var calculatePriceData = JObject.Parse(calculatePrice.Data);\n        calculatePriceData[\"TenantId\"] = tenantId;\n        calculatePrice.Data = calculatePriceData.ToString();\n\n        var recalculatePriceData = JObject.Parse(recalculatePrice.Data);\n        recalculatePriceData[\"TenantId\"] = tenantId;\n        recalculatePrice.Data = recalculatePriceData.ToString();\n\n        // Act\n        _sut.Process(calculatePrice);\n        _sut.Process(recalculatePrice);\n\n        var firstEvent = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        var secondEvent = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1];\n        var firstMspFee = firstEvent.Costs.ContainsKey(\"Tenant Costs\") ? firstEvent.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n        var recalculatedMspFee = secondEvent.Costs.ContainsKey(\"Tenant Costs\") ? secondEvent.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n\n        // Assert\n        Assert.That(firstMspFee, Is.EqualTo(expectedMSPFee));\n        Assert.That(recalculatedMspFee, Is.EqualTo(expectedRecalculatedMSPFee));\n    }\n\n    [Test]\n    public void GivenIRecieveCommand_RecalculatePriceV2_GB_ENG_ExpectPriceCalculatedV7_Event()"}
{"text": "// file: src/Remundo.Pricing.Tests/EnglandTests.cs\n// service: src\nvar mspFee = @event.Costs.ContainsKey(\"Tenant Costs\") ? @event.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n\n        // Assert\n        Assert.That(mspFee, Is.EqualTo(expectedMSPFee));\n    }\n\n    [Test]\n    [TestCase(\"Amdocs\", 19.05, 14.26)]\n    [TestCase(\"XML-INT\", null, null)]\n    [TestCase(\"Acme\", null, null)]\n    public void Given_I_receive_a_RecalculatePrice_command_I_expect_the_MSPFee_value_to_be_recalculated_for_a_specific_tenant(string tenantId, decimal? expectedMSPFee, decimal? expectedRecalculatedMSPFee)\n    {\n        // Assign\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0-with-tenant-id.json\");\n        var recalculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/recalculateprice-V2-GB-tenantCosts-1_0.json\");\n\n        var calculatePriceData = JObject.Parse(calculatePrice.Data);\n        calculatePriceData[\"TenantId\"] = tenantId;\n        calculatePrice.Data = calculatePriceData.ToString();\n\n        var recalculatePriceData = JObject.Parse(recalculatePrice.Data);\n        recalculatePriceData[\"TenantId\"] = tenantId;\n        recalculatePrice.Data = recalculatePriceData.ToString();\n\n        // Act\n        _sut.Process(calculatePrice);\n        _sut.Process(recalculatePrice);\n\n        var firstEvent = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        var secondEvent = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1];\n        var firstMspFee = firstEvent.Costs.ContainsKey(\"Tenant Costs\") ? firstEvent.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n        var recalculatedMspFee = secondEvent.Costs.ContainsKey(\"Tenant Costs\") ? secondEvent.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n\n        // Assert\n        Assert.That(firstMspFee, Is.EqualTo(expectedMSPFee));\n        Assert.That(recalculatedMspFee, Is.EqualTo(expectedRecalculatedMSPFee));\n    }\n\n    [Test]\n    public void GivenIRecieveCommand_RecalculatePriceV2_GB_ENG_ExpectPriceCalculatedV7_Event()\n    {\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-england-1_0.json\");\n        var recalculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/England/recalculateprice-V2-GB-ENG-1_0.json\");\n        // Act\n        _sut.Process(cloudRequest);\n        _sut.Process(recalculatePrice);\n\n        // Assert\n        var stream = _inMemoryDomainRepo.EventStore.Single().Value[0];\n\n        Assert.That(stream.GetType() == typeof(PriceCalculatedV7));\n    }\n\n\n    [TestCase(120000, 13582.5, 110.08, 1386.3, 50, 889.08, 346.4, 173.2, 115.47, 0, 12)]\n    [TestCase(61200, 7175.95, 110.08, 651.3, 25.50, 453.29, 176.61, 88.31, 58.87, 0, 12)]\n    [Test]\n    public void Given_I_receive_CalculatePrice_for_GB_command_Then_I_Expect_PriceCalculatedV6_event_With_GB_Pricing_Rules(\n        decimal salary, decimal expectedMonthlyCost,\n        decimal ep, decimal eni, decimal al, //statutory\n        decimal sc, decimal ml, decimal ohs, decimal pi, decimal hs, decimal ppf) // nonstatutory\n    {\n        // Assign\n        var expectedPricingIdentity = \"GB\";\n        var expectedEmployerCosts = new Dictionary<string, decimal>\n        {\n            //Statutory Costs\n            { \"Pension Contribution\", ep},\n            { \"Employer National Insurance\", eni},\n            { \"Apprenticeship Levy\", al },\n\n            //XML Costs\n            { \"Severance Cost\", sc},\n            { \"Medical Leave\", ml},\n            { \"Occupational Health & Safety\", ohs},\n            { \"Professional Indemnity\", pi},\n            { \"HR Support\", hs},\n            { \"Payroll Processing Fee\", ppf},\n        };\n        expectedEmployerCosts = expectedEmployerCosts.Where(x => x.Value > 0).ToDictionary(x => x.Key, x => x.Value);\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-1_0.json\",\n            new Dictionary<string, dynamic>()\n                {\n                {\"AnnualSalary\", salary}\n            });\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        var evt = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        var employerCosts = evt.Costs[\"Employer Cost\"].Where(x => x.Value != 0m).ToDictionary(x => x.Key, x => x.Value / 12);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(evt.IsoCode, Is.EqualTo(expectedPricingIdentity), \"Expected ISO incorrect\");\n            Assert.That((evt.TotalCost / 12).PennyUp(),\n                    Is.InRange(expectedMonthlyCost, expectedMonthlyCost + 0.1m), \"Total Cost incorrect\");\n            Assert.That(employerCosts.Keys, Is.EquivalentTo(expectedEmployerCosts.Keys));\n            foreach (var expected in expectedEmployerCosts)\n            {\n                var cost = employerCosts[expected.Key];\n                Assert.That(cost.PennyUp(),\n                    Is.InRange(expected.Value, expected.Value + 0.01m), $\"{expected.Key} incorrect value\");\n            }\n        });\n    }\n\n    [Test]\n    public void Given_I_receive_ReCalculatePrice_for_GB_command_Then_I_Expect_PriceCalculatedV6_event_With_GB_Rules()\n    {\n        // Assign\n        var expectedPricingIdentity = \"GB\";\n        var expectedMonthlyCost = 7175.95m;\n        var expectedEmployerCosts = new Dictionary<string, decimal>\n        {\n            //Statutory Costs\n            { \"Pension Contribution\", 110.08m},\n            { \"Employer National Insurance\", 651.3m},\n            { \"Apprenticeship Levy\", 25.50m },\n\n            //XML Costs\n            { \"Severance Cost\", 453.29m},\n            { \"Medical Leave\", 176.61m},\n            { \"Occupational Health & Safety\", 88.31m},\n            { \"Professional Indemnity\", 58.87m},\n            { \"HR Support\", 0},\n            { \"Payroll Processing Fee\", 12},\n        };\n\n        var calcPric = Helpers.BuildCloudRequest(\"./PayloadSamples/England/pricing-uk-1_0.json\",\n            new Dictionary<string, dynamic>()\n                {\n                {\"AnnualSalary\", 120000}\n            });\n\n        var recalcPrice = Helpers.BuildCloudRequest(\"./PayloadSamples/England/recalculateprice-V2-GB-1_0.json\",\n            new Dictionary<string, dynamic>()\n                {\n                {\"AnnualSalary\", 61200}\n            });\n\n        // Act\n        _sut.Process(calcPric);\n        _sut.Process(recalcPrice);\n\n        var evt = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1];\n        var employerCosts = evt.Costs[\"Employer Cost\"].Where(x => x.Value != 0m).ToDictionary(x => x.Key, x => x.Value / 12);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(evt.IsoCode, Is.EqualTo(expectedPricingIdentity), \"Expected ISO incorrect\");\n            Assert.That((evt.TotalCost / 12).PennyUp(),\n                    Is.InRange(expectedMonthlyCost, expectedMonthlyCost + 0.1m), \"Total Cost incorrect\");\n            foreach (var cost in employerCosts)\n            {\n                var expected = expectedEmployerCosts[cost.Key];\n                Assert.That(cost.Value.PennyUp(),\n                    Is.InRange(expected, expected + 0.01m), $\"{cost.Key} incorrect value\");\n            }\n        });\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/Extensions.cs\n// service: src\n﻿namespace Remundo.Pricing.Tests;\n\npublic static class Extensions\n{\n    public static decimal PennyUp(this decimal amount)\n    {\n        return Math.Round(amount, 2, MidpointRounding.ToPositiveInfinity);\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/FranceTests.cs\n// service: src\nusing Evento;\nusing NLog;\nusing Newtonsoft.Json.Linq;\nusing Remundo.Pricing.Adapter;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Tests.Fakes;\nusing Remundo.Pricing.Tests.Utils;\n\nnamespace Remundo.Pricing.Tests;\n\n[TestFixture]\npublic class FranceTests\n{\n    private const string PAYLOAD_DIR = \"./PayloadSamples/France\";\n    private const decimal ACCURACY = 0.1m; // Accurate to 1.d.p (Prices in Access are rounded to 2.d.p) \n\n    private IHttpService _http;\n    private ILogger _logger;\n    private InMemoryDomainRepository _repo;\n    private Worker _sut;\n\n    [SetUp]\n    public void Setup()\n    {\n        _repo = new InMemoryDomainRepository();\n        _http = new FakeHttpServiceOriginal();\n        _logger = LogManager.CreateNullLogger();\n        _sut = new Worker(_repo, _logger, _http);\n    }\n\n    [Test]\n    [TestCase(\"./PayloadSamples/France/pricing-fr-1_0.json\")]\n    public void Given_I_Receive_A_CalculatePriceCommand_I_Expect_The_Correct_TotalCost(string payloadSample)\n    {\n        // Assign\n        var expectedTotalcost = 198543.2345712m;\n        var cloudRequest = Helpers.BuildCloudRequest(payloadSample);\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)_repo.EventStore.Single().Value[0]).TotalCost, Is.EqualTo(expectedTotalcost));\n\n    }\n\n    [Test]\n    public void Given_I_Receive_A_ReCalculatePriceCommand_I_Expect_The_Correct_TotalCost()\n    {\n        // Assign\n        var expectedTotalcost = 198543.2345712m;\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/France/pricing-fr-1_0.json\");\n        var recalculate = Helpers.BuildCloudRequest(\"./PayloadSamples/France/pricing-fr-vesting-1.0.json\");\n        // Act\n        _sut.Process(cloudRequest);\n        _sut.Process(recalculate);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)_repo.EventStore.Single().Value[1]).TotalCost, Is.EqualTo(expectedTotalcost));\n    }\n\n    [Test]\n    public void Given_I_Receive_A_ReCalculatePriceCommand_With_Incorrect_Id_I_Expect_An_Exception()\n    {\n        // Assign\n        var expectedTotalcost = 179594.0164944m;\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/France/pricing-fr-1_0.json\");\n        var recalculate = Helpers.BuildCloudRequest(\"./PayloadSamples/France/pricing-fr-wrongId-1.0.json\");\n        // Act\n        _sut.Process(cloudRequest);\n        Assert.Throws<AggregateNotFoundException>(() => _sut.Process(recalculate));\n    }\n\n    [Test]\n    [TestCase(\"Amdocs\", 24.68)]\n    [TestCase(\"XML-INT\", null)]\n    public void Given_I_receive_a_calculate_price_command_I_expect_to_get_the_correct_MSPFee_value_for_a_specific_tenant(string tenantId, decimal? expectedMSPFee)\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/France/pricing-fr-with-tenant-id-1_0.json\");\n\n        var data = JObject.Parse(cloudRequest.Data);\n        data[\"TenantId\"] = tenantId;\n        cloudRequest.Data = data.ToString();\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        var @event = (PriceCalculatedV6)_repo.EventStore.Single().Value[0];\n        var mspFee = @event.Costs.ContainsKey(\"Tenant Costs\") ? @event.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n\n        // Assert\n        Assert.That(mspFee, Is.EqualTo(expectedMSPFee));\n    }\n\n    [Test]\n    [TestCase(\"Amdocs\", 24.68, 10.38)]\n    [TestCase(\"XML-INT\", null, null)]\n    [TestCase(\"Acme\", null, null)]\n    public void Given_I_receive_a_RecalculatePrice_command_I_expect_the_MSPFee_value_to_be_recalculated_for_a_specific_tenant(string tenantId, decimal? expectedMSPFee, decimal? expectedRecalculatedMSPFee)\n    {\n        // Assign\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/France/pricing-fr-with-tenant-id-1_0.json\");\n        var recalculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/France/pricing-fr-recalculate-tenantCosts.json\");\n\n        var calculatePriceData = JObject.Parse(calculatePrice.Data);\n        calculatePriceData[\"TenantId\"] = tenantId;\n        calculatePrice.Data = calculatePriceData.ToString();\n\n        var recalculatePriceData = JObject.Parse(recalculatePrice.Data);\n        recalculatePriceData[\"TenantId\"] = tenantId;\n        recalculatePrice.Data = recalculatePriceData.ToString();\n\n        // Act\n        _sut.Process(calculatePrice);\n        _sut.Process(recalculatePrice);\n\n        var firstEvent = (PriceCalculatedV6)_repo.EventStore.Single().Value[0];\n        var secondEvent = (PriceCalculatedV6)_repo.EventStore.Single().Value[1];\n        var firstMspFee = firstEvent.Costs.ContainsKey(\"Tenant Costs\") ? firstEvent.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n        var recalculatedMspFee = secondEvent.Costs.ContainsKey(\"Tenant Costs\") ? secondEvent.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(firstMspFee, Is.EqualTo(expectedMSPFee));\n            Assert.That(recalculatedMspFee, Is.EqualTo(expectedRecalculatedMSPFee));\n        });\n    }\n\n    [TestCase(12345, 3598.36004235, 3614)]\n    [TestCase(120000, 33090.5390952, 33102)]\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_with_a_Deposit_factor_I_expect_the_deposit_to_be_calculated_correctly(decimal annualSalary, decimal expectedDeposit, decimal expectedRounded)\n    {\n        // Assign\n        var calculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-FR-1_0-deposit-factor.json\"),\n            new Dictionary<string, dynamic> { { \"AnnualSalary\", annualSalary } });\n\n        // Act\n        _sut.Process(calculate);\n\n        // Assert\n        var @event = (PriceCalculatedV6)_repo.EventStore.Single().Value[0];\n        Assert.That(@event.Deposit, Is.EqualTo(expectedDeposit));\n        Assert.That(@event.DepositRounded, Is.EqualTo(expectedRounded));\n    }\n\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_I_expect_the_suppContribution_to_be_calculated_correctly()\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/France/pricing-fr-1_0.json\");\n        var expectedSuppContributionPensionTwo = 10212.89m;\n        var expectedSuppContributionOtherTwo = 1277.6m;\n        var expectedSuppContributionPensionOne = 1941.62m;\n        var expectedSuppContributionOtherOne = 530.66m;\n        // Act\n        _sut.Process(cloudRequest);\n        // Assert\n        var @event = (PriceCalculatedV6)_repo.EventStore.Single().Value[0];\n        Assert.Multiple(() =>\n        {\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Supplementary Contribution - Bracket 2 - Pension\"], Is.EqualTo(expectedSuppContributionPensionTwo), \"'Supplementary Contribution - Bracket 2 - Pension' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Supplementary Contribution - Bracket 2 - Other\"], Is.EqualTo(expectedSuppContributionOtherTwo), \"'Supplementary Contribution - Bracket 2 - Other' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Supplementary Contribution - Bracket 1 - Pension\"], Is.EqualTo(expectedSuppContributionPensionOne), \"'Supplementary Contribution - Bracket 1 - Pension' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Supplementary Contribution - Bracket 1 - Other\"], Is.EqualTo(expectedSuppContributionOtherOne), \"'Supplementary Contribution - Bracket 1 - Other' is incorrect\");\n        });\n    }\n\n    [TestCase(120000)]\n    [TestCase(424008)]\n    [TestCase(35334)]\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_I_expect_the_employercosts_to_be_calculated_correctly(decimal annualSalary)\n    {\n        // Assign\n        var cloudRequest = Helpers.EditCloudRequest(Helpers.BuildCloudRequest(\"./PayloadSamples/France/pricing-fr-1_0.json\"), new Dictionary<string, dynamic>() { { \"AnnualSalary\", annualSalary} });\n        var monthlySalary = annualSalary / 12;\n        var expectedSuppContributionPensionTwo = (Math.Max(0, monthlySalary - 3428) * 0.1295m * 12).PennyUp();\n        var expectedSuppContributionOtherTwo = (Math.Max(0, monthlySalary - 3428) * 0.0162m * 12).PennyUp();\n        var expectedSuppContributionPensionOne = (Math.Min(3428 * 0.0472m, monthlySalary * 0.0472m) * 12).PennyUp();\n        var expectedSuppContributionOtherOne = (Math.Min(3428 * 0.0129m, monthlySalary * 0.0129m) * 12).PennyUp();\n        var expectedSocialHealth = (annualSalary * 0.133m).PennyUp();\n        var expectedHealthInsurance = (100m * 12).PennyUp();\n        var expectedCappedSocialOldAge = (Math.Min(0.0855m * 3428, 0.0855m * monthlySalary) * 12).PennyUp();\n        var expectedUncappedSocialOldAge = (annualSalary * 0.019m).PennyUp();\n        var expectedSocialFamily = (annualSalary * 0.0525m).PennyUp();\n        var expectedunemploymentInsurance = (Math.Min(0.0405m * 13712, monthlySalary * 0.0405m) * 12).PennyUp();\n        var expectedEmploymentOfManagers = (annualSalary * 0.00036m).PennyUp();\n        var expectedASESATT = (annualSalary * 0.0002m).PennyUp();\n        var expectedCSA = (annualSalary * 0.003m).PennyUp();\n        var expectedAGS = (Math.Min(0.0015m * 13712, monthlySalary * 0.0015m) * 12).PennyUp();\n        var expectedHolidayAccural = (annualSalary * 0.1m).PennyUp();\n        var expectedOtherPayroll = (annualSalary * 0.022m).PennyUp();\n        // Act\n        _sut.Process(cloudRequest);\n        // Assert\n        var @event = (PriceCalculatedV6)_repo.EventStore.Single().Value[0];\n        Assert.Multiple(() =>\n        {\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Supplementary Contribution - Bracket 2 - Pension\"], Is.EqualTo(expectedSuppContributionPensionTwo), \"'Supplementary Contribution - Bracket 2 - Pension' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Supplementary Contribution - Bracket 2 - Other\"], Is.EqualTo(expectedSuppContributionOtherTwo), \"'Supplementary Contribution - Bracket 2 - Other' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Supplementary Contribution - Bracket 1 - Pension\"], Is.EqualTo(expectedSuppContributionPensionOne), \"'Supplementary Contribution - Bracket 1 - Pension' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Supplementary Contribution - Bracket 1 - Other\"], Is.EqualTo(expectedSuppContributionOtherOne), \"'Supplementary Contribution - Bracket 1 - Other' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Social Security - Health & sickness\"], Is.EqualTo(expectedSocialHealth), \"'Social Security - Health & sickness' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Health Insurance\"], Is.EqualTo(expectedHealthInsurance), \"'Health Insurance' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Social Security - Old-Age Insurance (Capped)\"], Is.EqualTo(expectedCappedSocialOldAge), \"'Social Security - Old-Age Insurance (Capped)' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Social Security - Old-Age Insurance (Uncapped)\"], Is.EqualTo(expectedUncappedSocialOldAge), \"'Social Security - Old-Age Insurance (Uncapped)' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Social Security - Family\"], Is.EqualTo(expectedSocialFamily), \"'Social Security - Family' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Unemployment Insurance\"], Is.EqualTo(expectedunemploymentInsurance), \"'Unemployment Insurance' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Association for the Employment of Managers\"], Is.EqualTo(expectedEmploymentOfManagers), \"'Association for the Employment of Managers' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Trade Union Contribution (ADESATT)\"], Is.EqualTo(expectedASESATT), \"'Trade Union Contribution (ADESATT)' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Autonomy Solidarity Contribution (CSA)\"], Is.EqualTo(expectedCSA), \"'Autonomy Solidarity Contribution (CSA)' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Wage Guarantee Insurance Association (AGS)\"], Is.EqualTo(expectedAGS), \"'Wage Guarantee Insurance Association (AGS)' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Holiday Pay Accrual\"], Is.EqualTo(expectedHolidayAccural), \"'Holiday Pay Accrual' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Other Payroll Costs\"], Is.EqualTo(expectedOtherPayroll), \"'Other Payroll Costs' is incorrect\");\n        });"}
{"text": "// file: src/Remundo.Pricing.Tests/FranceTests.cs\n// service: src\nvar monthlySalary = annualSalary / 12;\n        var expectedSuppContributionPensionTwo = (Math.Max(0, monthlySalary - 3428) * 0.1295m * 12).PennyUp();\n        var expectedSuppContributionOtherTwo = (Math.Max(0, monthlySalary - 3428) * 0.0162m * 12).PennyUp();\n        var expectedSuppContributionPensionOne = (Math.Min(3428 * 0.0472m, monthlySalary * 0.0472m) * 12).PennyUp();\n        var expectedSuppContributionOtherOne = (Math.Min(3428 * 0.0129m, monthlySalary * 0.0129m) * 12).PennyUp();\n        var expectedSocialHealth = (annualSalary * 0.133m).PennyUp();\n        var expectedHealthInsurance = (100m * 12).PennyUp();\n        var expectedCappedSocialOldAge = (Math.Min(0.0855m * 3428, 0.0855m * monthlySalary) * 12).PennyUp();\n        var expectedUncappedSocialOldAge = (annualSalary * 0.019m).PennyUp();\n        var expectedSocialFamily = (annualSalary * 0.0525m).PennyUp();\n        var expectedunemploymentInsurance = (Math.Min(0.0405m * 13712, monthlySalary * 0.0405m) * 12).PennyUp();\n        var expectedEmploymentOfManagers = (annualSalary * 0.00036m).PennyUp();\n        var expectedASESATT = (annualSalary * 0.0002m).PennyUp();\n        var expectedCSA = (annualSalary * 0.003m).PennyUp();\n        var expectedAGS = (Math.Min(0.0015m * 13712, monthlySalary * 0.0015m) * 12).PennyUp();\n        var expectedHolidayAccural = (annualSalary * 0.1m).PennyUp();\n        var expectedOtherPayroll = (annualSalary * 0.022m).PennyUp();\n        // Act\n        _sut.Process(cloudRequest);\n        // Assert\n        var @event = (PriceCalculatedV6)_repo.EventStore.Single().Value[0];\n        Assert.Multiple(() =>\n        {\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Supplementary Contribution - Bracket 2 - Pension\"], Is.EqualTo(expectedSuppContributionPensionTwo), \"'Supplementary Contribution - Bracket 2 - Pension' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Supplementary Contribution - Bracket 2 - Other\"], Is.EqualTo(expectedSuppContributionOtherTwo), \"'Supplementary Contribution - Bracket 2 - Other' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Supplementary Contribution - Bracket 1 - Pension\"], Is.EqualTo(expectedSuppContributionPensionOne), \"'Supplementary Contribution - Bracket 1 - Pension' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Supplementary Contribution - Bracket 1 - Other\"], Is.EqualTo(expectedSuppContributionOtherOne), \"'Supplementary Contribution - Bracket 1 - Other' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Social Security - Health & sickness\"], Is.EqualTo(expectedSocialHealth), \"'Social Security - Health & sickness' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Health Insurance\"], Is.EqualTo(expectedHealthInsurance), \"'Health Insurance' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Social Security - Old-Age Insurance (Capped)\"], Is.EqualTo(expectedCappedSocialOldAge), \"'Social Security - Old-Age Insurance (Capped)' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Social Security - Old-Age Insurance (Uncapped)\"], Is.EqualTo(expectedUncappedSocialOldAge), \"'Social Security - Old-Age Insurance (Uncapped)' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Social Security - Family\"], Is.EqualTo(expectedSocialFamily), \"'Social Security - Family' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Unemployment Insurance\"], Is.EqualTo(expectedunemploymentInsurance), \"'Unemployment Insurance' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Association for the Employment of Managers\"], Is.EqualTo(expectedEmploymentOfManagers), \"'Association for the Employment of Managers' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Trade Union Contribution (ADESATT)\"], Is.EqualTo(expectedASESATT), \"'Trade Union Contribution (ADESATT)' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Autonomy Solidarity Contribution (CSA)\"], Is.EqualTo(expectedCSA), \"'Autonomy Solidarity Contribution (CSA)' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Wage Guarantee Insurance Association (AGS)\"], Is.EqualTo(expectedAGS), \"'Wage Guarantee Insurance Association (AGS)' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Holiday Pay Accrual\"], Is.EqualTo(expectedHolidayAccural), \"'Holiday Pay Accrual' is incorrect\");\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Other Payroll Costs\"], Is.EqualTo(expectedOtherPayroll), \"'Other Payroll Costs' is incorrect\");\n        });\n\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/GermanyTests.cs\n// service: src\nusing NLog;\nusing Remundo.Pricing.Adapter;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Tests.Fakes;\nusing Remundo.Pricing.Tests.Utils;\n\nnamespace Remundo.Pricing.Tests;\n\npublic class GermanyTests\n{\n    private const decimal ACCURACY = 0.01m;\n\n    private IHttpService _fakeHttpService;\n    private InMemoryDomainRepository _inMemoryDomainRepo;\n    private Worker _sut;\n    private readonly string PAYLOAD_DIR = \"./PayloadSamples/Germany\";\n\n    [SetUp]\n    public void Setup()\n    {\n        _inMemoryDomainRepo = new InMemoryDomainRepository();\n        _fakeHttpService = new FakeHttpService();\n        _sut = new Worker(_inMemoryDomainRepo, new NullLogger(new LogFactory()), _fakeHttpService);\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_Then_I_Expect_PriceCalculatedV6_event()\n    {\n        // Assign\n        var expectedPricingIdentity = \"DE\";\n        var expectedEmployerCosts = new Dictionary<string, decimal>\n        {\n            {\"Unemployment Insurance\", 1047.96m },\n            {\"Pension Insurance\", 7923.6m },\n            {\"Other Employer Costs\", 3888m },\n            {\"Health Insurance\", 4369.05m },\n            {\"Care Insurance\", 1017.45m },\n            {\"Accident Insurance\", 384m },\n            {\"Sick Leave\", 4158.9018m },\n            {\"Occupational Health & Safety\", 2079.4509m },\n            {\"Professional Indemnity\", 1386.3006m },\n            {\"Medical Leave\", 4158.91m },\n            {\"Severance Cost\", 5780.88m }\n        };\n        var cloudRequest = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-DE-1_0.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        var evt = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        var employerCosts = evt.Costs[\"Employer Cost\"].Where(x => x.Value != 0m).ToDictionary(x => x.Key, x => x.Value);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(evt.IsoCode, Is.EqualTo(expectedPricingIdentity));\n            foreach (var (key, cost) in employerCosts)\n            {\n                Assert.That(employerCosts[key], Is.EqualTo(expectedEmployerCosts[key]).Within(ACCURACY), $\"Label: {key}\");\n            }\n        });\n    }\n\n    [Test]\n    public void Given_I_receive_ReCalculatePrice_command_Then_I_Expect_PriceCalculatedV6_event()\n    {\n        // Assign\n        var expectedPricingIdentity = \"DE\";\n        var expectedEmployerCosts = new Dictionary<string, decimal>\n        {\n            {\"Unemployment Insurance\", 1047.96m },\n            {\"Pension Insurance\", 7923.6m },\n            {\"Other Employer Costs\", 3892.6656m },\n            {\"Health Insurance\", 4369.05m },\n            {\"Care Insurance\", 1017.45m },\n            {\"Accident Insurance\", 384.4608m },\n            {\"Sick Leave\", 4163.375592m },\n            {\"Occupational Health & Safety\", 2081.687796m },\n            {\"Professional Indemnity\", 1387.791864m },\n            {\"Medical Leave\", 4163.38m },\n            {\"Severance Cost\", 5787.1m }\n        };\n        var cloudRequest = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-DE-1_0.json\");\n        var recloudRequest = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/recalculateprice-1_0.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n        _sut.Process(recloudRequest);\n\n        var evt = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1];\n        var employerCosts = evt.Costs[\"Employer Cost\"].Where(x => x.Value != 0m).ToDictionary(x => x.Key, x => x.Value);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(evt.IsoCode, Is.EqualTo(expectedPricingIdentity));\n            foreach (var (key, cost) in employerCosts)\n            {\n                Assert.That(employerCosts[key], Is.EqualTo(expectedEmployerCosts[key]).Within(ACCURACY), $\"Label: {key}\");\n            }\n        });\n    }\n\n    [Test]\n    public void Given_I_receive_ReCalculatePrice_WithInsurances_command_Then_I_Expect_PriceCalculatedV6_event()\n    {\n        // Assign\n        var expectedPricingIdentity = \"DE\";\n        var expectedEmployerCosts = new Dictionary<string, decimal>\n        {\n            {\"Unemployment Insurance\", 1047.96m },\n            {\"Pension Insurance\", 7923.6m },\n            {\"Other Employer Costs\", 3892.6656m },\n            {\"Health Insurance\", 4369.05m },\n            {\"Care Insurance\", 1017.45m },\n            {\"Accident Insurance\", 384.4608m },\n            {\"Sick Leave\", 4211.7276328163265306122448981m },\n            {\"Occupational Health & Safety\", 2081.69m },\n            {\"Professional Indemnity\", 1387.8m },\n            {\"Medical Leave\", 4163.38m },\n            {\"Severance Cost\", 5787.1m }\n        };\n        var cloudRequest = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-DE-1_0.json\");\n        var recloudRequest = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/recalculateprice-1_0.json\",\n            new Dictionary<string, dynamic> { { \"MedicalInsurance\", true }, { \"DeathInsuranceSelected\", true } });\n\n        // Act\n        _sut.Process(cloudRequest);\n        _sut.Process(recloudRequest);\n\n        var evt = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1];\n        var employerCosts = evt.Costs[\"Employer Cost\"].Where(x => x.Value != 0m).ToDictionary(x => x.Key, x => x.Value);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(evt.IsoCode, Is.EqualTo(expectedPricingIdentity));\n            foreach (var (key, cost) in employerCosts)\n            {\n                Assert.That(employerCosts[key], Is.EqualTo(expectedEmployerCosts[key]).Within(ACCURACY), $\"Label: {key}\");\n            }\n        });\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/IrelandTests.cs\n// service: src\nusing NLog;\nusing Newtonsoft.Json.Linq;\nusing Remundo.Pricing.Adapter;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Tests.Fakes;\nusing Remundo.Pricing.Tests.Utils;\n\nnamespace Remundo.Pricing.Tests;\n\npublic class IrelandTests\n{\n    private IHttpService _fakeHttpService;\n    private InMemoryDomainRepository _inMemoryDomainRepo;\n    private Worker _sut;\n\n    [SetUp]\n    public void Setup()\n    {\n        _inMemoryDomainRepo = new InMemoryDomainRepository();\n        _fakeHttpService = new FakeHttpService();\n        _sut = new Worker(_inMemoryDomainRepo, LogManager.CreateNullLogger(), _fakeHttpService);\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_Then_I_Expect_PriceCalculatedV2_event()\n    {\n        // Assign\n        var expectedPricingIdentity = \"IE\";\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-1_0.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        // Assert\n        Assert.That(((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[0]).IsoCode, Is.EqualTo(expectedPricingIdentity));\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_Then_I_Expect_PriceCalculatedV2_event_with_the_same_data_in_the_CalculatePrice_command()\n    {\n\n        // Assign\n        const decimal expectedAnnualSalary = 50000m;\n        const bool expectedDeathInsurance = false;\n        const bool expectedMedicalInsurance = false;\n        const bool expectedDentalInsurance = false;\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-1_0.json\");\n\n        // Act\n        _sut.Process(calculatePrice);\n\n        // Assert\n        Assert.That(((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[0]).GrossSalaryElements[\"Base Salary\"], Is.EqualTo(expectedAnnualSalary));\n        Assert.That(((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[0]).DeathInsuranceSelected, Is.EqualTo(expectedDeathInsurance));\n        Assert.That(((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[0]).MedicalInsuranceSelected, Is.EqualTo(expectedMedicalInsurance));\n        Assert.That(((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[0]).DentalInsuranceSelected, Is.EqualTo(expectedDentalInsurance));\n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_oneoff_bonus_then_oneoff_will_be_set()\n    {\n        var expectedBonusIncludingCosts = 13.85904m;\n        var calculateCloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-1_0.json\");\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-oneoffdata-1.0.json\");\n\n        //Act\n        _sut.Process(calculateCloudRequest);\n        _sut.Process(cloudRequest);\n\n        Assert.That(((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[1]).SigningBonusCosts, Is.EqualTo(expectedBonusIncludingCosts));\n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_oneoff_bonus_removed_then_oneoff_will_be_set_to_zero()\n    {\n        // Assign\n        const decimal expectedBonusIncludingCosts = 0m;\n        const decimal expectedBonusAmount = 0m;\n        var calculatePriceInGbp = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-1_0.json\");\n        var recalculatePriceWithOneOffData = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-1_0-removesigningbonus.json\");\n\n        //Act\n        _sut.Process(calculatePriceInGbp);\n        _sut.Process(recalculatePriceWithOneOffData);\n\n        // Assert\n        Assert.That(((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[1]).SigningBonusCosts, Is.EqualTo(expectedBonusIncludingCosts));\n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_oneoff_bonus_and_vesting_then_bonus_will_be_set()\n    {\n        // Assign\n        const decimal expectedBonusIncludingCosts = 13.85904m;\n        const decimal expectedVestingAmount = 923.936m;\n        var calculatePriceInGbp = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-1_0.json\");\n        var recalculatePriceWithOneOffData = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-signingbonus-1_0.json\");\n        var recalculatePriceWithVestingBonus = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-vesting-1_0.json\");\n\n        //Act\n        _sut.Process(calculatePriceInGbp);\n        _sut.Process(recalculatePriceWithOneOffData);\n        _sut.Process(recalculatePriceWithVestingBonus);\n\n        Assert.That(((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[2]).SigningBonusCosts, Is.EqualTo(expectedBonusIncludingCosts));\n        Assert.That(((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[2]).VestingBonusCosts, Is.EqualTo(expectedVestingAmount));\n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_remove_vesting_bonus_then_vesting_will_be_set_to_zero()\n    {\n        // Assign\n        const decimal expectedVestingAmount = 0m;\n        const decimal expectedCliffMonths = 0m;\n        const decimal expectedTotalMonths = 0m;\n        var calculatePriceInGbp = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-1_0.json\");\n        var recalculatePriceWithVestingBonus = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-removevesting-1_0.json\");\n\n        // Act\n        _sut.Process(calculatePriceInGbp);\n        _sut.Process(recalculatePriceWithVestingBonus);\n\n        // Assert\n        Assert.That(((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[1]).VestingBonusCosts, Is.EqualTo(expectedVestingAmount));\n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_vesting_bonus_then_vesting_will_be_set()\n    {\n        var expectedVestingAmount = 923.936m;\n        var expectedCliffMonths = 12m;\n        var expectedTotalMonths = 15m;\n        var calculateCloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-1_0.json\");\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-vesting-1_0.json\");\n\n        //Act\n        _sut.Process(calculateCloudRequest);\n        _sut.Process(cloudRequest);\n\n        Assert.That(((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[1]).VestingBonusCosts, Is.EqualTo(expectedVestingAmount));\n    }\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_with_allowances_then_I_Expect_The_Correct_Overhead()\n    {\n        // Assign\n        const decimal expectedOverhead = 5616.10944m;\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var calculateCloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-1_0-Overhead.json\");\n\n        // Act\n        _sut.Process(calculateCloudRequest);\n\n        // Assert\n        Assert.That(((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[0]).EmployerCostElements[\"EHS/OSHA\"], Is.EqualTo(expectedOverhead));\n    }\n\n    [TestCase(12345, 8966.77025, 8980)]\n    [TestCase(120000, 65587.5, 65595)]\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_with_a_Deposit_factor_I_expect_the_deposit_to_be_calculated_correctly(decimal annualSalary, decimal expectedDeposit, decimal expectedRounded)\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-1_0-deposit-factor.json\");\n\n        // Replace the annual salary from the payload sample\n        var data = JObject.Parse(cloudRequest.Data);\n        data[\"AnnualSalary\"] = annualSalary;\n        cloudRequest.Data = data.ToString();\n\n        // Act\n        _sut.Process(cloudRequest);\n        // Assert\n        var @event = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        Assert.That(@event.Deposit, Is.EqualTo(expectedDeposit));\n        Assert.That(@event.DepositRounded, Is.EqualTo(expectedRounded));\n    }\n\n    //[Test]\n    //public void Given_I_receive_CalculatePrice_command_with_deathInsurance_And_120000_salary_Then_I_Expect_PriceCalculatedV2_event()\n    //{\n    //    // Assigns\n    //    var expectedTotalCost = 144590.4m;\n    //    var expectedMedicalInsuranceCost = 1278.07m * 12;\n    //    var expectedDentalInsuranceCost = 175.21m * 12;\n    //    var expectedDeathInsuranceCost = 461.55m * 12;\n    //    var expectedTotalCostWithInsurances = expectedTotalCost + expectedMedicalInsuranceCost + expectedDentalInsuranceCost + expectedDeathInsuranceCost;\n    //    var inMemoryDomainRepo = new InMemoryDomainRepository();\n    //    var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-1_0-insurances.json\");\n    //    var sut = new Worker(inMemoryDomainRepo, new NullLogger<Worker>(), _fakExchangeRateReader);\n\n\n    //    // Act\n    //    _sut.Process(cloudRequest);\n\n\n    //    // Assert\n\n    //    Assert.That((((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[0]).MedicalInsuranceCost).PennyUp(),\n    //        Is.EqualTo(expectedMedicalInsuranceCost/12));\n    //    Assert.That((((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[0]).DentalInsuranceCost).PennyUp(),\n    //        Is.EqualTo(expectedDentalInsuranceCost/12));\n    //    Assert.That((((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[0]).DeathInsuranceCost).PennyUp(),\n    //        Is.EqualTo(expectedDeathInsuranceCost/12));\n    //    Assert.That((((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost).PennyUp(),\n    //        Is.EqualTo(expectedTotalCostWithInsurances));\n    //}\n\n    [TestCase(188000, 581.63265306122448979591836733)] // using a different fake exchange rate\n    [TestCase(200000, 581.63265306122448979591836733)]\n    [TestCase(250000, 581.63265306122448979591836733)]\n    [TestCase(500000, 581.63265306122448979591836733)]\n    [Test]\n    public void Given_I_recieve_a_CalculatePrice_request_I_expect_to_calculate_the_correct_total(decimal annualSalary, double expectedLifeInsurance)\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-1_0.json\");\n\n        // Replace the annual salary from the payload sample\n        var data = JObject.Parse(cloudRequest.Data);"}
{"text": "// file: src/Remundo.Pricing.Tests/IrelandTests.cs\n// service: src\n//{\n    //    // Assigns\n    //    var expectedTotalCost = 144590.4m;\n    //    var expectedMedicalInsuranceCost = 1278.07m * 12;\n    //    var expectedDentalInsuranceCost = 175.21m * 12;\n    //    var expectedDeathInsuranceCost = 461.55m * 12;\n    //    var expectedTotalCostWithInsurances = expectedTotalCost + expectedMedicalInsuranceCost + expectedDentalInsuranceCost + expectedDeathInsuranceCost;\n    //    var inMemoryDomainRepo = new InMemoryDomainRepository();\n    //    var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-1_0-insurances.json\");\n    //    var sut = new Worker(inMemoryDomainRepo, new NullLogger<Worker>(), _fakExchangeRateReader);\n\n\n    //    // Act\n    //    _sut.Process(cloudRequest);\n\n\n    //    // Assert\n\n    //    Assert.That((((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[0]).MedicalInsuranceCost).PennyUp(),\n    //        Is.EqualTo(expectedMedicalInsuranceCost/12));\n    //    Assert.That((((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[0]).DentalInsuranceCost).PennyUp(),\n    //        Is.EqualTo(expectedDentalInsuranceCost/12));\n    //    Assert.That((((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[0]).DeathInsuranceCost).PennyUp(),\n    //        Is.EqualTo(expectedDeathInsuranceCost/12));\n    //    Assert.That((((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost).PennyUp(),\n    //        Is.EqualTo(expectedTotalCostWithInsurances));\n    //}\n\n    [TestCase(188000, 581.63265306122448979591836733)] // using a different fake exchange rate\n    [TestCase(200000, 581.63265306122448979591836733)]\n    [TestCase(250000, 581.63265306122448979591836733)]\n    [TestCase(500000, 581.63265306122448979591836733)]\n    [Test]\n    public void Given_I_recieve_a_CalculatePrice_request_I_expect_to_calculate_the_correct_total(decimal annualSalary, double expectedLifeInsurance)\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-1_0.json\");\n\n        // Replace the annual salary from the payload sample\n        var data = JObject.Parse(cloudRequest.Data);\n        data[\"AnnualSalary\"] = annualSalary;\n        cloudRequest.Data = data.ToString();\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        // Assert\n        var @event = (PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        Assert.That(@event.DeathInsuranceCost, Is.EqualTo(expectedLifeInsurance));\n    }\n\n    [TestCase(50000, 7968.25)]\n    [TestCase(120000, 18073.8)]\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_I_expect_the_deposit_to_be_calculated_correctly(decimal annualSalary, decimal expectedDeposit)\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-1_0.json\");\n\n        // Replace the annual salary from the payload sample\n        var data = JObject.Parse(cloudRequest.Data);\n        data[\"AnnualSalary\"] = annualSalary;\n        cloudRequest.Data = data.ToString();\n\n        // Act\n        _sut.Process(cloudRequest);\n        // Assert\n        var @event = (PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        Assert.That(@event.Deposit, Is.EqualTo(expectedDeposit));\n    }\n\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_with_domain_and_allowances_I_expect_the_employer_cost_to_be_calculated_correctly()\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-1_0-with-domain-and-allowances.json\");\n        //var exchangeRate = _fakExchangeRateReader.GetExchangeRate(\"USD\", \"EUR\").Result;\n        // Act\n        _sut.Process(cloudRequest);\n        // Assert\n        var @event = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        Assert.Multiple(() =>\n        {\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Professional Indemnity\"], Is.EqualTo(1406.56m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Occupational Health & Safety\"], Is.EqualTo(2109.84m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Medical Leave\"], Is.EqualTo(4219.67m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Severance Cost\"], Is.EqualTo(8158.03m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"HR Support\"], Is.EqualTo(144m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Payroll Processing Fee\"], Is.EqualTo(144m));\n\n            Assert.That(@event.EmployerCost, Is.EqualTo(30405.6828m));\n        });\n\n    }\n\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_with_domain_and_allowances_followed_by_a_signing_bonus_command_then_I_expect_the_employer_cost_to_be_calculated_correctly()\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-1_0-with-domain-and-allowances.json\");\n        var cloudRequestRecalculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-signingbonus-2_0.json\");\n        //var exchangeRate = _fakExchangeRateReader.GetExchangeRate(\"USD\", \"EUR\").Result;\n        // Act\n        _sut.Process(cloudRequest); \n        _sut.Process(cloudRequestRecalculatePrice);\n\n        // Assert\n        var @event = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1];\n        Assert.Multiple(() =>\n        {\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Professional Indemnity\"], Is.EqualTo(1406.56m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Occupational Health & Safety\"], Is.EqualTo(2109.84m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Medical Leave\"], Is.EqualTo(4219.67m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Severance Cost\"], Is.EqualTo(8158.03m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"HR Support\"], Is.EqualTo(144m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Payroll Processing Fee\"], Is.EqualTo(144m));\n            Assert.That(@event.Costs[\"Additional Payments\"][\"Signing Bonus\"], Is.EqualTo(14.86m));\n\n\n            Assert.That(@event.EmployerCost, Is.EqualTo(30405.6828m));\n        });\n        \n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePriceV2_command_with_a_oneoff_bonus_then_oneoff_will_be_set()\n    {\n\n        //according to the excel\n        //50000 annual salary total cost is 62087.33\n        //with one off bonus of 12 is 62,102.16\n        // difference is 14.83 -> 14.84 with PennyUp()\n        var expectedBonusIncludingCosts = 14.86m;\n        var calculateCloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-2_0.json\");\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-signingbonus-2_0.json\");\n\n        //Act\n        _sut.Process(calculateCloudRequest);\n        _sut.Process(cloudRequest);\n\n        //Assert\n        var @event = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1];\n        Assert.That(@event.Costs[\"Additional Payments\"][\"Signing Bonus\"], Is.EqualTo(expectedBonusIncludingCosts));\n    }\n\n    [Test]\n    public void Given_platform_Fee_is_a_percentage_when_I_receive_a_CalculatePrice_request_I_expect_the_correct_total_cost()\n    {\n        // Assign\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-1_0-platformFee-percentage.json\");\n\n        decimal expectedTotalCost = 73564.0625m;\n        decimal expectedPlatformFee = 9595.3125m;\n\n        // Act\n        _sut.Process(calculatePrice);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).PlatformFeeInLocalCurrency, Is.EqualTo(expectedPlatformFee));\n        Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost, Is.EqualTo(expectedTotalCost));\n\n    }\n\n    [Test]\n    public void Given_platform_Fee_is_a_fixed_fee_when_I_receive_a_CalculatePrice_request_I_expect_the_correct_total_cost()\n    {\n        // Assign\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-1_0-platformFee-fixed-fee.json\");\n\n\n        decimal expectedPlatformFee = 6000m;\n        decimal expectedTotalCost = 9490m;\n\n        // Act\n        _sut.Process(calculatePrice);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).PlatformFeeInLocalCurrency, Is.EqualTo(expectedPlatformFee));\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost, Is.EqualTo(expectedTotalCost));\n        });\n        \n\n    }\n\n    [Test]\n    public void Test_PRSI()\n    {\n        // Assign\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-1_0-60000.json\");\n\n\n        decimal expectedPRSI = 787.50M;\n\n        // Act\n        _sut.Process(calculatePrice);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).Costs[\"Employer Cost\"][\"Pay-related Social Insurance\"]/12.0m, Is.EqualTo(expectedPRSI));\n        });\n\n\n    }\n\n    [Test]\n    [TestCase(73564.07, true)]\n    [TestCase(9490, false)]\n    public void Given_hrsupport_is_or_isnt_a_percentage_when_I_receive_a_calculatePrice_request_I_expect_the_correct_total_cost(decimal expectedTotalCost, bool isPercentage)\n    {\n        // Assign\n        var calculatePrice = Helpers.BuildCloudRequest($\"./PayloadSamples/Ireland/pricing-IE-1_0-platformFee-{(isPercentage ? \"percentage\" : \"fixed-fee\")}.json\");\n\n        // Act\n        _sut.Process(calculatePrice);\n\n        // Assert\n        Assert.Multiple(() =>"}
{"text": "// file: src/Remundo.Pricing.Tests/IrelandTests.cs\n// service: src\nAssert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost, Is.EqualTo(expectedTotalCost));\n        });\n        \n\n    }\n\n    [Test]\n    public void Test_PRSI()\n    {\n        // Assign\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-1_0-60000.json\");\n\n\n        decimal expectedPRSI = 787.50M;\n\n        // Act\n        _sut.Process(calculatePrice);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).Costs[\"Employer Cost\"][\"Pay-related Social Insurance\"]/12.0m, Is.EqualTo(expectedPRSI));\n        });\n\n\n    }\n\n    [Test]\n    [TestCase(73564.07, true)]\n    [TestCase(9490, false)]\n    public void Given_hrsupport_is_or_isnt_a_percentage_when_I_receive_a_calculatePrice_request_I_expect_the_correct_total_cost(decimal expectedTotalCost, bool isPercentage)\n    {\n        // Assign\n        var calculatePrice = Helpers.BuildCloudRequest($\"./PayloadSamples/Ireland/pricing-IE-1_0-platformFee-{(isPercentage ? \"percentage\" : \"fixed-fee\")}.json\");\n\n        // Act\n        _sut.Process(calculatePrice);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost.PennyUp(), Is.EqualTo(expectedTotalCost));\n        });\n    }\n\n    [Test]\n    [TestCase(73564.07, true)]\n    [TestCase(9490, false)]\n    public void Given_payrollprocessingfee_is_or_isnt_a_percentage_when_I_receive_a_calculatePrice_request_I_expect_the_correct_total_cost(decimal expectedTotalCost, bool isPercentage)\n    {\n        // Assign\n        var calculatePrice = Helpers.BuildCloudRequest($\"./PayloadSamples/Ireland/pricing-IE-1_0-platformFee-{(isPercentage ? \"percentage\" : \"fixed-fee\")}.json\");\n\n        // Act\n        _sut.Process(calculatePrice);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost.PennyUp(), Is.EqualTo(expectedTotalCost));\n        });\n    }\n\n    [Test]\n    [TestCase(\"Amdocs\", 15.34)]\n    [TestCase(\"XML-INT\", null)]\n    public void Given_I_receive_a_calculate_price_command_I_expect_to_get_the_correct_MSPFee_value_for_a_specific_tenant(string tenantId, decimal? expectedMSPFee)\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-1_0-tenantCosts.json\");\n\n        var data = JObject.Parse(cloudRequest.Data);\n        data[\"TenantId\"] = tenantId;\n        cloudRequest.Data = data.ToString();\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        var @event = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        var mspFee = @event.Costs.ContainsKey(\"Tenant Costs\") ? @event.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n\n        // Assert\n        Assert.That(mspFee, Is.EqualTo(expectedMSPFee));\n    }\n\n    [Test]\n    [TestCase(\"Amdocs\", 15.34, 13.82)]\n    [TestCase(\"XML-INT\", null, null)]\n    [TestCase(\"Acme\", null, null)]\n    public void Given_I_receive_a_RecalculatePrice_command_I_expect_the_MSPFee_value_to_be_recalculated_for_a_specific_tenant(string tenantId, decimal? expectedMSPFee, decimal? expectedRecalculatedMSPFee)\n    {\n        // Assign\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/pricing-IE-1_0-tenantCosts.json\");\n        var recalculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Ireland/recalculateprice-IE-tenantCosts.json\");\n\n        var calculatePriceData = JObject.Parse(calculatePrice.Data);\n        calculatePriceData[\"TenantId\"] = tenantId;\n        calculatePrice.Data = calculatePriceData.ToString();\n\n        var recalculatePriceData = JObject.Parse(recalculatePrice.Data);\n        recalculatePriceData[\"TenantId\"] = tenantId;\n        recalculatePrice.Data = recalculatePriceData.ToString();\n\n        // Act\n        _sut.Process(calculatePrice);\n        _sut.Process(recalculatePrice);\n\n        var firstEvent = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        var secondEvent = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1];\n        var firstMspFee = firstEvent.Costs.ContainsKey(\"Tenant Costs\") ? firstEvent.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n        var recalculatedMspFee = secondEvent.Costs.ContainsKey(\"Tenant Costs\") ? secondEvent.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(firstMspFee, Is.EqualTo(expectedMSPFee));\n            Assert.That(recalculatedMspFee, Is.EqualTo(expectedRecalculatedMSPFee));\n        });\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/ItalyTests.cs\n// service: src\n﻿using NLog;\nusing Remundo.Pricing.Adapter;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Tests.Fakes;\nusing Remundo.Pricing.Tests.Utils;\n\nnamespace Remundo.Pricing.Tests;\n\npublic class ItalyTests\n{\n    private const decimal ACCURACY = 0.01m; \n\n    private InMemoryDomainRepository _inMemoryDomainRepo;\n    private Worker _sut;\n    private IHttpService _httpService;\n\n    [SetUp]\n    public void Setup()\n    {\n        _inMemoryDomainRepo = new InMemoryDomainRepository();\n        _httpService = new FakeHttpService();\n        _sut = new Worker(_inMemoryDomainRepo, LogManager.CreateNullLogger(), _httpService);\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_Then_I_Expect_PriceCalculatedV6_event()\n    {\n        // Assign\n        var expectedPricingIdentity = \"IT\";\n        var expectedEmployerCosts = new Dictionary<string, decimal>\n        {\n            { \"Non-deductible IRAP Tax\", 330m },\n            { \"Social Security\", 1600m },\n            {\"TFR Severance Accrual\", 507.54m },\n            { \"Unused Holiday Accrual\", 549.78m },\n            //XML Costs\n            { \"Professional Indemnity\", 79.87m},\n            { \"Occupational Health & Safety\", 119.81m},\n            { \"Medical Leave\", 239.62m},\n        };\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Italy/pricing-IT-1_0.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        var evt = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        var employerCosts = evt.Costs[\"Employer Cost\"].Where(x => x.Value != 0m).ToDictionary(x => x.Key, x => Math.Round(x.Value/12, 2));\n        // Assert\n        Assert.That(evt.IsoCode, Is.EqualTo(expectedPricingIdentity));\n        CollectionAssert.AreEquivalent(expectedEmployerCosts, employerCosts);\n    }\n\n    [Test]\n    public void Given_I_receive_ReCalculatePrice_command_Then_I_Expect_PriceCalculatedV6_event()\n    {\n        // Assign\n        var expectedPricingIdentity = \"IT\";\n        var expectedEmployerCosts = new Dictionary<string, decimal>\n        {\n            { \"Non-deductible IRAP Tax\", 330m },\n            { \"Social Security\", 1600m },\n            { \"TFR Severance Accrual\", 507.54m },\n            { \"Unused Holiday Accrual\", 549.78m },\n\n            //XML Costs\n            { \"Professional Indemnity\", 79.87m},\n            { \"Occupational Health & Safety\", 119.81m},\n            { \"Medical Leave\", 239.62m},\n        };\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Italy/pricing-IT-1_0.json\");\n        var recloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Italy/recalculateprice-IT-1_0.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n        _sut.Process(recloudRequest);\n\n        var evt = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1];\n        var employerCosts = evt.Costs[\"Employer Cost\"]\n            .Where(x => x.Value != 0m)\n            .ToDictionary(x => x.Key, x => Math.Round(x.Value / 12, 2));\n        // Assert\n        Assert.That(evt.IsoCode, Is.EqualTo(expectedPricingIdentity));\n\n        Assert.Multiple(() =>\n        {\n            foreach (var (key, value) in expectedEmployerCosts)\n            {\n                Assert.That(employerCosts.ContainsKey(key), Is.True, $\"Contains key: {key}\");\n                Assert.That(employerCosts[key], Is.EqualTo(expectedEmployerCosts[key]).Within(ACCURACY), $\"{key}\");\n            }\n        });\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_With_Dirigenti_command_Then_I_Expect_PriceCalculatedV6_event()\n    {\n        // Assign\n        var expectedPricingIdentity = \"IT\";\n        var expectedEmployerCosts = new Dictionary<string, decimal>\n        {\n            //Statutory Costs\n            { \"FASDAC (Dirigenti's fund)\", 320.44m },\n            { \"Negri (Dirigenti's fund)\", 356.82m },\n            { \"Non-deductible IRAP Tax\", 369.6875m },\n            { \"Pastore  (Dirigenti's fund)\", 116.49m },\n            { \"Social Security\", 1600m },\n            { \"Unused Holiday Accrual\", 615.899375m },\n            {\"TFR Severance Accrual\", 568.579375m},\n            //XML Costs\n            { \"Professional Indemnity\", 89.4791625m},\n            { \"Occupational Health & Safety\", 134.21874375m},\n            { \"Medical Leave\", 268.4374875m}\n        };\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Italy/pricing-IT-1_0-dirigenti.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        var evt = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        var employerCosts = evt.Costs[\"Employer Cost\"].Where(x => x.Value != 0m).ToDictionary(x => x.Key, x => x.Value / 12);\n        // Assert\n        Assert.That(evt.IsoCode, Is.EqualTo(expectedPricingIdentity));\n\n        Assert.Multiple(() =>\n        {\n            foreach (var (key, value) in expectedEmployerCosts)\n            {\n                Assert.That(employerCosts.ContainsKey(key), Is.True, $\"Contains key: {key}\");\n                Assert.That(employerCosts[key], Is.EqualTo(expectedEmployerCosts[key]).Within(ACCURACY), $\"{key}\");\n            }\n        });\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_With_Quadri_command_Then_I_Expect_PriceCalculatedV6_event()\n    {\n        // Assign\n        var expectedPricingIdentity = \"IT\";\n        var expectedEmployerCosts = new Dictionary<string, decimal>\n        {\n            //Statutory Costs\n            { \"Trade Unions\", 2.44m },\n            { \"Non-deductible IRAP Tax\", 330.12m },\n            { \"Social Security\", 1600m },\n            { \"Unused Holiday Accrual\", 549.98m },\n            {\"TFR Severance Accrual\", 507.73m},\n            //XML Costs\n            { \"Professional Indemnity\", 79.90m},\n            { \"Occupational Health & Safety\", 119.85m },\n            { \"Medical Leave\", 239.71m}\n        };\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Italy/pricing-IT-1_0-quadri.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        var evt = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        var employerCosts = evt.Costs[\"Employer Cost\"]\n            .Where(x => x.Value != 0m)\n            .ToDictionary(x => x.Key, x => Math.Round(x.Value / 12, 2));\n        // Assert\n        Assert.That(evt.IsoCode, Is.EqualTo(expectedPricingIdentity));\n        CollectionAssert.AreEquivalent(expectedEmployerCosts, employerCosts);\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/LuxembourgTests.cs\n// service: src\nusing NLog;\nusing Newtonsoft.Json.Linq;\nusing Remundo.Pricing.Adapter;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Tests.Fakes;\nusing Remundo.Pricing.Tests.Utils;\n\nnamespace Remundo.Pricing.Tests;\n\n[TestFixture]\npublic class LuxembourgTests\n{\n    private const string PAYLOAD_DIR = \"./PayloadSamples/Luxembourg\";\n    private const decimal ACCURACY = 0.1m; // Accurate to 1.d.p (Prices in Access are rounded to 2.d.p) \n\n    private InMemoryDomainRepository _repo; \n    private IHttpService _http;\n    private ILogger _logger;\n\n    private Worker _sut;\n\n    [SetUp]\n    public void SetUp()\n    {\n        _repo = new InMemoryDomainRepository();\n        _http = new FakeHttpServiceOriginal();\n        _logger = LogManager.CreateNullLogger();\n\n        _sut = new Worker(_repo, _logger, _http);\n    }\n\n    //Setup method using the payload sample. Make sure every payload you use is tested!\n    [Test]\n    [TestCase(\"./PayloadSamples/Luxembourg/pricing-LU-1_0.json\")]\n    [TestCase(\"./PayloadSamples/Luxembourg/pricing-LU-1_0-Currency.json\")]\n    public void Setup(string payloadSample)\n    {\n        // Assign\n        var expectedPricingIdentity = \"LU\";\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var cloudRequest = Helpers.BuildCloudRequest(payloadSample);\n\n        // Act\n        sut.Process(cloudRequest);\n\n        // Assert\n        Assert.That(((PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[0]).IsoCode, Is.EqualTo(expectedPricingIdentity));\n\n    }\n\n    [Test]\n    [TestCase(\"./PayloadSamples/Luxembourg/pricing-LU-1_0-Currency.json\")]\n    public void Give_the_currency_is_set_to_USD_I_expect_the_correct_currency_isocode(string payloadSample)\n    {\n        // Assign\n        var expectedCurrencyIsoCode = \"USD\";\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var cloudRequest = Helpers.BuildCloudRequest(payloadSample);\n\n        // Act\n        sut.Process(cloudRequest);\n\n        // Assert\n        Assert.That(((PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[0]).ConvertedCurrency, Is.EqualTo(expectedCurrencyIsoCode));\n    }\n\n    [Test]\n    [TestCase(\"./PayloadSamples/Luxembourg/pricing-LU-1_0-Currency(USDTOEUR).json\")]\n    public void Given_I_change_currency_to_EUR_I_expect_the_correct_currency_isocode(string payloadSample)\n    {\n        // Assign\n        var expectedCurrencyIsoCode = \"EUR\";\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var cloudRequest = Helpers.BuildCloudRequest(payloadSample);\n\n        // Act\n        sut.Process(cloudRequest);\n\n        // Assert\n        Assert.That(((PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[0]).ConvertedCurrency, Is.EqualTo(expectedCurrencyIsoCode));\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePriceLuxembourg_command_I_expect_the_correct_monthly_total_cost_of_employment()\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        const decimal expectedTotalCostOfEmployment = 12210.4m;\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var calculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-1_0.json\");\n\n        // Act\n        sut.Process(calculatePriceInEUR);\n\n        // Assert\n        Assert.That((((PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost) / 12, Is.EqualTo(expectedTotalCostOfEmployment));\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePriceLuxembourg_command_I_expect_the_correct_monthly_gross_salary()\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        const decimal expectedMonthlyGrossSalary = 10000;\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var calculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-1_0.json\");\n\n        // Act\n        sut.Process(calculatePriceInEUR);\n\n        // Assert\n        Assert.That((((PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[0]).GrossSalary) / 12, Is.EqualTo(expectedMonthlyGrossSalary));\n    }\n\n    [TestCase(12345, 6206.581245, 6220)]\n    [TestCase(120000, 50806.72, 50812)]\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_with_a_Deposit_factor_I_expect_the_deposit_to_be_calculated_correctly(decimal annualSalary, decimal expectedDeposit, decimal expectedRounded)\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-1_0-deposit-factor.json\");\n\n        // Replace the annual salary from the payload sample\n        var data = JObject.Parse(cloudRequest.Data);\n        data[\"AnnualSalary\"] = annualSalary;\n        cloudRequest.Data = data.ToString();\n\n        // Act\n        sut.Process(cloudRequest);\n\n        // Assert\n        var @event = (PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[0];\n        Assert.That(@event.Deposit, Is.EqualTo(expectedDeposit));\n        Assert.That(@event.DepositRounded, Is.EqualTo(expectedRounded));\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePriceLuxembourg_command_I_expect_the_correct_monthly_employer_cost()\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        const decimal expectedMonthlyEmployerCost = 1710.4m;\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var calculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-1_0.json\");\n\n        // Act\n        sut.Process(calculatePriceInEUR);\n\n        // Assert\n        Assert.That((((PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[0]).EmployerCost) / 12, Is.EqualTo(expectedMonthlyEmployerCost));\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePriceLuxembourg_command_I_expect_the_correct_platformFeeInEuros()\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        const decimal expectedPlatformFeeInEuros = 6000; \n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var calculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-1_0.json\");\n\n        // Act\n        sut.Process(calculatePriceInEUR);\n\n        // Assert\n        Assert.That((((PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[0]).PlatformFeeInEuros), Is.EqualTo(expectedPlatformFeeInEuros));\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePriceLuxembourg_command_I_expect_the_correct_insurance_boolean_values()\n    {\n        // Assign\n        const bool expectedDeathInsurance = false;\n        const bool expectedMedicalInsurance = false;\n        const bool expectedDentalInsurance = false;\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var calculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-1_0.json\");\n\n        // Act\n        sut.Process(calculatePriceInEUR);\n\n        // Assert\n        Assert.That((((PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[0]).DeathInsuranceSelected), Is.EqualTo(expectedDeathInsurance));\n        Assert.That((((PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[0]).MedicalInsuranceSelected), Is.EqualTo(expectedMedicalInsurance));\n        Assert.That((((PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[0]).DentalInsuranceSelected), Is.EqualTo(expectedDentalInsurance));\n    }\n\n    [Test]\n    public void Given_I_receive_ReCalculatePriceLU_command_when_I_add_insurances_I_expect_the_correct_insurance_boolean_values()\n    {\n        // Assign\n        const bool expectedDeathInsurance = true;\n        const bool expectedMedicalInsurance = true;\n        const bool expectedDentalInsurance = false;\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var calculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-1_0.json\");\n        var recalculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-1_0-RecalculatePrice.json\");\n\n        // Act\n        sut.Process(calculatePriceInEUR);\n        sut.Process(recalculatePriceInEUR);\n\n        // Assert\n        Assert.That((((PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[1]).DeathInsuranceSelected), Is.EqualTo(expectedDeathInsurance));\n        Assert.That((((PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[1]).MedicalInsuranceSelected), Is.EqualTo(expectedMedicalInsurance));\n        Assert.That((((PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[1]).DentalInsuranceSelected), Is.EqualTo(expectedDentalInsurance));\n    }\n\n    [Test]\n    public void Given_I_receive_ReCalculatePriceLU_command_when_I_add_insurances_I_expect_the_monthly_total_cost_of_employment_to_change()\n    {\n        // Assign"}
{"text": "// file: src/Remundo.Pricing.Tests/LuxembourgTests.cs\n// service: src\nconst bool expectedDentalInsurance = false;\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var calculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-1_0.json\");\n\n        // Act\n        sut.Process(calculatePriceInEUR);\n\n        // Assert\n        Assert.That((((PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[0]).DeathInsuranceSelected), Is.EqualTo(expectedDeathInsurance));\n        Assert.That((((PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[0]).MedicalInsuranceSelected), Is.EqualTo(expectedMedicalInsurance));\n        Assert.That((((PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[0]).DentalInsuranceSelected), Is.EqualTo(expectedDentalInsurance));\n    }\n\n    [Test]\n    public void Given_I_receive_ReCalculatePriceLU_command_when_I_add_insurances_I_expect_the_correct_insurance_boolean_values()\n    {\n        // Assign\n        const bool expectedDeathInsurance = true;\n        const bool expectedMedicalInsurance = true;\n        const bool expectedDentalInsurance = false;\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var calculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-1_0.json\");\n        var recalculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-1_0-RecalculatePrice.json\");\n\n        // Act\n        sut.Process(calculatePriceInEUR);\n        sut.Process(recalculatePriceInEUR);\n\n        // Assert\n        Assert.That((((PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[1]).DeathInsuranceSelected), Is.EqualTo(expectedDeathInsurance));\n        Assert.That((((PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[1]).MedicalInsuranceSelected), Is.EqualTo(expectedMedicalInsurance));\n        Assert.That((((PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[1]).DentalInsuranceSelected), Is.EqualTo(expectedDentalInsurance));\n    }\n\n    [Test]\n    public void Given_I_receive_ReCalculatePriceLU_command_when_I_add_insurances_I_expect_the_monthly_total_cost_of_employment_to_change()\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var expectedMonthlyEmployerCost = 16458.51m;    \n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var calculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-1_0.json\");\n        var recalculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-1_0-RecalculatePrice.json\");\n\n        // Act\n        sut.Process(calculatePriceInEUR);\n        sut.Process(recalculatePriceInEUR);\n\n        // Assert\n        Assert.That((((PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[1]).TotalCost/12).PennyUp(), Is.EqualTo(expectedMonthlyEmployerCost));\n\n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePriceLU_command_when_I_add_allowances_I_expect_the_correct_monthly_allowance_in_the_gross_salary_breakdown()\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        const decimal expectedMonthlyAllowance = 300;\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var calculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-1_0.json\");\n        var recalculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-1_0-RecalculatePrice.json\");\n\n        // Act\n        sut.Process(calculatePriceInEUR);\n        sut.Process(recalculatePriceInEUR);\n\n        // Assert\n        Assert.That((((PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[1]).Allowances[\"Transport\"]) / 12, Is.EqualTo(expectedMonthlyAllowance));\n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_Then_I_Expect_the_insurance_costs_to_be_correct()\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        decimal expectedDeathInsurance = 437.637185m;\n        decimal expectedMedicalInsurance = 1545.6m;\n        decimal expectedDentalInsurance = 312.73m;\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        \n        var calculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-1_0.json\");\n        var recalculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-1_0-RecalculatePrice.json\");\n\n        //Act\n        sut.Process(calculatePriceInEUR);\n        sut.Process(recalculatePriceInEUR);\n\n        // Assert\n        Assert.That((((PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[1]).DeathInsuranceCost), Is.EqualTo(expectedDeathInsurance));\n        Assert.That((((PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[1]).MedicalInsuranceCost), Is.EqualTo(expectedMedicalInsurance));\n        Assert.That((((PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[1]).DentalInsuranceCost), Is.EqualTo(expectedDentalInsurance));\n    }\n\n    [Test]\n    public void Given_I_Receive_CalculatePrice_Command_With_CurrencyUSD_Then_I_Expect_The_Correct_Elements()\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        decimal expectedAnnualAllowanceCost = 6432m;\n        decimal expectedAnnualSalary = 50000;\n        decimal expectedGrossSalary = expectedAnnualSalary + expectedAnnualAllowanceCost; \n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var calculatePriceInUSD = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-1_0-Currency.json\");\n\n        // Act\n        sut.Process(calculatePriceInUSD);\n\n        // Assert\n        Assert.That((((PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[0]).Allowances[\"Car/Transportation\"] *12).PennyUp(),\n            Is.EqualTo(expectedAnnualAllowanceCost));\n        Assert.That((((PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[0]).GrossSalary).PennyUp(),\n            Is.EqualTo(expectedGrossSalary));\n\n    }\n\n    [TestCase(188000, 551.27778)] //551 EUR is 570 USD (rate is 1.033)\n    [TestCase(200000, 551.27778)]\n    [TestCase(250000, 551.27778)]\n    [TestCase(500000, 551.27778)]\n    [Test]\n    public void Given_I_recieve_a_CalculatePrice_request_I_expect_to_calculate_the_correct_total(decimal annualSalary, decimal expectedLifeInsurance)\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-1_0.json\");\n\n        // Replace the annual salary from the payload sample\n        var data = JObject.Parse(cloudRequest.Data);\n        data[\"AnnualSalary\"] = annualSalary;\n        cloudRequest.Data = data.ToString();\n\n        // Act\n        sut.Process(cloudRequest);\n\n        // Assert\n        var @event = (PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[0];\n        Assert.That(@event.DeathInsuranceCost, Is.EqualTo(expectedLifeInsurance));\n    }\n\n    [TestCase(50000, 8069)]\n    [TestCase(120000, 18315.6)]\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_I_expect_the_deposit_to_be_calculated_correctly(decimal annualSalary, decimal expectedDeposit)\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-1_0.json\");\n\n        // Replace the annual salary from the payload sample\n        var data = JObject.Parse(cloudRequest.Data);\n        data[\"AnnualSalary\"] = annualSalary;\n        cloudRequest.Data = data.ToString();\n\n        // Act\n        sut.Process(cloudRequest);\n        // Assert\n        var @event = (PriceCalculatedV2)inMemoryDomainRepo.EventStore.Single().Value[0];\n        Assert.That(@event.Deposit, Is.EqualTo(expectedDeposit));\n    }\n\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_with_domain_and_allowances_I_expect_the_employer_cost_to_be_calculated_correctly()\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-1_0-with-domain-and-allowances.json\");\n        //var exchangeRate = _fakExchangeRateReader.GetExchangeRate(\"USD\", \"EUR\").Result;\n        // Act\n        sut.Process(cloudRequest);\n        // Assert\n        var @event = (PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[0];\n\n        Assert.Multiple(() =>\n        {\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Professional Indemnity\"], Is.EqualTo(1423.63m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Occupational Health & Safety\"], Is.EqualTo(2135.44m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Medical Leave\"], Is.EqualTo(4270.88m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Severance Cost\"], Is.EqualTo(1423.63m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"HR Support\"], Is.EqualTo(144m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Payroll Processing Fee\"], Is.EqualTo(144m));\n\n            Assert.That(@event.EmployerCost, Is.EqualTo(25471.99008m));\n            Assert.That(@event.TotalCost, Is.EqualTo(157903.99008m));\n        });\n    }\n\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_with_domain_and_allowances_followed_by_recalculate_price_I_expect_the_employer_cost_to_be_calculated_correctly()\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-1_0-with-domain-and-allowances.json\");\n        var cloudRequestWithRecalculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-signingbonus-2_0.json\");\n        //var exchangeRate = _fakExchangeRateReader.GetExchangeRate(\"USD\", \"EUR\").Result;\n        // Act\n        sut.Process(cloudRequest);\n        sut.Process(cloudRequestWithRecalculatePrice);\n        // Assert\n        var @event = (PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[1];\n\n        Assert.Multiple(() =>\n        {\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Professional Indemnity\"], Is.EqualTo(1423.63m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Occupational Health & Safety\"], Is.EqualTo(2135.44m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Medical Leave\"], Is.EqualTo(4270.88m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Severance Cost\"], Is.EqualTo(1423.63m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"HR Support\"], Is.EqualTo(144m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Payroll Processing Fee\"], Is.EqualTo(144m));\n\n            Assert.That(@event.EmployerCost, Is.EqualTo(25471.99008m));\n\n            Assert.That(@event.Costs[\"Additional Payments\"][\"Signing Bonus\"], Is.EqualTo(14.4m));\n        });"}
{"text": "// file: src/Remundo.Pricing.Tests/LuxembourgTests.cs\n// service: src\nAssert.That(@event.Costs[\"Employer Cost\"][\"Professional Indemnity\"], Is.EqualTo(1423.63m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Occupational Health & Safety\"], Is.EqualTo(2135.44m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Medical Leave\"], Is.EqualTo(4270.88m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Severance Cost\"], Is.EqualTo(1423.63m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"HR Support\"], Is.EqualTo(144m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Payroll Processing Fee\"], Is.EqualTo(144m));\n\n            Assert.That(@event.EmployerCost, Is.EqualTo(25471.99008m));\n            Assert.That(@event.TotalCost, Is.EqualTo(157903.99008m));\n        });\n    }\n\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_with_domain_and_allowances_followed_by_recalculate_price_I_expect_the_employer_cost_to_be_calculated_correctly()\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-1_0-with-domain-and-allowances.json\");\n        var cloudRequestWithRecalculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-signingbonus-2_0.json\");\n        //var exchangeRate = _fakExchangeRateReader.GetExchangeRate(\"USD\", \"EUR\").Result;\n        // Act\n        sut.Process(cloudRequest);\n        sut.Process(cloudRequestWithRecalculatePrice);\n        // Assert\n        var @event = (PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[1];\n\n        Assert.Multiple(() =>\n        {\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Professional Indemnity\"], Is.EqualTo(1423.63m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Occupational Health & Safety\"], Is.EqualTo(2135.44m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Medical Leave\"], Is.EqualTo(4270.88m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Severance Cost\"], Is.EqualTo(1423.63m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"HR Support\"], Is.EqualTo(144m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Payroll Processing Fee\"], Is.EqualTo(144m));\n\n            Assert.That(@event.EmployerCost, Is.EqualTo(25471.99008m));\n\n            Assert.That(@event.Costs[\"Additional Payments\"][\"Signing Bonus\"], Is.EqualTo(14.4m));\n        });\n    }\n\n    [Test]\n    public void Given_platform_Fee_is_a_percentage_when_I_receive_a_CalculatePrice_request_I_expect_the_correct_total_cost()\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-1_0-platformFee-percentage.json\");\n\n        decimal expectedTotalCost = 130839.5m;\n        decimal expectedPlatformFee = 6000m;\n\n        // Act\n        sut.Process(calculatePrice);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[0]).PlatformFeeInLocalCurrency, Is.EqualTo(expectedPlatformFee));\n        Assert.That(((PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost, Is.EqualTo(expectedTotalCost));\n\n    }\n\n    [Test]\n    public void Given_platform_Fee_is_a_fixed_fee_when_I_receive_a_CalculatePrice_request_I_expect_the_correct_total_cost()\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-1_0-platformFee-fixed-fee.json\");\n\n\n        decimal expectedPlatformFee = 6000m;\n        decimal expectedTotalCost = 9038.926m;\n\n        // Act\n        sut.Process(calculatePrice);\n\n        // Assert\n        Assert.That(((PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[0]).PlatformFeeInLocalCurrency, Is.EqualTo(expectedPlatformFee));\n        Assert.That(((PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost, Is.EqualTo(expectedTotalCost));\n\n    }\n\n    [Test]\n    [TestCase(130839.5, true)]\n    [TestCase(9038.93, false)]\n    public void Given_hrsupport_is_or_isnt_a_percentage_when_I_receive_a_calculatePrice_request_I_expect_the_correct_total_cost(decimal expectedTotalCost, bool isPercentage)\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var calculatePrice = Helpers.BuildCloudRequest($\"./PayloadSamples/Luxembourg/pricing-LU-1_0-platformFee-{(isPercentage ? \"percentage\" : \"fixed-fee\")}.json\");\n\n        // Act\n        sut.Process(calculatePrice);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost.PennyUp(), Is.EqualTo(expectedTotalCost));\n        });\n    }\n\n    [Test]\n    [TestCase(130839.5, true)]\n    [TestCase(9038.93, false)]\n    public void Given_payrollprocessingfee_is_or_isnt_a_percentage_when_I_receive_a_calculatePrice_request_I_expect_the_correct_total_cost(decimal expectedTotalCost, bool isPercentage)\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var calculatePrice = Helpers.BuildCloudRequest($\"./PayloadSamples/Luxembourg/pricing-LU-1_0-platformFee-{(isPercentage ? \"percentage\" : \"fixed-fee\")}.json\");\n\n        // Act\n        sut.Process(calculatePrice);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[0]).TotalCost.PennyUp(), Is.EqualTo(expectedTotalCost));\n        });\n    }\n\n    [Test]\n    [TestCase(\"Amdocs\", 18.19)]\n    [TestCase(\"XML-INT\", null)]\n    public void Given_I_receive_a_calculate_price_command_I_expect_to_get_the_correct_MSPFee_value_for_a_specific_tenant(string tenantId, decimal? expectedMSPFee)\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-tenantCosts.json\");\n\n        var data = JObject.Parse(cloudRequest.Data);\n        data[\"TenantId\"] = tenantId;\n        cloudRequest.Data = data.ToString();\n\n        // Act\n        sut.Process(cloudRequest);\n\n        var @event = (PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[0];\n        var mspFee = @event.Costs.ContainsKey(\"Tenant Costs\") ? @event.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n\n        // Assert\n        Assert.That(mspFee, Is.EqualTo(expectedMSPFee));\n    }\n\n    [Test]\n    [TestCase(\"Amdocs\", 18.19, 10.61)]\n    [TestCase(\"XML-INT\", null, null)]\n    [TestCase(\"Acme\", null, null)]\n    public void Given_I_receive_a_RecalculatePrice_command_I_expect_the_MSPFee_value_to_be_recalculated_for_a_specific_tenant(string tenantId, decimal? expectedMSPFee, decimal? expectedRecalculatedMSPFee)\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-tenantCosts.json\");\n        var recalculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Luxembourg/pricing-LU-recalculateprice-tenantCosts.json\");\n\n        var calculatePriceData = JObject.Parse(calculatePrice.Data);\n        calculatePriceData[\"TenantId\"] = tenantId;\n        calculatePrice.Data = calculatePriceData.ToString();\n\n        var recalculatePriceData = JObject.Parse(recalculatePrice.Data);\n        recalculatePriceData[\"TenantId\"] = tenantId;\n        recalculatePrice.Data = recalculatePriceData.ToString();\n\n        // Act\n        sut.Process(calculatePrice);\n        sut.Process(recalculatePrice);\n\n        var firstEvent = (PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[0];\n        var secondEvent = (PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[1];\n        var firstMspFee = firstEvent.Costs.ContainsKey(\"Tenant Costs\") ? firstEvent.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n        var recalculatedMspFee = secondEvent.Costs.ContainsKey(\"Tenant Costs\") ? secondEvent.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(firstMspFee, Is.EqualTo(expectedMSPFee));\n            Assert.That(recalculatedMspFee, Is.EqualTo(expectedRecalculatedMSPFee));\n        });\n    }\n\n    [Test, Category(\"Safety & Health at Work\")]\n    [TestCase(2.80 * 12, 24000)]\n    [TestCase(4.67 * 12, 40000)]\n    [TestCase(7.00 * 12, 60000)]\n    public void CalculatePriceV2_CalculatesCorrectSafetyAndHealthAtWork(decimal eSafetyHealthAtWork, decimal salary)\n    {\n        // Assign\n        var calculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/CalculatePriceV2.json\"),\n            new Dictionary<string, dynamic> { { \"AnnualSalary\", salary } });\n\n        // Act\n        _sut.Process(calculate);\n\n        // Assert\n        var stream = _repo.EventStore.Single().Value;\n        var evt = stream.First() as PriceCalculatedV6;\n        var cost = evt!.Costs[\"Employer Cost\"][\"Safety & Health at Work\"];\n\n        Assert.Multiple(() =>\n        {\n            Assert.That(cost, Is.EqualTo(eSafetyHealthAtWork).Within(ACCURACY));\n        });\n    }\n\n    [Test, Category(\"Safety & Health at Work\")]\n    [TestCase(2.80 * 12, 24000)]\n    [TestCase(4.67 * 12, 40000)]\n    [TestCase(7.00 * 12, 60000)]\n    public void RecalculatePriceV2_CalculatesCorrectSafetyAndHealthAtWork(decimal eSafetyHealthAtWork, decimal salary)\n    {\n        // Assign\n        var calculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/CalculatePriceV2.json\"),\n            new Dictionary<string, dynamic> { { \"AnnualSalary\", salary } });"}
{"text": "// file: src/Remundo.Pricing.Tests/LuxembourgTests.cs\n// service: src\nAssert.That(recalculatedMspFee, Is.EqualTo(expectedRecalculatedMSPFee));\n        });\n    }\n\n    [Test, Category(\"Safety & Health at Work\")]\n    [TestCase(2.80 * 12, 24000)]\n    [TestCase(4.67 * 12, 40000)]\n    [TestCase(7.00 * 12, 60000)]\n    public void CalculatePriceV2_CalculatesCorrectSafetyAndHealthAtWork(decimal eSafetyHealthAtWork, decimal salary)\n    {\n        // Assign\n        var calculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/CalculatePriceV2.json\"),\n            new Dictionary<string, dynamic> { { \"AnnualSalary\", salary } });\n\n        // Act\n        _sut.Process(calculate);\n\n        // Assert\n        var stream = _repo.EventStore.Single().Value;\n        var evt = stream.First() as PriceCalculatedV6;\n        var cost = evt!.Costs[\"Employer Cost\"][\"Safety & Health at Work\"];\n\n        Assert.Multiple(() =>\n        {\n            Assert.That(cost, Is.EqualTo(eSafetyHealthAtWork).Within(ACCURACY));\n        });\n    }\n\n    [Test, Category(\"Safety & Health at Work\")]\n    [TestCase(2.80 * 12, 24000)]\n    [TestCase(4.67 * 12, 40000)]\n    [TestCase(7.00 * 12, 60000)]\n    public void RecalculatePriceV2_CalculatesCorrectSafetyAndHealthAtWork(decimal eSafetyHealthAtWork, decimal salary)\n    {\n        // Assign\n        var calculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/CalculatePriceV2.json\"),\n            new Dictionary<string, dynamic> { { \"AnnualSalary\", salary } });\n\n        var recalculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/RecalculatePriceV2.json\"),\n            new Dictionary<string, dynamic> { { \"AnnualSalary\", salary } });\n\n        // Act\n        _sut.Process(calculate);\n        _sut.Process(recalculate);\n\n        // Assert\n        var stream = _repo.EventStore.Last().Value;\n        var evt = stream.First() as PriceCalculatedV6;\n        var cost = evt!.Costs[\"Employer Cost\"][\"Safety & Health at Work\"];\n\n        Assert.Multiple(() =>\n        {\n            Assert.That(cost, Is.EqualTo(eSafetyHealthAtWork).Within(ACCURACY));\n        });\n    }\n\n    [Test, Category(\"Health Insurance\")]\n    [TestCase(56.00 * 12, 24000)]\n    [TestCase(93.33 * 12, 40000)]\n    [TestCase(140.00 * 12, 60000)]\n    public void CalculatePriceV2_CalculatesCorrectHealthInsurance(decimal eHealthInsurance, decimal salary)\n    {\n        // Assign\n        var calculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/CalculatePriceV2.json\"),\n            new Dictionary<string, dynamic> { { \"AnnualSalary\", salary } });\n\n        // Act\n        _sut.Process(calculate);\n\n        // Assert\n        var stream = _repo.EventStore.Single().Value;\n        var evt = stream.First() as PriceCalculatedV6;\n        var cost = evt!.Costs[\"Employer Cost\"][\"Health Insurance\"];\n\n        Assert.Multiple(() =>\n        {\n            Assert.That(cost, Is.EqualTo(eHealthInsurance).Within(ACCURACY));\n        });\n    }\n\n    [Test, Category(\"Health Insurance\")]\n    [TestCase(56.00 * 12, 24000)]\n    [TestCase(93.33 * 12, 40000)]\n    [TestCase(140.00 * 12, 60000)]\n    public void RecalculatePriceV2_CalculatesCorrectHealthInsurance(decimal eHealthInsurance, decimal salary)\n    {\n        // Assign\n        var calculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/CalculatePriceV2.json\"),\n            new Dictionary<string, dynamic> { { \"AnnualSalary\", salary } });\n\n        var recalculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/RecalculatePriceV2.json\"),\n            new Dictionary<string, dynamic> { { \"AnnualSalary\", salary } });\n\n        // Act\n        _sut.Process(calculate);\n        _sut.Process(recalculate);\n\n        // Assert\n        var stream = _repo.EventStore.Last().Value;\n        var evt = stream.First() as PriceCalculatedV6;\n        var cost = evt!.Costs[\"Employer Cost\"][\"Health Insurance\"];\n\n        Assert.Multiple(() =>\n        {\n            Assert.That(cost, Is.EqualTo(eHealthInsurance).Within(ACCURACY));\n        });\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/NetherlandsTests.cs\n// service: src\n﻿using Remundo.Pricing.Adapter;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Tests.Fakes;\nusing Remundo.Pricing.Tests.Utils;\nusing NLog;\nusing System.Runtime.Intrinsics.X86;\n\nnamespace Remundo.Pricing.Tests;\n\npublic class NetherlandsTests\n{\n    private InMemoryDomainRepository _inMemoryDomainRepo;\n    private Worker _sut;\n    private IHttpService _httpService;\n    private const string PAYLOAD_DIR = \"./PayloadSamples/Netherlands\";\n\n    [SetUp]\n    public void Setup()\n    {\n        _inMemoryDomainRepo = new InMemoryDomainRepository();\n        _httpService = new FakeHttpService();\n        _sut = new Worker(_inMemoryDomainRepo, LogManager.CreateNullLogger(), _httpService);\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_Then_I_Expect_PriceCalculatedV7_event()\n    {\n        // Assign\n        var expectedPricingIdentity = \"NL\";\n        var expectedMonthlyEmployerCostTotal = 1682.87m;\n        var expectedEmployerCosts = new Dictionary<string, decimal>\n        {\n            {\"Social Security - Tier 1\", 3809.8m },\n            {\"Social Security - Tier 2\", 6072m },\n            {\"Professional Indemnity\", 578.82m },\n            {\"Occupational Health & Safety\", 868.23m },\n            {\"Medical Leave\", 1736.46m },\n            {\"Severance Cost\", 1609.12m },\n            {\"HR Support\", 4440m },\n            {\"Payroll Processing Fee\", 1080m },\n            {\"Special Prices\", 0m },\n        };\n        var cloudRequest = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-NL-1_0.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        var evt = (PriceCalculatedV7)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        var employerCosts = evt.Costs[\"Employer Cost\"].ToDictionary(x => x.Key, x => x.Value.PennyUp());\n\n        // Assert\n        CollectionAssert.AreEquivalent(expectedEmployerCosts, employerCosts);\n        Assert.Multiple(() =>\n        {\n            Assert.That(evt.IsoCode, Is.EqualTo(expectedPricingIdentity));\n            Assert.That((employerCosts.Sum(x => x.Value) / 12).PennyUp(), Is.EqualTo(expectedMonthlyEmployerCostTotal));\n        });\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_When_Contract_Is_FixedTerm_Then_I_Expect_PriceCalculatedV7_event_with_different_Employer_Costs()\n    {\n        var expectedPricingIdentity = \"NL\";\n        var expectedMonthlyEmployerCostTotal = 1899.43m;\n        var expectedEmployerCosts = new Dictionary<string, decimal>\n        {\n            {\"Social Security - Tier 1\", 3809.8m },\n            {\"Social Security - Tier 2\", 8472m },\n            {\"Professional Indemnity\", 602.82m },\n            {\"Occupational Health & Safety\", 904.23m },\n            {\"Medical Leave\", 1808.46m },\n            {\"Severance Cost\", 1675.84m },\n            {\"HR Support\", 4440m },\n            {\"Payroll Processing Fee\", 1080m },\n            {\"Special Prices\", 0m },\n        };\n        var cloudRequest = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-NL-1_0.json\",\n            new() {\n                { \"CorrelationId\", \"123\" },\n                { \"AnnualSalary\", 48000 },\n                { \"ContractTerm\", \"Fixed Term\" },\n            }\n        );\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        var evt = (PriceCalculatedV7)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        var employerCosts = evt.Costs[\"Employer Cost\"].ToDictionary(x => x.Key, x => x.Value.PennyUp());\n\n        // Assert\n        CollectionAssert.AreEquivalent(expectedEmployerCosts, employerCosts);\n        Assert.Multiple(() =>\n        {\n            Assert.That(evt.IsoCode, Is.EqualTo(expectedPricingIdentity));\n            Assert.That((employerCosts.Sum(x => x.Value) / 12).PennyUp(), Is.EqualTo(expectedMonthlyEmployerCostTotal));\n        });\n    }\n\n    [TestCase(4000, 3809.8, 6072, 823.49)]\n    [TestCase(3000, 3600, 4554, 679.5)]\n    [TestCase(6000, 3809.8, 8577.21, 1032.26)]\n    [Test]\n    public void Given_I_receive_CalculatePrice_When_GrossSalary_goes_bellow_or_above_social_security_caps_Then_I_Expect_PriceCalculatedV7_event_with_different_Statutory_Costs(decimal monthlyGrossSalary, decimal ss1, decimal ss2, decimal expectedMonthlyStatutoryEmployerCost)\n    {\n        // Assign\n        var expectedPricingIdentity = \"NL\";\n        var expectedStatutoryEmployerCosts = new Dictionary<string, decimal>\n        {\n            {\"Social Security - Tier 1\", ss1 },\n            {\"Social Security - Tier 2\", ss2 },\n        };\n        var cloudRequest = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-NL-1_0.json\",\n            new() {\n                { \"CorrelationId\", \"123\" },\n                { \"AnnualSalary\", monthlyGrossSalary * 12 },\n                { \"ContractTerm\", \"Open Ended\" },\n            }\n        );\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        var evt = (PriceCalculatedV7)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        var statutoryEmployerCosts = evt.Costs[\"Employer Cost\"].Where(x => x.Key\n            .StartsWith(\"Social Security\"))\n            .ToDictionary(x => x.Key, x => x.Value.PennyUp());\n\n        // Assert\n        CollectionAssert.AreEquivalent(expectedStatutoryEmployerCosts, statutoryEmployerCosts);\n        Assert.Multiple(() =>\n        {\n            Assert.That(evt.IsoCode, Is.EqualTo(expectedPricingIdentity));\n            Assert.That((statutoryEmployerCosts.Sum(x => x.Value) / 12).PennyUp(), Is.EqualTo(expectedMonthlyStatutoryEmployerCost));\n        });\n    }\n\n    [Test]\n    public void Given_I_receive_ReCalculatePrice_command_WithInsurances_Then_I_Expect_PriceCalculatedV7_event()\n    {\n        var expectedPricingIdentity = \"NL\";\n        var expectedMonthlyEmployerCostTotal = 1683.56m;\n        var expectedEmployerCosts = new Dictionary<string, decimal>\n        {\n            {\"Social Security - Tier 1\", 3809.8m },\n            {\"Social Security - Tier 2\", 6072m },\n            {\"Professional Indemnity\", 579.82m },\n            {\"Occupational Health & Safety\", 869.73m },\n            {\"Medical Leave\", 1739.46m },\n            {\"Severance Cost\", 1611.9m },\n            {\"HR Support\", 4440m },\n            {\"Payroll Processing Fee\", 1080m },\n            {\"Special Prices\", 0m },\n        };\n        var cloudRequest = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-NL-1_0.json\");\n        var recalculatePriceRequest = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/recalculateprice-NL-1_0.json\",\n            new()\n            {\n                { \"PriceId\", \"123\"},\n                {\n                    \"SelectedInsuranceDetails\", new Dictionary<string, bool>\n                    {\n                        { \"Basic_MedicalInsurance_WorkerOnly\", true },\n                        { \"Basic_MedicalInsurance_WorkerAndSpouse\", false },\n                        { \"Basic_DentalInsurance_WorkerOnly\", false },\n                        { \"Basic_DentalInsurance_WorkerAndSpouse\", false },\n                        { \"Standard_MedicalInsurance_WorkerOnly\", false }\n                    }\n                },\n            }\n        );\n\n        // Act\n        _sut.Process(cloudRequest);\n        _sut.Process(recalculatePriceRequest);\n\n        var evt = (PriceCalculatedV7)_inMemoryDomainRepo.EventStore.Single().Value[1];\n        var employerCosts = evt.Costs[\"Employer Cost\"].ToDictionary(x => x.Key, x => x.Value);\n        Assert.Multiple(() =>\n        {\n            // Assert\n            Assert.That(evt.IsoCode, Is.EqualTo(expectedPricingIdentity));\n            Assert.That((employerCosts.Sum(x => x.Value) / 12).PennyUp(), Is.EqualTo(expectedMonthlyEmployerCostTotal));\n        });\n        CollectionAssert.AreEquivalent(expectedEmployerCosts, evt.Costs[\"Employer Cost\"].ToDictionary(x => x.Key, x => x.Value));\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PortugalTests.cs\n// service: src\nusing NLog;\nusing Newtonsoft.Json.Linq;\nusing Remundo.Pricing.Adapter;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Tests.Fakes;\nusing Remundo.Pricing.Tests.Utils;\n\nnamespace Remundo.Pricing.Tests;\n\npublic class PortugalTests\n{\n    private const string PAYLOAD_DIR = \"./PayloadSamples/Portugal\";\n    private const decimal ACCURACY = 0.1m; // Accurate to 1.d.p (Prices in Access are rounded to 2.d.p) \n\n    private IHttpService _http;\n    private InMemoryDomainRepository _repo;\n    private ILogger _logger; \n    private Worker _sut;\n\n    [SetUp]\n    public void Setup()\n    {\n        _repo = new InMemoryDomainRepository();\n        _http = new FakeHttpService();\n        _logger = LogManager.CreateNullLogger(); \n\n        _sut = new Worker(_repo, _logger, _http);\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_I_expect_the_correct_total_cost_of_employment()\n    {\n        // Assign\n        const decimal expectedTotalCostOfEmployment = 13648.16m;\n        var calculatePriceV2 = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-pricecalculatedV2.json\");\n\n        // Act\n        _sut.Process(calculatePriceV2);\n\n        // Assert\n        Assert.That((((PriceCalculatedV2)_repo.EventStore.Single().Value[0]).TotalCost / 12).PennyUp(), Is.EqualTo(expectedTotalCostOfEmployment));\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePricePortugal_command_I_expect_the_correct_monthly_employer_cost()\n    {\n        // Assign\n        const decimal expectedMonthlyEmployerCost = 2974m;\n        var calculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-pricecalculatedV2.json\");\n\n        // Act\n        _sut.Process(calculatePriceInEUR);\n\n        // Assert\n        Assert.That(((((PriceCalculatedV2)_repo.EventStore.Single().Value[0]).EmployerCost) / 12).PennyUp(), Is.EqualTo(expectedMonthlyEmployerCost));\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_Then_I_Expect_PriceCalculatedV2_event_with_the_same_data_in_the_CalculatePrice_command()\n    { \n        // Assign\n        const decimal expectedAnnualSalary = 120000m;\n        const bool expectedMedicalInsuranceSelected = true;\n        const bool expectedDentalInsuranceSelected = false;\n        const bool expectedDeathInsuranceSelected = false;\n        var calculatePriceV2 = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-pricecalculatedV2.json\");\n\n        // Act\n        _sut.Process(calculatePriceV2);\n        var @event = _repo.EventStore;\n\n        // Assert\n        Assert.That(((PriceCalculatedV2)@event.Single().Value[0]).GrossSalaryElements[\"Base Salary\"], Is.EqualTo(expectedAnnualSalary));\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[0]).MedicalInsuranceSelected, Is.EqualTo(expectedMedicalInsuranceSelected));\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[0]).DentalInsuranceSelected, Is.EqualTo(expectedDentalInsuranceSelected));\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[0]).DeathInsuranceSelected, Is.EqualTo(expectedDeathInsuranceSelected));\n    }\n\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_Then_I_Expect_the_price_to_be_correct()\n    {\n        // Assign\n        const decimal expectedBaseSalary = 120000m;\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-pricecalculatedV2.json\");\n\n        // Act\n        _sut.Process(calculatePrice);\n\n        // Assert\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[0]).GrossSalaryElements[\"Base Salary\"], Is.EqualTo(expectedBaseSalary));\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_Then_I_Expect_the_allowances_to_be_correct()\n    {\n        // Assign\n        decimal expectedAllowanceCost = 535.79m;\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-CurrencyV2.json\");\n\n        // Act\n        _sut.Process(calculatePrice);\n\n        // Assert\n        Assert.That((((PriceCalculatedV2)_repo.EventStore.Single().Value[0]).Allowances[\"Car/Transportation\"]).PennyUp()\n            , Is.EqualTo(expectedAllowanceCost));\n\n    }\n\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_Then_I_Expect_the_insurance_elements_to_be_correct()\n    {\n        // Assign\n        decimal expectedMedicalInsuranceNewCost = 2089.9m;\n        decimal expectedDentalInsuranceNewCost = 409.97m;\n        decimal expectedDeathInsuranceNewCost = 461.73469387755102040816326529m;\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-pricecalculatedV2.json\");\n        var recalculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-RecalculatePrice-InsurancesV2.json\");\n\n        //Act\n        _sut.Process(calculatePrice);\n        _sut.Process(recalculatePriceInEUR);\n\n        // Assert\n        Assert.That((((PriceCalculatedV2)_repo.EventStore.Single().Value[0]).MedicalInsuranceCost), Is.EqualTo(expectedMedicalInsuranceNewCost));\n        Assert.That((((PriceCalculatedV2)_repo.EventStore.Single().Value[0]).DentalInsuranceCost), Is.EqualTo(expectedDentalInsuranceNewCost));\n        Assert.That((((PriceCalculatedV2)_repo.EventStore.Single().Value[0]).DeathInsuranceCost), Is.EqualTo(expectedDeathInsuranceNewCost));\n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_I_should_be_able_to_get_the_correct_salary()\n    {\n        // Assign\n        decimal expectedBaseAnnualSalary = 120000;\n        var recalculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-RecalculatePrice-InsurancesV2.json\");\n        var calculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-pricecalculatedV2.json\");\n\n        //Act\n        _sut.Process(calculatePriceInEUR);\n        _sut.Process(recalculatePriceInEUR);\n\n        // Assert\n        Assert.That((((PriceCalculatedV2)_repo.EventStore.Single().Value[0]).GrossSalary),\n            Is.EqualTo(expectedBaseAnnualSalary));\n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_I_should_be_able_to_get_the_original_salary_after_conversion()\n    {\n        // Assign\n        const decimal expectedInitialSalary = 120000m;\n        const decimal expectedFinalSalary = 119952m;\n        var calculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-pricecalculatedV2.json\");\n        var recalculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/recalculateprice-PT-USD-10000.json\");\n\n\n\n        // Act\n        _sut.Process(calculatePriceInEUR);\n        _sut.Process(recalculatePrice);\n\n        // Assert\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[0]).GrossSalaryElements[\"Base Salary\"].PennyUp(), Is.EqualTo(expectedInitialSalary));\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[1]).GrossSalaryElements[\"Base Salary\"].PennyUp(), Is.EqualTo(expectedFinalSalary));\n    }\n\n    [TestCase(12345, 9970.3766875, 9980)]\n    [TestCase(120000, 73822.8, 73830)]\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_with_a_Deposit_factor_I_expect_the_deposit_to_be_calculated_correctly(decimal annualSalary, decimal expectedDeposit, decimal expectedRounded)\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-deposit-factor.json\");\n\n        // Replace the annual salary from the payload sample\n        var data = JObject.Parse(cloudRequest.Data);\n        data[\"AnnualSalary\"] = annualSalary;\n        cloudRequest.Data = data.ToString();\n\n        // Act\n        _sut.Process(cloudRequest);\n        // Assert\n        var @event = (PriceCalculatedV6)_repo.EventStore.Single().Value[0];\n        Assert.That(@event.Deposit, Is.EqualTo(expectedDeposit));\n        Assert.That(@event.DepositRounded, Is.EqualTo(expectedRounded));\n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_oneoff_bonus_removed_then_oneoff_will_be_set_to_zero()\n    {\n        // Assign\n        const decimal expectedBonusIncludingCosts = 0m;\n        const decimal expectedBonusAmount = 0m;\n        const decimal expectedBonusTotal = 0m;\n        var calculatePriceInGbp = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-pricecalculatedV2.json\");\n\n        var recalculatePriceWithOneOffData = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-removesigningbonus.json\");\n\n        //Act\n        _sut.Process(calculatePriceInGbp);\n        _sut.Process(recalculatePriceWithOneOffData);\n\n        // Assert\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[1]).SigningBonusCosts, Is.EqualTo(expectedBonusIncludingCosts));\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[1]).SigningBonusAmount, Is.EqualTo(expectedBonusAmount));\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[1]).AdditionalPaymentsTotal, Is.EqualTo(expectedBonusTotal));\n    }\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_oneoff_bonus_and_vesting_then_bonus_will_be_set()\n    {\n        // Assign\n        const decimal expectedBonusIncludingCosts = 12.48m;\n        const decimal expectedBonusAmount = 12m;\n        const decimal expectedVestingAmount = 1000m;\n        const decimal expectedVestingIncludingCosts = 1039.99999999999999999999999m;\n        const decimal expectedBonusTotal = 1052.47999999999999999999999m;\n        var calculatePriceInGbp = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-pricecalculatedV2.json\");\n        var recalculatePriceWithOneOffData = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-signingbonus-1_0.json\");"}
{"text": "// file: src/Remundo.Pricing.Tests/PortugalTests.cs\n// service: src\n// Act\n        _sut.Process(cloudRequest);\n        // Assert\n        var @event = (PriceCalculatedV6)_repo.EventStore.Single().Value[0];\n        Assert.That(@event.Deposit, Is.EqualTo(expectedDeposit));\n        Assert.That(@event.DepositRounded, Is.EqualTo(expectedRounded));\n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_oneoff_bonus_removed_then_oneoff_will_be_set_to_zero()\n    {\n        // Assign\n        const decimal expectedBonusIncludingCosts = 0m;\n        const decimal expectedBonusAmount = 0m;\n        const decimal expectedBonusTotal = 0m;\n        var calculatePriceInGbp = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-pricecalculatedV2.json\");\n\n        var recalculatePriceWithOneOffData = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-removesigningbonus.json\");\n\n        //Act\n        _sut.Process(calculatePriceInGbp);\n        _sut.Process(recalculatePriceWithOneOffData);\n\n        // Assert\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[1]).SigningBonusCosts, Is.EqualTo(expectedBonusIncludingCosts));\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[1]).SigningBonusAmount, Is.EqualTo(expectedBonusAmount));\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[1]).AdditionalPaymentsTotal, Is.EqualTo(expectedBonusTotal));\n    }\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_oneoff_bonus_and_vesting_then_bonus_will_be_set()\n    {\n        // Assign\n        const decimal expectedBonusIncludingCosts = 12.48m;\n        const decimal expectedBonusAmount = 12m;\n        const decimal expectedVestingAmount = 1000m;\n        const decimal expectedVestingIncludingCosts = 1039.99999999999999999999999m;\n        const decimal expectedBonusTotal = 1052.47999999999999999999999m;\n        var calculatePriceInGbp = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-pricecalculatedV2.json\");\n        var recalculatePriceWithOneOffData = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-signingbonus-1_0.json\");\n        var recalculatePriceWithVestingBonus = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-vesting-1_0.json\");\n        var recalculatePriceWithInsurances = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-RecalculatePrice-InsurancesV2.json\");\n\n\n        //Act\n        _sut.Process(calculatePriceInGbp);\n        _sut.Process(recalculatePriceWithOneOffData);\n        _sut.Process(recalculatePriceWithVestingBonus);\n        _sut.Process(recalculatePriceWithOneOffData);\n        _sut.Process(recalculatePriceWithInsurances);\n\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[4]).VestingBonusAmount, Is.EqualTo(expectedVestingAmount));\n\n        // Assert\n        //Assert.That(((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[4]).SigningBonusCosts, Is.EqualTo(expectedBonusIncludingCosts));\n        //Assert.That(((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[4]).SigningBonusAmount, Is.EqualTo(expectedBonusAmount));\n        //Assert.That(((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[4]).VestingBonusAmount, Is.EqualTo(expectedVestingAmount));\n        //Assert.That(((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[4]).VestingBonusCosts, Is.EqualTo(expectedVestingIncludingCosts));\n        //Assert.That(((PriceCalculatedV2)_inMemoryDomainRepo.EventStore.Single().Value[4]).AdditionalPaymentsTotal, Is.EqualTo(expectedBonusTotal));\n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_remove_vesting_bonus_then_vesting_will_be_set_to_zero()\n    {\n        // Assign\n        const decimal expectedVestingAmount = 0m;\n        const decimal expectedCliffMonths = 0m;\n        const decimal expectedTotalMonths = 0m;\n        var calculatePriceInGbp = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-pricecalculatedV2.json\");\n        var recalculatePriceWithVestingBonus = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-removevesting-1_0.json\");\n\n        // Act\n        _sut.Process(calculatePriceInGbp);\n        _sut.Process(recalculatePriceWithVestingBonus);\n\n        // Assert\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[1]).VestingBonusAmount, Is.EqualTo(expectedVestingAmount));\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[1]).VestingBonusCliffMonths, Is.EqualTo(expectedCliffMonths));\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[1]).VestingBonusTotalMonths, Is.EqualTo(expectedTotalMonths));\n    }\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_vesting_bonus_then_vesting_will_be_set()\n    {\n        var expectedVestingAmount = 1000m;\n        var expectedCliffMonths = 12m;\n        var expectedTotalMonths = 15m;\n        var calculateCloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-pricecalculatedV2.json\");\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-vesting-1_0.json\");\n\n        //Act\n        _sut.Process(calculateCloudRequest);\n        _sut.Process(cloudRequest);\n\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[1]).VestingBonusAmount, Is.EqualTo(expectedVestingAmount));\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[1]).VestingBonusCliffMonths, Is.EqualTo(expectedCliffMonths));\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[1]).VestingBonusTotalMonths, Is.EqualTo(expectedTotalMonths));\n    }\n\n    [Test]\n    public void Given_I_Select_An_Insurance_When_I_RecalculatePrice_I_expect_the_correct_monthly_total_Cost()\n    {\n        // Assign\n        const decimal expectedMonthlyTotalCostWithInsurance = 13648.16m;\n\n        var calculatePriceV2 = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-pricecalculatedV2.json\");\n        var recalculatePriceV2 = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-RecalculatePrice-InsurancesV2.json\");\n        // Act\n        _sut.Process(calculatePriceV2);\n        _sut.Process(recalculatePriceV2);\n\n        // Assert\n        Assert.That((((PriceCalculatedV2)_repo.EventStore.Single().Value[0]).TotalCost/12).PennyUp(),\n           Is.EqualTo(expectedMonthlyTotalCostWithInsurance));\n    }\n\n    [TestCase(188000, 581.64)] //551 EUR is 570 USD (rate is 1.033)\n    [TestCase(200000, 581.64)] \n    [TestCase(250000, 581.64)] \n    [TestCase(500000, 581.64)]\n    [Test]\n    public void Given_I_recieve_a_CalculatePrice_request_I_expect_to_calculate_the_correct_total(decimal annualSalary, decimal expectedLifeInsurance)\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-pricecalculatedV2.json\");\n\n        // Replace the annual salary from the payload sample\n        var data = JObject.Parse(cloudRequest.Data);\n        data[\"AnnualSalary\"] = annualSalary;\n        cloudRequest.Data = data.ToString();\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        // Assert\n        var @event = (PriceCalculatedV2)_repo.EventStore.Single().Value[0];\n        Assert.That(@event.DeathInsuranceCost.PennyUp(), Is.EqualTo(expectedLifeInsurance));\n    }\n\n    [TestCase(50000, 12159.99)]\n    [TestCase(120000, 27296.32)]\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_I_expect_the_deposit_to_be_calculated_correctly(decimal annualSalary, decimal expectedDeposit)\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-pricecalculatedV2.json\");\n\n        // Replace the annual salary from the payload sample\n        var data = JObject.Parse(cloudRequest.Data);\n        data[\"AnnualSalary\"] = annualSalary;\n        cloudRequest.Data = data.ToString();\n\n        // Act\n        _sut.Process(cloudRequest);\n        // Assert\n        var @event = (PriceCalculatedV2)_repo.EventStore.Single().Value[0];\n        Assert.That(@event.Deposit.PennyUp(), Is.EqualTo(expectedDeposit));\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePricePortugal_command_I_expect_the_correct_platformFeeInEuros()\n    {\n        // Assign\n        const decimal expectedPlatformFeeInEuros = 6000; \n        var calculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-pricecalculatedV2.json\");\n\n        // Act\n        _sut.Process(calculatePriceInEUR);\n\n        // Assert\n        Assert.That((((PriceCalculatedV2)_repo.EventStore.Single().Value[0]).PlatformFeeInEuros), Is.EqualTo(expectedPlatformFeeInEuros));\n    }\n\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_with_domain_and_allowances_I_expect_the_employer_cost_to_be_calculated_correctly()\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-with-domain-and-allowances.json\");\n        //var exchangeRate = _fakExchangeRateReader.GetExchangeRate(\"USD\", \"EUR\").Result;\n        // Act\n        _sut.Process(cloudRequest);\n        // Assert\n        var @event = (PriceCalculatedV6)_repo.EventStore.Single().Value[0];\n        Assert.Multiple(() =>\n        {\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Professional Indemnity\"], Is.EqualTo(1590.49m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Occupational Health & Safety\"], Is.EqualTo(2385.73m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Medical Leave\"], Is.EqualTo(4771.45m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Severance Cost\"], Is.EqualTo(12234.48m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"HR Support\"], Is.EqualTo(144m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Payroll Processing Fee\"], Is.EqualTo(144m));\n\n            Assert.That(@event.EmployerCost, Is.EqualTo(53886.373199999996329656m));\n            Assert.That(@event.TotalCost, Is.EqualTo(186318.373199999996329656m));\n        });\n        \n    }\n\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_with_domain_and_allowances_followed_by_signing_bonus_I_expect_the_employer_cost_to_be_calculated_correctly()\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-with-domain-and-allowances.json\");\n        var recalculatePricecloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-signingbonus-2_0.json\");\n        // Act\n        _sut.Process(cloudRequest);\n        _sut.Process(recalculatePricecloudRequest);\n        // Assert\n        var @event = (PriceCalculatedV6)_repo.EventStore.Single().Value[1];\n        var employerCosts = @event.Costs[\"Employer Cost\"];\n        Assert.Multiple(() =>\n        {\n            Assert.That(employerCosts[\"Professional Indemnity\"], Is.EqualTo(1590.49m));\n            Assert.That(employerCosts[\"Occupational Health & Safety\"], Is.EqualTo(2385.73m));\n            Assert.That(employerCosts[\"Medical Leave\"], Is.EqualTo(4771.45m));\n            Assert.That(employerCosts[\"Severance Cost\"], Is.EqualTo(12234.48m));\n            Assert.That(employerCosts[\"HR Support\"], Is.EqualTo(144m));\n            Assert.That(employerCosts[\"Payroll Processing Fee\"], Is.EqualTo(144m));\n\n            Assert.That(@event.Costs[\"Additional Payments\"][\"Signing Bonus\"], Is.EqualTo(17.09m));"}
{"text": "// file: src/Remundo.Pricing.Tests/PortugalTests.cs\n// service: src\n// Assert\n        var @event = (PriceCalculatedV6)_repo.EventStore.Single().Value[0];\n        Assert.Multiple(() =>\n        {\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Professional Indemnity\"], Is.EqualTo(1590.49m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Occupational Health & Safety\"], Is.EqualTo(2385.73m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Medical Leave\"], Is.EqualTo(4771.45m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Severance Cost\"], Is.EqualTo(12234.48m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"HR Support\"], Is.EqualTo(144m));\n            Assert.That(@event.Costs[\"Employer Cost\"][\"Payroll Processing Fee\"], Is.EqualTo(144m));\n\n            Assert.That(@event.EmployerCost, Is.EqualTo(53886.373199999996329656m));\n            Assert.That(@event.TotalCost, Is.EqualTo(186318.373199999996329656m));\n        });\n        \n    }\n\n    [Test]\n    public void Given_I_receive_a_CalculatePrice_request_with_domain_and_allowances_followed_by_signing_bonus_I_expect_the_employer_cost_to_be_calculated_correctly()\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-with-domain-and-allowances.json\");\n        var recalculatePricecloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-signingbonus-2_0.json\");\n        // Act\n        _sut.Process(cloudRequest);\n        _sut.Process(recalculatePricecloudRequest);\n        // Assert\n        var @event = (PriceCalculatedV6)_repo.EventStore.Single().Value[1];\n        var employerCosts = @event.Costs[\"Employer Cost\"];\n        Assert.Multiple(() =>\n        {\n            Assert.That(employerCosts[\"Professional Indemnity\"], Is.EqualTo(1590.49m));\n            Assert.That(employerCosts[\"Occupational Health & Safety\"], Is.EqualTo(2385.73m));\n            Assert.That(employerCosts[\"Medical Leave\"], Is.EqualTo(4771.45m));\n            Assert.That(employerCosts[\"Severance Cost\"], Is.EqualTo(12234.48m));\n            Assert.That(employerCosts[\"HR Support\"], Is.EqualTo(144m));\n            Assert.That(employerCosts[\"Payroll Processing Fee\"], Is.EqualTo(144m));\n\n            Assert.That(@event.Costs[\"Additional Payments\"][\"Signing Bonus\"], Is.EqualTo(17.09m));\n\n            Assert.That(@event.EmployerCost, Is.EqualTo(53886.373199999996329656m));\n            Assert.That(@event.TotalCost, Is.EqualTo(186318.373199999996329656m));\n        });\n    }\n\n    [Test]\n    public void Given_platform_Fee_is_a_percentage_when_I_receive_a_CalculatePrice_request_I_expect_the_correct_total_cost()\n    {\n        // Assign\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-1_0-platformFee-percentage.json\");\n\n        var data = JObject.Parse(calculatePrice.Data);\n        data[\"IsoCode\"] = \"PT\";\n        calculatePrice.Data = data.ToString();\n\n        decimal expectedTotalCost = 83231.5375m;\n        decimal expectedPlatformFee = 10856.2875m;\n\n        // Act\n        _sut.Process(calculatePrice);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)_repo.EventStore.Single().Value[0]).PlatformFeeInLocalCurrency, Is.EqualTo(expectedPlatformFee));\n            Assert.That(((PriceCalculatedV6)_repo.EventStore.Single().Value[0]).TotalCost, Is.EqualTo(expectedTotalCost));\n        });\n    }\n\n    [Test, Category(\"Total Cost\"), Category(\"Platform Fee\")]\n    public void CalculatePrice_WhenPlatformFeeIsFixed_CalculatesCorrectTotalCostAndPlatformFee()\n    {\n        // Assign\n        const decimal ePlatformFee = 6000m;\n        const decimal eTotalCost = 3717.5m;\n\n        var calculate = Helpers.EditCloudRequest(\n           Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-PT-1_0-platformFee-fixed-fee.json\"),\n           new Dictionary<string, dynamic> { { \"IsoCode\", \"PT\" } });\n\n        // Act\n        _sut.Process(calculate);\n\n        // Assert\n        var stream = _repo.EventStore.Last().Value;\n        var evt = (PriceCalculatedV6)stream.First();\n\n        Assert.Multiple(() =>\n        {\n            Assert.That(evt.PlatformFeeInLocalCurrency, Is.EqualTo(ePlatformFee).Within(ACCURACY));\n            Assert.That(evt.TotalCost, Is.EqualTo(eTotalCost+ePlatformFee).Within(ACCURACY));\n        });\n    }\n\n    [Test]\n    [TestCase(83231.54, true)]\n    [TestCase(9717.5, false)]\n    public void Given_hrsupport_is_or_isnt_a_percentage_when_I_receive_a_calculatePrice_request_I_expect_the_correct_total_cost(decimal expectedTotalCost, bool isPercentage)\n    {\n        // Assign\n        var calculatePrice = Helpers.BuildCloudRequest($\"./PayloadSamples/Portugal/pricing-PT-1_0-platformFee-{(isPercentage ? \"percentage\" : \"fixed-fee\")}.json\");\n\n        // Act\n        _sut.Process(calculatePrice);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)_repo.EventStore.Single().Value[0]).TotalCost.PennyUp(), Is.EqualTo(expectedTotalCost));\n        });\n    }\n\n    [Test]\n    [TestCase(83231.54, true)]\n    [TestCase(9717.5, false)]\n    public void Given_payrollprocessingfee_is_or_isnt_a_percentage_when_I_receive_a_calculatePrice_request_I_expect_the_correct_total_cost(decimal expectedTotalCost, bool isPercentage)\n    {\n        // Assign\n        var calculatePrice = Helpers.BuildCloudRequest($\"./PayloadSamples/Portugal/pricing-PT-1_0-platformFee-{(isPercentage ? \"percentage\" : \"fixed-fee\")}.json\");\n\n        // Act\n        _sut.Process(calculatePrice);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(((PriceCalculatedV6)_repo.EventStore.Single().Value[0]).TotalCost.PennyUp(), Is.EqualTo(expectedTotalCost));\n        });\n    }\n\n    [Test]\n    [TestCase(\"Amdocs\", 41.28)]\n    [TestCase(\"XML-INT\", null)]\n    public void Given_I_receive_a_calculate_price_command_I_expect_to_get_the_correct_MSPFee_value_for_a_specific_tenant(string tenantId, decimal? expectedMSPFee)\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-tenantCosts.json\");\n\n\n        var data = JObject.Parse(cloudRequest.Data);\n        data[\"TenantId\"] = tenantId;\n        cloudRequest.Data = data.ToString();\n\n        // Act\n        sut.Process(cloudRequest);\n\n        var @event = (PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[0];\n        var mspFee = @event.Costs.ContainsKey(\"Tenant Costs\") ? @event.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n\n        // Assert\n        Assert.That(mspFee, Is.EqualTo(expectedMSPFee));\n    }\n    \n\n    [Test]\n    [TestCase(\"Amdocs\", 41.28, 40.47)]\n    [TestCase(\"XML-INT\", null, null)]\n    [TestCase(\"Acme\", null, null)]\n    public void Given_I_receive_a_RecalculatePrice_command_I_expect_the_MSPFee_value_to_be_recalculated_for_a_specific_tenant(string tenantId, decimal? expectedMSPFee, decimal? expectedRecalculatedMSPFee)\n    {\n        // Assign\n        var inMemoryDomainRepo = new InMemoryDomainRepository();\n        var sut = new Worker(inMemoryDomainRepo, LogManager.CreateNullLogger(), _http);\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/pricing-PT-tenantCosts.json\");\n        var recalculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Portugal/recalculateprice-PT-tenantCosts.json\");\n\n        var calculatePriceData = JObject.Parse(calculatePrice.Data);\n        calculatePriceData[\"TenantId\"] = tenantId;\n        calculatePrice.Data = calculatePriceData.ToString();\n\n        var recalculatePriceData = JObject.Parse(recalculatePrice.Data);\n        recalculatePriceData[\"TenantId\"] = tenantId;\n        recalculatePrice.Data = recalculatePriceData.ToString();\n\n        // Act\n        sut.Process(calculatePrice);\n        sut.Process(recalculatePrice);\n\n        var firstEvent = (PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[0];\n        var secondEvent = (PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[1];\n        var firstMspFee = firstEvent.Costs.ContainsKey(\"Tenant Costs\") ? firstEvent.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n        var recalculatedMspFee = secondEvent.Costs.ContainsKey(\"Tenant Costs\") ? secondEvent.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(firstMspFee, Is.EqualTo(expectedMSPFee));\n            Assert.That(recalculatedMspFee, Is.EqualTo(expectedRecalculatedMSPFee));\n        });\n    }\n\n    [Test, Category(\"Medical Check Up\")]\n    public void CalculatePriceV2_CalculatesCorrectMedicalCheckup()\n    {\n        // Assign\n        const decimal eMedicalCheckUp = 5m * 12m; \n\n        var calculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/CalculatePriceV2.json\"),\n            new Dictionary<string, dynamic> { { \"AnnualSalary\", 24000 } });\n\n        // Act\n        _sut.Process(calculate);\n\n        // Assert\n        var stream = _repo.EventStore.Single().Value;\n        var evt = stream.First() as PriceCalculatedV6;\n        var cost = evt!.Costs[\"Employer Cost\"][\"Medical Check-up\"];\n\n        Assert.Multiple(() =>\n        {\n            Assert.That(cost, Is.EqualTo(eMedicalCheckUp).Within(ACCURACY));\n        });\n    }\n\n    [Test, Category(\"Medical Check Up\")]\n    public void RecalculatePriceV2_CalculatesCorrectMedicalCheckup()\n    {"}
{"text": "// file: src/Remundo.Pricing.Tests/PortugalTests.cs\n// service: src\nvar firstEvent = (PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[0];\n        var secondEvent = (PriceCalculatedV6)inMemoryDomainRepo.EventStore.Single().Value[1];\n        var firstMspFee = firstEvent.Costs.ContainsKey(\"Tenant Costs\") ? firstEvent.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n        var recalculatedMspFee = secondEvent.Costs.ContainsKey(\"Tenant Costs\") ? secondEvent.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(firstMspFee, Is.EqualTo(expectedMSPFee));\n            Assert.That(recalculatedMspFee, Is.EqualTo(expectedRecalculatedMSPFee));\n        });\n    }\n\n    [Test, Category(\"Medical Check Up\")]\n    public void CalculatePriceV2_CalculatesCorrectMedicalCheckup()\n    {\n        // Assign\n        const decimal eMedicalCheckUp = 5m * 12m; \n\n        var calculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/CalculatePriceV2.json\"),\n            new Dictionary<string, dynamic> { { \"AnnualSalary\", 24000 } });\n\n        // Act\n        _sut.Process(calculate);\n\n        // Assert\n        var stream = _repo.EventStore.Single().Value;\n        var evt = stream.First() as PriceCalculatedV6;\n        var cost = evt!.Costs[\"Employer Cost\"][\"Medical Check-up\"];\n\n        Assert.Multiple(() =>\n        {\n            Assert.That(cost, Is.EqualTo(eMedicalCheckUp).Within(ACCURACY));\n        });\n    }\n\n    [Test, Category(\"Medical Check Up\")]\n    public void RecalculatePriceV2_CalculatesCorrectMedicalCheckup()\n    {\n        // Assign\n        const decimal eMedicalCheckUp = 60m;\n\n        var calculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/CalculatePriceV2.json\"),\n            new Dictionary<string, dynamic> { { \"AnnualSalary\", 24000 } });\n\n        var recalculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/CalculatePriceV2.json\"),\n            new Dictionary<string, dynamic> { { \"AnnualSalary\", 24000 } });\n\n        // Act\n        _sut.Process(calculate);\n        _sut.Process(recalculate);\n\n        // Assert\n        var stream = _repo.EventStore.Last().Value;\n        var evt = stream.First() as PriceCalculatedV6;\n        var cost = evt!.Costs[\"Employer Cost\"][\"Medical Check-up\"];\n\n        Assert.Multiple(() =>\n        {\n            Assert.That(cost, Is.EqualTo(eMedicalCheckUp).Within(ACCURACY));\n        });\n    }\n\n    [Test]\n    [TestCase(60000)]\n    [TestCase(120000)]\n    [TestCase(240000)]\n    public void CalculatePrice_CorrectEmployerCosts(decimal annualSalary)\n    {\n        var eEmployerCosts = new Dictionary<string, decimal>\n        {\n            { \"Professional Training\", annualSalary * 0.02m },\n            { \"Employer Social Security\", annualSalary * 0.2375m },\n            { \"Medical Check-up\", 60m }\n        };\n        var calculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/CalculatePriceV2.json\"),\n            new Dictionary<string, dynamic> { { \"AnnualSalary\", annualSalary } });\n        \n        _sut.Process(calculate);\n\n        var stream = _repo.EventStore.Last().Value;\n        var evt = stream.First() as PriceCalculatedV6;\n        var cost = evt!.Costs[\"Employer Cost\"];\n\n        Assert.Multiple(() =>\n        {\n            Assert.That(eEmployerCosts[\"Professional Training\"], Is.EqualTo(cost[\"Professional Training\"]), \"Professional Training Incorrect\");\n            Assert.That(eEmployerCosts[\"Employer Social Security\"], Is.EqualTo(cost[\"Employer Social Security\"]), \"Employer Social Security Incorrect\");\n            Assert.That(eEmployerCosts[\"Medical Check-up\"], Is.EqualTo(cost[\"Medical Check-up\"]), \"Medical Check-up Incorrect\");\n        });\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/SlovakiaTests.cs\n// service: src\n﻿using NLog;\nusing Remundo.Pricing.Adapter;\nusing Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Tests.Fakes;\nusing Remundo.Pricing.Tests.Utils;\n\nnamespace Remundo.Pricing.Tests;\n\npublic class SlovakiaTests\n{\n    private InMemoryDomainRepository _inMemoryDomainRepo;\n    private Worker _sut;\n    private IHttpService _httpService;\n\n    [SetUp]\n    public void Setup()\n    {\n        _inMemoryDomainRepo = new InMemoryDomainRepository();\n        _httpService = new FakeHttpService();\n        _sut = new Worker(_inMemoryDomainRepo, LogManager.CreateNullLogger(), _httpService);\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_Then_I_Expect_PriceCalculatedV6_event()\n    {\n        // Assign\n        var expectedPricingIdentity = \"SK\";\n        var expectedMonthlyCost = 7307.7m;\n        var expectedEmployerCosts = new Dictionary<string, decimal>\n        {\n            //Statutory Costs\n            { \"Unemployment Insurance\", 41.79m },\n            { \"Sickness Insurance\", 58.50m },\n            { \"Reserve Fund\", 198.49m },\n            { \"Pension Contribution\", 585.01m },\n            { \"Health Insurance\", 417.87m },\n            { \"Guarantee\", 10.45m },\n            { \"Disability Insurance\", 125.36m },\n            { \"Accident Insurance\", 33.43m },\n\n            //XML Costs\n            { \"Payroll Processing Fee\", 169.49m},\n            { \"Severance Cost\", 677.95m},\n            { \"Medical Leave\", 169.49m},\n            { \"Occupational Health & Safety\", 84.74m},\n            { \"Professional Indemnity\", 56.50m},\n        };\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Slovakia/pricing-SK-1_0.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        var evt = (PriceCalculatedV7)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        var employerCosts = evt.Costs[\"Employer Cost\"].Where(x => x.Value != 0m).ToDictionary(x => x.Key, x => x.Value / 12);\n        \n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(evt.IsoCode, Is.EqualTo(expectedPricingIdentity), \"Expected ISO incorrect\");\n            Assert.That((evt.TotalCost/ 12).PennyUp(),\n                    Is.InRange(expectedMonthlyCost, expectedMonthlyCost + 0.1m), \"Total Cost incorrect\");\n            foreach (var cost in employerCosts)\n            {\n                var expected = expectedEmployerCosts[cost.Key];\n                Assert.That(cost.Value.PennyUp(), \n                    Is.InRange(expected, expected + 0.01m), $\"{cost.Key} incorrect value\");\n            }\n        });\n    }\n\n    [Test]\n    public void Given_I_receive_ReCalculatePrice_command_Then_I_Expect_PriceCalculatedV6_event()\n    {\n        // Assign\n        var expectedPricingIdentity = \"SK\";\n        var expectedMonthlyCost = 2329.5m;\n        var expectedEmployerCosts = new Dictionary<string, decimal>\n        {\n            //Statutory Costs\n            { \"Unemployment Insurance\", 11.23m },\n            { \"Sickness Insurance\", 15.72m },\n            { \"Reserve Fund\", 53.34m },\n            { \"Pension Contribution\", 157.22m },\n            { \"Health Insurance\", 112.30m },\n            { \"Guarantee\", 2.81m },\n            { \"Disability Insurance\", 33.69m },\n            { \"Accident Insurance\", 8.98m },\n\n            //XML Costs\n            { \"Payroll Processing Fee\", 45.55m},\n            { \"Severance Cost\", 182.19m},\n            { \"Medical Leave\", 45.55m},\n            { \"Occupational Health & Safety\", 22.77m},\n            { \"Professional Indemnity\", 15.18m},\n        };\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Slovakia/pricing-SK-1_0.json\");\n        var recloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Slovakia/recalculateprice-SK-1_0.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n        _sut.Process(recloudRequest);\n\n        var evt = (PriceCalculatedV6)_inMemoryDomainRepo.EventStore.Single().Value[1];\n        var employerCosts = evt.Costs[\"Employer Cost\"].Where(x => x.Value != 0m).ToDictionary(x => x.Key, x => x.Value / 12);\n\n        // Assert\n        Assert.Multiple(() =>\n        {\n            Assert.That(evt.IsoCode, Is.EqualTo(expectedPricingIdentity), \"Expected ISO incorrect\");\n            Assert.That((evt.TotalCost / 12).PennyUp(),\n                    Is.InRange(expectedMonthlyCost, expectedMonthlyCost + 0.1m), \"Total Cost incorrect\");\n            foreach (var cost in employerCosts)\n            {\n                var expected = expectedEmployerCosts[cost.Key];\n                Assert.That(cost.Value.PennyUp(),\n                    Is.InRange(expected, expected + 0.01m), $\"{cost.Key} incorrect value\");\n            }\n        });\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/SpainTests.cs\n// service: src\nusing Newtonsoft.Json.Linq;\nusing NLog;\nusing Remundo.Pricing.Adapter;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Tests.Fakes;\nusing Remundo.Pricing.Tests.Utils;\nusing System.Diagnostics;\n\nnamespace Remundo.Pricing.Tests;\n\npublic class SpainTests\n{\n    private const string PAYLOAD_DIR = \"./PayloadSamples/Spain\";\n    private const decimal ACCURACY = 0.1m; // Accurate to 1.d.p (Prices in Access are rounded to 2.d.p) \n\n    private IHttpService _http;\n    private InMemoryDomainRepository _repo;\n    private Worker _sut;\n\n    [SetUp]\n    public void Setup()\n    {\n        _repo = new InMemoryDomainRepository();\n        _http = new FakeHttpService();\n\n        _sut = new Worker(_repo, LogManager.CreateNullLogger(), _http);\n    }\n\n    [Test, Category(\"Total Cost\")]\n    public void CalculatePriceV2_CalculatesCorrectTotalCostOfEmployment()\n    {\n        // Assign\n        const decimal eTotalCostOfEmployment = 12624.02m;\n        var calculatePriceV2 = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-ES-1_0-pricecalculatedV2.json\");\n\n        // Act\n        _sut.Process(calculatePriceV2);\n\n        // Assert\n        Assert.That((((PriceCalculatedV2)_repo.EventStore.Single().Value[0]).TotalCost / 12), Is.EqualTo(eTotalCostOfEmployment).Within(ACCURACY));\n    }\n\n    [Test, Category(\"Monthly Employer Cost\")]\n    public void CalculatePrice_CalculatesCorrectMonthlyEmployerCost()\n    {\n        // Assign\n        const decimal eMonthlyEmployerCost = 1949.86m;\n\n        var calculate = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-ES-1_0-pricecalculatedV2.json\");\n\n        // Act\n        _sut.Process(calculate);\n\n        // Assert\n        var stream = _repo.EventStore.Single().Value;\n        var evt = stream.First() as PriceCalculatedV2;\n\n        Assert.That(evt!.EmployerCost / 12, Is.EqualTo(eMonthlyEmployerCost).Within(ACCURACY));\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_Then_I_Expect_PriceCalculatedV2_event_with_the_same_data_in_the_CalculatePrice_command()\n    { \n        // Assign\n        const decimal expectedAnnualSalary = 120000m;\n        const bool expectedMedicalInsuranceSelected = true;\n        const bool expectedDentalInsuranceSelected = false;\n        const bool expectedDeathInsuranceSelected = false;\n        var calculatePriceV2 = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-1_0-pricecalculatedV2.json\");\n\n        // Act\n        _sut.Process(calculatePriceV2);\n        var @event = _repo.EventStore;\n\n        // Assert\n        Assert.That(((PriceCalculatedV2)@event.Single().Value[0]).GrossSalaryElements[\"Base Salary\"], Is.EqualTo(expectedAnnualSalary));\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[0]).MedicalInsuranceSelected, Is.EqualTo(expectedMedicalInsuranceSelected));\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[0]).DentalInsuranceSelected, Is.EqualTo(expectedDentalInsuranceSelected));\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[0]).DeathInsuranceSelected, Is.EqualTo(expectedDeathInsuranceSelected));\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_Then_I_Expect_the_price_to_be_correct()\n    {\n        // Assign\n        const decimal expectedBaseSalary = 120000m;\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-1_0-pricecalculatedV2.json\");\n\n        // Act\n        _sut.Process(calculatePrice);\n\n        // Assert\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[0]).GrossSalaryElements[\"Base Salary\"], Is.EqualTo(expectedBaseSalary));\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_Then_I_Expect_the_allowances_to_be_correct()\n    {\n        // Assign\n        decimal expectedAllowanceCost = 535.79m;\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-1_0-CurrencyV2.json\");\n\n        // Act\n        _sut.Process(calculatePrice);\n\n        // Assert\n        Assert.That((((PriceCalculatedV2)_repo.EventStore.Single().Value[0]).Allowances[\"Car/Transportation\"]).PennyUp()\n            , Is.EqualTo(expectedAllowanceCost));\n\n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_Then_I_Expect_the_insurance_elements_to_be_correct()\n    {\n        // Assign\n        decimal expectedMedicalInsuranceNewCost = 2089.9m;\n        decimal expectedDentalInsuranceNewCost = 409.97m;\n        decimal expectedDeathInsuranceNewCost = 461.73469387755102040816326529m;\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-1_0-pricecalculatedV2.json\");\n        var recalculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-1_0-RecalculatePrice-InsurancesV2.json\");\n\n        //Act\n        _sut.Process(calculatePrice);\n        _sut.Process(recalculatePriceInEUR);\n\n        // Assert\n        Assert.That((((PriceCalculatedV2)_repo.EventStore.Single().Value[0]).MedicalInsuranceCost), Is.EqualTo(expectedMedicalInsuranceNewCost));\n        Assert.That((((PriceCalculatedV2)_repo.EventStore.Single().Value[0]).DentalInsuranceCost), Is.EqualTo(expectedDentalInsuranceNewCost));\n        Assert.That((((PriceCalculatedV2)_repo.EventStore.Single().Value[0]).DeathInsuranceCost), Is.EqualTo(expectedDeathInsuranceNewCost));\n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_I_should_be_able_to_get_the_correct_salary()\n    {\n        // Assign\n        decimal expectedBaseAnnualSalary = 120000;\n        var recalculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-1_0-RecalculatePrice-InsurancesV2.json\");\n        var calculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-1_0-pricecalculatedV2.json\");\n\n        //Act\n        _sut.Process(calculatePriceInEUR);\n        _sut.Process(recalculatePriceInEUR);\n\n        // Assert\n        Assert.That((((PriceCalculatedV2)_repo.EventStore.Single().Value[0]).GrossSalary),\n            Is.EqualTo(expectedBaseAnnualSalary));\n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_I_should_be_able_to_get_the_original_salary_after_conversion()\n    {\n        // Assign\n        const decimal expectedInitialSalary = 120000m;\n        const decimal expectedFinalSalary = 119952m;\n        var calculatePriceInEUR = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-1_0-pricecalculatedV2.json\");\n        var recalculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/recalculateprice-ES-USD-10000.json\");\n\n        // Act\n        _sut.Process(calculatePriceInEUR);\n        _sut.Process(recalculatePrice);\n\n        // Assert\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[0]).GrossSalaryElements[\"Base Salary\"].PennyUp(), Is.EqualTo(expectedInitialSalary));\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[1]).GrossSalaryElements[\"Base Salary\"].PennyUp(), Is.EqualTo(expectedFinalSalary));\n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_oneoff_bonus_removed_then_oneoff_will_be_set_to_zero()\n    {\n        // Assign\n        const decimal expectedBonusIncludingCosts = 0m;\n        const decimal expectedBonusAmount = 0m;\n        const decimal expectedBonusTotal = 0m;\n        var calculatePriceInGbp = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-1_0-pricecalculatedV2.json\");\n\n        var recalculatePriceWithOneOffData = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-1_0-removesigningbonus.json\");\n\n        //Act\n        _sut.Process(calculatePriceInGbp);\n        _sut.Process(recalculatePriceWithOneOffData);\n\n        // Assert\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[1]).SigningBonusCosts, Is.EqualTo(expectedBonusIncludingCosts));\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[1]).SigningBonusAmount, Is.EqualTo(expectedBonusAmount));\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[1]).AdditionalPaymentsTotal, Is.EqualTo(expectedBonusTotal));\n    }\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_oneoff_bonus_and_vesting_then_bonus_will_be_set()\n    {\n        // Assign\n        const decimal expectedBonusIncludingCosts = 12.48m;\n        const decimal expectedBonusAmount = 12m;\n        const decimal expectedVestingAmount = 1000m;\n        const decimal expectedVestingIncludingCosts = 1039.99999999999999999999999m;\n        const decimal expectedBonusTotal = 1052.47999999999999999999999m;\n        var calculatePriceInGbp = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-1_0-pricecalculatedV2.json\");\n        var recalculatePriceWithOneOffData = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-signingbonus-1_0.json\");\n        var recalculatePriceWithVestingBonus = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-vesting-1_0.json\");\n        var recalculatePriceWithInsurances = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-1_0-RecalculatePrice-InsurancesV2.json\");\n\n\n        //Act\n        _sut.Process(calculatePriceInGbp);\n        _sut.Process(recalculatePriceWithOneOffData);\n        _sut.Process(recalculatePriceWithVestingBonus);\n        _sut.Process(recalculatePriceWithOneOffData);\n        _sut.Process(recalculatePriceWithInsurances);\n\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[4]).VestingBonusAmount, Is.EqualTo(expectedVestingAmount));\n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_remove_vesting_bonus_then_vesting_will_be_set_to_zero()\n    {\n        // Assign\n        const decimal expectedVestingAmount = 0m;\n        const decimal expectedCliffMonths = 0m;\n        const decimal expectedTotalMonths = 0m;\n        var calculatePriceInGbp = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-1_0-pricecalculatedV2.json\");"}
{"text": "// file: src/Remundo.Pricing.Tests/SpainTests.cs\n// service: src\n_sut.Process(recalculatePriceWithOneOffData);\n\n        // Assert\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[1]).SigningBonusCosts, Is.EqualTo(expectedBonusIncludingCosts));\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[1]).SigningBonusAmount, Is.EqualTo(expectedBonusAmount));\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[1]).AdditionalPaymentsTotal, Is.EqualTo(expectedBonusTotal));\n    }\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_oneoff_bonus_and_vesting_then_bonus_will_be_set()\n    {\n        // Assign\n        const decimal expectedBonusIncludingCosts = 12.48m;\n        const decimal expectedBonusAmount = 12m;\n        const decimal expectedVestingAmount = 1000m;\n        const decimal expectedVestingIncludingCosts = 1039.99999999999999999999999m;\n        const decimal expectedBonusTotal = 1052.47999999999999999999999m;\n        var calculatePriceInGbp = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-1_0-pricecalculatedV2.json\");\n        var recalculatePriceWithOneOffData = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-signingbonus-1_0.json\");\n        var recalculatePriceWithVestingBonus = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-vesting-1_0.json\");\n        var recalculatePriceWithInsurances = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-1_0-RecalculatePrice-InsurancesV2.json\");\n\n\n        //Act\n        _sut.Process(calculatePriceInGbp);\n        _sut.Process(recalculatePriceWithOneOffData);\n        _sut.Process(recalculatePriceWithVestingBonus);\n        _sut.Process(recalculatePriceWithOneOffData);\n        _sut.Process(recalculatePriceWithInsurances);\n\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[4]).VestingBonusAmount, Is.EqualTo(expectedVestingAmount));\n    }\n\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_remove_vesting_bonus_then_vesting_will_be_set_to_zero()\n    {\n        // Assign\n        const decimal expectedVestingAmount = 0m;\n        const decimal expectedCliffMonths = 0m;\n        const decimal expectedTotalMonths = 0m;\n        var calculatePriceInGbp = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-1_0-pricecalculatedV2.json\");\n        var recalculatePriceWithVestingBonus = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-removevesting-1_0.json\");\n\n        // Act\n        _sut.Process(calculatePriceInGbp);\n        _sut.Process(recalculatePriceWithVestingBonus);\n\n        // Assert\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[1]).VestingBonusAmount, Is.EqualTo(expectedVestingAmount));\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[1]).VestingBonusCliffMonths, Is.EqualTo(expectedCliffMonths));\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[1]).VestingBonusTotalMonths, Is.EqualTo(expectedTotalMonths));\n    }\n    [Test]\n    public void Given_I_receive_RecalculatePrice_command_with_a_vesting_bonus_then_vesting_will_be_set()\n    {\n        var expectedVestingAmount = 1000m;\n        var expectedCliffMonths = 12m;\n        var expectedTotalMonths = 15m;\n        var calculateCloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-1_0-pricecalculatedV2.json\");\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-vesting-1_0.json\");\n\n        //Act\n        _sut.Process(calculateCloudRequest);\n        _sut.Process(cloudRequest);\n\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[1]).VestingBonusAmount, Is.EqualTo(expectedVestingAmount));\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[1]).VestingBonusCliffMonths, Is.EqualTo(expectedCliffMonths));\n        Assert.That(((PriceCalculatedV2)_repo.EventStore.Single().Value[1]).VestingBonusTotalMonths, Is.EqualTo(expectedTotalMonths));\n    }\n\n    [Test]\n    public void RecalculatePrice_WithInsuranceSelected_CalculatesCorrectTotalMonthlyCost()\n    {\n        // Assign\n        const decimal eMonthlyTotalCost = 12624.03m;\n\n        var calculate = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-ES-1_0-pricecalculatedV2.json\");\n        var recalculate = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-ES-1_0-RecalculatePrice-InsurancesV2.json\");\n\n        // Act\n        _sut.Process(calculate);\n        _sut.Process(recalculate);\n\n        // Assert\n        Assert.That((((PriceCalculatedV2)_repo.EventStore.Single().Value[0]).TotalCost/12).PennyUp(), \n            Is.EqualTo(eMonthlyTotalCost));\n    }\n\n    [TestCase(188000, 581.64)] //551 EUR is 570 USD (rate is 1.033)\n    [TestCase(200000, 581.64)] \n    [TestCase(250000, 581.64)] \n    [TestCase(500000, 581.64)]\n    [Test]\n    public void Given_I_recieve_a_CalculatePrice_request_I_expect_to_calculate_the_correct_total(decimal annualSalary, decimal expectedLifeInsurance)\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-1_0-pricecalculatedV2.json\");\n\n        // Replace the annual salary from the payload sample\n        var data = JObject.Parse(cloudRequest.Data);\n        data[\"AnnualSalary\"] = annualSalary;\n        cloudRequest.Data = data.ToString();\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        // Assert\n        var @event = (PriceCalculatedV2)_repo.EventStore.Single().Value[0];\n        Assert.That(@event.DeathInsuranceCost.PennyUp(), Is.EqualTo(expectedLifeInsurance));\n    }\n    [Test]\n    public void Given_An_Old_PriceCalculatedV1_event_No_Null_Exceptions_Are_Thrown()\n    {\n        //Assign\n        var calculatePrice = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-1_0.json\");\n        var recalculatePriceV1 = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-1_0-RecalculatePrice-V1.json\");\n        var recalculatePriceV2 = Helpers.BuildCloudRequest(\"./PayloadSamples/Spain/pricing-ES-1_0-RecalculatePriceNew.json\");\n\n        // Act\n        _sut.Process(calculatePrice);\n        _sut.Process(recalculatePriceV1);\n        _sut.Process(recalculatePriceV2);\n\n        //Assert all events have been processed successfully\n        Assert.That(_repo.EventStore.Single().Value.Count, Is.EqualTo(3));\n        Assert.That(_repo.EventStore.Single().Value[1], Is.TypeOf(typeof(PriceCalculatedV1)));\n    }\n\n\n    [TestCase(50000, 9665.98)]\n    [TestCase(120000, 18936.04)]\n    [Test, Category(\"Deposit\")]\n    public void CalculatePrice_CalculatesCorrectDeposit(decimal annualSalary, decimal expectedDeposit)\n    {\n        // Assign\n        var calculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-ES-1_0-pricecalculatedV2.json\"),\n            new Dictionary<string, dynamic> { { \"AnnualSalary\", annualSalary } });\n\n        // Act\n        _sut.Process(calculate);\n\n        // Assert\n        var stream = _repo.EventStore.Single().Value;\n        var evt = (PriceCalculatedV2)stream.First();\n        Assert.Multiple(() =>\n        {\n            Assert.That(evt.Deposit, Is.EqualTo(expectedDeposit).Within(ACCURACY));\n        });\n    }\n\n    [TestCase(12345, 10310.0729075, 10325)]\n    [TestCase(120000, 68563.721289, 68580)]\n    [Test, Category(\"Deposit\")]\n    public void CalculatePrice_WithDepositFactor_CalculatesCorrectDeposit(decimal annualSalary, decimal expectedDeposit, decimal expectedRounded)\n    {\n        // Assign\n        var calculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-ES-1_0-deposit-factor.json\"),\n            new Dictionary<string, dynamic> { { \"AnnualSalary\", annualSalary } });\n\n        // Act\n        _sut.Process(calculate);\n\n        // Assert\n        var stream = _repo.EventStore.Single().Value;\n        var evt = (PriceCalculatedV6)stream.First();\n        Assert.Multiple(() =>\n        {\n            Assert.That(evt.Deposit, Is.EqualTo(expectedDeposit).Within(ACCURACY));\n            Assert.That(evt.DepositRounded, Is.EqualTo(expectedRounded).Within(ACCURACY));\n        }); \n    }\n\n    [Test, Category(\"Employer Costs\")]\n    public void CalculatePrice_WithAllowances_CalculatesCorrectEmployerCosts()\n    {\n        // Assign\n        const decimal eProfessionalIndemnity = 1462.43m; \n        const decimal eOccupationalHealthSafety = 2193.64m;\n        const decimal eMedicalLeave = 4387.27m;\n        const decimal eSeveranceCost = 18558.12m;\n        const decimal eHRSupport = 144m;\n        const decimal ePayrollProcessingFee = 144m;\n        const decimal eEmployerCost = 46699.43138262m;\n\n        var calculate = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-ES-1_0-with-domain-and-allowances.json\");\n\n        // Act\n        _sut.Process(calculate);\n\n        // Assert\n        var stream = _repo.EventStore.Single().Value;\n        var evt = (PriceCalculatedV6)stream[0];\n        Assert.Multiple(() =>\n        {\n            Assert.That(evt.Costs[\"Employer Cost\"][\"Professional Indemnity\"], Is.EqualTo(eProfessionalIndemnity).Within(ACCURACY));\n            Assert.That(evt.Costs[\"Employer Cost\"][\"Occupational Health & Safety\"], Is.EqualTo(eOccupationalHealthSafety).Within(ACCURACY));\n            Assert.That(evt.Costs[\"Employer Cost\"][\"Medical Leave\"], Is.EqualTo(eMedicalLeave).Within(ACCURACY));\n            Assert.That(evt.Costs[\"Employer Cost\"][\"Severance Cost\"], Is.EqualTo(eSeveranceCost).Within(ACCURACY));\n            Assert.That(evt.Costs[\"Employer Cost\"][\"HR Support\"], Is.EqualTo(eHRSupport).Within(ACCURACY));\n            Assert.That(evt.Costs[\"Employer Cost\"][\"Payroll Processing Fee\"], Is.EqualTo(ePayrollProcessingFee).Within(ACCURACY));\n            Assert.That(evt.EmployerCost, Is.EqualTo(eEmployerCost).Within(ACCURACY));\n        });\n    }\n\n    [Test, Category(\"Employer Costs\")]\n    public void RecalculatePriceV2_WhenThereAreAllowancesAlreadySetAddingSigningBonuses_CalculatesCorrectEmployerCosts()\n    {\n        // Assign\n        const decimal eProfessionalIndemnity = 1462.43m;\n        const decimal eOccupationalHealthSafety = 2193.64m;\n        const decimal eMedicalLeave = 4387.27m;\n        const decimal eSeveranceCost = 18558.12m;\n        const decimal eHrSupport = 144m;\n        const decimal ePayrollProcessingFee = 144m;\n        const decimal eSigningBonus = 14.4m;\n        const decimal eEmployerCost = 46699.43138262m;\n\n        var calculate = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-ES-1_0-with-domain-and-allowances.json\");\n        var recalculate = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-ES-signingbonus-2_0.json\");"}
{"text": "// file: src/Remundo.Pricing.Tests/SpainTests.cs\n// service: src\nconst decimal eSeveranceCost = 18558.12m;\n        const decimal eHRSupport = 144m;\n        const decimal ePayrollProcessingFee = 144m;\n        const decimal eEmployerCost = 46699.43138262m;\n\n        var calculate = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-ES-1_0-with-domain-and-allowances.json\");\n\n        // Act\n        _sut.Process(calculate);\n\n        // Assert\n        var stream = _repo.EventStore.Single().Value;\n        var evt = (PriceCalculatedV6)stream[0];\n        Assert.Multiple(() =>\n        {\n            Assert.That(evt.Costs[\"Employer Cost\"][\"Professional Indemnity\"], Is.EqualTo(eProfessionalIndemnity).Within(ACCURACY));\n            Assert.That(evt.Costs[\"Employer Cost\"][\"Occupational Health & Safety\"], Is.EqualTo(eOccupationalHealthSafety).Within(ACCURACY));\n            Assert.That(evt.Costs[\"Employer Cost\"][\"Medical Leave\"], Is.EqualTo(eMedicalLeave).Within(ACCURACY));\n            Assert.That(evt.Costs[\"Employer Cost\"][\"Severance Cost\"], Is.EqualTo(eSeveranceCost).Within(ACCURACY));\n            Assert.That(evt.Costs[\"Employer Cost\"][\"HR Support\"], Is.EqualTo(eHRSupport).Within(ACCURACY));\n            Assert.That(evt.Costs[\"Employer Cost\"][\"Payroll Processing Fee\"], Is.EqualTo(ePayrollProcessingFee).Within(ACCURACY));\n            Assert.That(evt.EmployerCost, Is.EqualTo(eEmployerCost).Within(ACCURACY));\n        });\n    }\n\n    [Test, Category(\"Employer Costs\")]\n    public void RecalculatePriceV2_WhenThereAreAllowancesAlreadySetAddingSigningBonuses_CalculatesCorrectEmployerCosts()\n    {\n        // Assign\n        const decimal eProfessionalIndemnity = 1462.43m;\n        const decimal eOccupationalHealthSafety = 2193.64m;\n        const decimal eMedicalLeave = 4387.27m;\n        const decimal eSeveranceCost = 18558.12m;\n        const decimal eHrSupport = 144m;\n        const decimal ePayrollProcessingFee = 144m;\n        const decimal eSigningBonus = 14.4m;\n        const decimal eEmployerCost = 46699.43138262m;\n\n        var calculate = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-ES-1_0-with-domain-and-allowances.json\");\n        var recalculate = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-ES-signingbonus-2_0.json\");\n\n        // Act\n        _sut.Process(calculate);\n        _sut.Process(recalculate);\n\n        // Assert\n        var stream = _repo.EventStore.Single().Value;\n        var evt = (PriceCalculatedV6)stream[1];\n        Assert.Multiple(() =>\n        {\n            Assert.That(evt.Costs[\"Employer Cost\"][\"Professional Indemnity\"], Is.EqualTo(eProfessionalIndemnity).Within(ACCURACY));\n            Assert.That(evt.Costs[\"Employer Cost\"][\"Occupational Health & Safety\"], Is.EqualTo(eOccupationalHealthSafety).Within(ACCURACY));\n            Assert.That(evt.Costs[\"Employer Cost\"][\"Medical Leave\"], Is.EqualTo(eMedicalLeave).Within(ACCURACY));\n            Assert.That(evt.Costs[\"Employer Cost\"][\"Severance Cost\"], Is.EqualTo(eSeveranceCost).Within(ACCURACY));\n            Assert.That(evt.Costs[\"Employer Cost\"][\"HR Support\"], Is.EqualTo(eHrSupport).Within(ACCURACY));\n            Assert.That(evt.Costs[\"Employer Cost\"][\"Payroll Processing Fee\"], Is.EqualTo(ePayrollProcessingFee).Within(ACCURACY));\n            Assert.That(evt.Costs[\"Additional Payments\"][\"Signing Bonus\"], Is.EqualTo(eSigningBonus).Within(ACCURACY));\n            Assert.That(evt.EmployerCost, Is.EqualTo(eEmployerCost).Within(ACCURACY));\n        });\n    }\n\n    [Test, Category(\"Total Cost\"), Category(\"Platform Fee\")]\n    public void CalculatePrice_WhenPlaformFeeIsPercentage_CalculatesCorrectTotalCostAndPlatformFee()\n    {\n        // Assign\n        const decimal eTotalCost = 87331.2875m;\n        const decimal ePlatformFee = 11391.0375m;\n\n        var calculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-ES-1_0-platformFee-percentage.json\"),\n            new Dictionary<string, dynamic> { { \"IsoCode\", \"ES\" } });\n\n        // Act\n        _sut.Process(calculate);\n\n        // Assert\n        var stream = _repo.EventStore.Single().Value;\n        var evt = (PriceCalculatedV6)stream.First();\n        Assert.Multiple(() =>\n        {\n            Assert.That(evt.PlatformFeeInLocalCurrency, Is.EqualTo(ePlatformFee).Within(ACCURACY));\n            Assert.That(evt.TotalCost, Is.EqualTo(eTotalCost).Within(ACCURACY));\n        });\n    }\n\n    [Test, Category(\"Total Cost\"), Category(\"Platform Fee\")]\n    public void CalculatePrice_WhenPlatformFeeIsFixedFee_CalculatesCorrectTotalCostAndPlatformFee()\n    {\n        // Assign\n        const decimal ePlatformFee = 6000m;\n        const decimal eTotalCost = 9720.7m;\n\n        var calculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-ES-1_0-platformFee-fixed-fee.json\"),\n            new Dictionary<string, dynamic> { { \"IsoCode\", \"ES\" } });\n\n        // Act\n        _sut.Process(calculate);\n\n        // Assert\n        var stream = _repo.EventStore.Single().Value;\n        var evt = (PriceCalculatedV6)stream.First();\n        Assert.Multiple(() =>\n        {\n            Assert.That(evt.PlatformFeeInLocalCurrency, Is.EqualTo(ePlatformFee).Within(ACCURACY));\n            Assert.That(evt.TotalCost, Is.EqualTo(eTotalCost).Within(ACCURACY));\n        });\n    }\n\n    [Test, Category(\"Total Cost\")]\n    [TestCase(87331.2875, true)]\n    [TestCase(9720.7, false)]\n    public void CalculatePrice_WhenHrSupportIsPresent_CalculatesCorrectTotalCost(decimal expectedTotalCost, bool isPercentage)\n    {\n        // Assign\n        var payrollType = isPercentage ? \"percentage\" : \"fixed-fee\";\n        var calculate = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-ES-1_0-platformFee-{payrollType}.json\");\n\n        // Act\n        _sut.Process(calculate);\n\n        // Assert\n        var stream = _repo.EventStore.Single().Value;\n        var evt = (PriceCalculatedV6)stream.First();\n        Assert.Multiple(() =>\n        {\n            Assert.That(evt.TotalCost, Is.EqualTo(expectedTotalCost).Within(ACCURACY));\n        });\n    }\n\n    [Test, Category(\"Total Cost\")]\n    [TestCase(87331.2875, true)]\n    [TestCase(9720.7, false)]\n    public void CalculatePrice_WhenPayrollProcessingFeeIsPresent_CalculatesCorrectTotalCost(decimal expectedTotalCost, bool isPercentage)\n    {\n        // Assign\n        var payrollType = isPercentage ? \"percentage\" : \"fixed-fee\";\n        var calculate = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-ES-1_0-platformFee-{payrollType}.json\");\n\n        // Act\n        _sut.Process(calculate);\n\n        // Assert\n        var stream = _repo.EventStore.Single().Value;\n        var evt = (PriceCalculatedV6)stream.First();\n        Assert.Multiple(() =>\n        {\n            Assert.That(evt.TotalCost, Is.EqualTo(expectedTotalCost).Within(ACCURACY));\n        });\n    }\n\n    [Test, Category(\"MSP Fee\")]\n    [TestCase(\"Amdocs\", 19.83)]\n    [TestCase(\"XML-INT\", null)]\n    public void CalculatePriceV2_ForDifferentTenants_CalculatesCorrectCorrespondingMspFee(string tenantId, decimal? expectedMSPFee)\n    {\n        // Assign\n        var calculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-ES-tenantCosts.json\"),\n            new Dictionary<string, dynamic> { { \"TenantId\", tenantId } });\n\n        // Act\n        _sut.Process(calculate);\n\n        // Assert\n        var stream = _repo.EventStore.Single().Value;\n        var evt = (PriceCalculatedV6)stream.First();\n        var mspFee = evt.Costs.ContainsKey(\"Tenant Costs\") ? evt.Costs[\"Tenant Costs\"]?[\"MSP Fee\"].PennyUp() : null;\n\n        Assert.Multiple(() =>\n        {\n            Assert.That(mspFee, Is.EqualTo(expectedMSPFee).Within(ACCURACY));\n        });\n    }\n\n    [Test, Category(\"MSP Fee\")]\n    [TestCase(\"Amdocs\", 19.83, 40.05)]\n    [TestCase(\"XML-INT\", null, null)]\n    [TestCase(\"Acme\", null, null)]\n    public void RecalculatePriceV2_ForDifferentTenants_CalculatesCorrectCorrespondingMspFee(\n        string tenantId,\n        decimal? expectedMSPFee,\n        decimal? expectedRecalculatedMSPFee)\n    {\n        // Assign\n        var calculatePrice = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-ES-tenantCosts.json\"),\n            new Dictionary<string, dynamic> { { \"TenantId\", tenantId } });\n\n        var recalculatePrice = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/recalculateprice-ES-tenantCosts.json\"),\n            new Dictionary<string, dynamic> { { \"TenantId\", tenantId } });\n\n        // Act\n        _sut.Process(calculatePrice);\n        _sut.Process(recalculatePrice);\n\n        // Assert\n        var stream = _repo.EventStore.Single().Value;\n\n        var firstEvent = (PriceCalculatedV6)stream[0];\n        var secondEvent = (PriceCalculatedV6)stream[1];\n\n        var firstMspFee = firstEvent.Costs.ContainsKey(\"Tenant Costs\") ? firstEvent.Costs[\"Tenant Costs\"]?[\"MSP Fee\"] : null;\n        var recalculatedMspFee = secondEvent.Costs.ContainsKey(\"Tenant Costs\") ? secondEvent.Costs[\"Tenant Costs\"]?[\"MSP Fee\"] : null;\n\n        Assert.Multiple(() =>\n        {\n            Assert.That(firstMspFee, Is.EqualTo(expectedMSPFee).Within(ACCURACY));\n            Assert.That(recalculatedMspFee, Is.EqualTo(expectedRecalculatedMSPFee).Within(ACCURACY));\n        });\n    }\n\n    [Test, Category(\"Professional Contingency\")]\n    [TestCase(360, 24000)] \n    [TestCase(600, 40000)]\n    [TestCase(883.71, 60000)] \n    public void CalculatePriceV2_CalculatesCorrectProfessionalContingency(decimal expected, decimal salary)\n    {\n        // Assign"}
{"text": "// file: src/Remundo.Pricing.Tests/SpainTests.cs\n// service: src\nstring tenantId,\n        decimal? expectedMSPFee,\n        decimal? expectedRecalculatedMSPFee)\n    {\n        // Assign\n        var calculatePrice = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-ES-tenantCosts.json\"),\n            new Dictionary<string, dynamic> { { \"TenantId\", tenantId } });\n\n        var recalculatePrice = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/recalculateprice-ES-tenantCosts.json\"),\n            new Dictionary<string, dynamic> { { \"TenantId\", tenantId } });\n\n        // Act\n        _sut.Process(calculatePrice);\n        _sut.Process(recalculatePrice);\n\n        // Assert\n        var stream = _repo.EventStore.Single().Value;\n\n        var firstEvent = (PriceCalculatedV6)stream[0];\n        var secondEvent = (PriceCalculatedV6)stream[1];\n\n        var firstMspFee = firstEvent.Costs.ContainsKey(\"Tenant Costs\") ? firstEvent.Costs[\"Tenant Costs\"]?[\"MSP Fee\"] : null;\n        var recalculatedMspFee = secondEvent.Costs.ContainsKey(\"Tenant Costs\") ? secondEvent.Costs[\"Tenant Costs\"]?[\"MSP Fee\"] : null;\n\n        Assert.Multiple(() =>\n        {\n            Assert.That(firstMspFee, Is.EqualTo(expectedMSPFee).Within(ACCURACY));\n            Assert.That(recalculatedMspFee, Is.EqualTo(expectedRecalculatedMSPFee).Within(ACCURACY));\n        });\n    }\n\n    [Test, Category(\"Professional Contingency\")]\n    [TestCase(360, 24000)] \n    [TestCase(600, 40000)]\n    [TestCase(883.71, 60000)] \n    public void CalculatePriceV2_CalculatesCorrectProfessionalContingency(decimal expected, decimal salary)\n    {\n        // Assign\n        var eProfessionContingency = expected;\n\n        var calculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/CalculatePriceV2.json\"), \n            new Dictionary<string, dynamic> { { \"AnnualSalary\", salary } });\n\n        // Act\n        _sut.Process(calculate);\n\n        // Assert\n        var stream = _repo.EventStore.Single().Value;\n        var evt = stream.First() as PriceCalculatedV6;\n        var cost = evt!.Costs[\"Employer Cost\"][\"Professional Contingency\"]; \n\n        Assert.Multiple(() =>\n        {\n            Assert.That(cost, Is.EqualTo(eProfessionContingency).Within(ACCURACY));\n        });\n    }\n\n    [Test, Category(\"Professional Contingency\")]\n    [TestCase(360 /*2172.00*/, 24000)]\n    [TestCase(600, 40000)]\n    [TestCase(883.71 /*4882.08*/, 60000)]\n    public void RecalculatePriceV2_CalculatesCorrectProfessionalContingency(decimal eProfessionContingency, decimal salary)\n    {\n        // Assign\n        var calculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/CalculatePriceV2.json\"),\n            new Dictionary<string, dynamic> { { \"AnnualSalary\", salary } });\n\n        var recalculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/RecalculatePriceV2.json\"),\n            new Dictionary<string, dynamic> { { \"AnnualSalary\", salary } });\n\n        // Act\n        _sut.Process(calculate);\n        _sut.Process(recalculate);\n\n        // Assert\n        var stream = _repo.EventStore.Last().Value;\n        var evt = stream.First() as PriceCalculatedV6;\n        var cost = evt!.Costs[\"Employer Cost\"][\"Professional Contingency\"];\n\n        Assert.Multiple(() =>\n        {\n            Assert.That(cost, Is.EqualTo(eProfessionContingency).Within(ACCURACY));\n        });\n    }\n\n    [Test, Category(\"Employer Social Security\")]\n    [TestCase(7336.8, 24000)]\n    [TestCase(12228, 40000)]\n    [TestCase(18010.01, 60000)]\n    public void CalculatePriceV2_CalculatesCorrectEmployerSocialSecurity(decimal eEmployerSocialSecurity, decimal salary)\n    {\n        // Assign\n        var calculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/CalculatePriceV2.json\"),\n            new Dictionary<string, dynamic> { { \"AnnualSalary\", salary } });\n\n        // Act\n        _sut.Process(calculate);\n\n        // Assert\n        var stream = _repo.EventStore.Single().Value;\n        var evt = stream.First() as PriceCalculatedV6;\n        var cost = evt!.Costs[\"Employer Cost\"][\"Employer Social Security\"];\n\n        Assert.Multiple(() =>\n        {\n            Assert.That(cost, Is.EqualTo(eEmployerSocialSecurity).Within(ACCURACY));\n        });\n    }\n\n    [Test, Category(\"Professional Contingency\")]\n    [TestCase(7336.8, 24000)]\n    [TestCase(12228, 40000)]\n    [TestCase(18010.01, 60000)]\n    public void RecalculatePriceV2_CalculatesCorrectEmployerSocialSecurity(decimal eEmployerSocialSecurity, decimal salary)\n    {\n        // Assign\n        var calculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/CalculatePriceV2.json\"),\n            new Dictionary<string, dynamic> { { \"AnnualSalary\", salary } });\n\n        var recalculate = Helpers.EditCloudRequest(\n            Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/RecalculatePriceV2.json\"),\n            new Dictionary<string, dynamic> { { \"AnnualSalary\", salary } });\n\n        // Act\n        _sut.Process(calculate);\n        _sut.Process(recalculate);\n\n        // Assert\n        var stream = _repo.EventStore.Last().Value;\n        var evt = stream.First() as PriceCalculatedV6;\n        var cost = evt!.Costs[\"Employer Cost\"][\"Employer Social Security\"];\n\n        Assert.Multiple(() =>\n        {\n            Assert.That(cost, Is.EqualTo(eEmployerSocialSecurity).Within(ACCURACY));\n        });\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/SwitzerlandTests.cs\n// service: src\n﻿using Remundo.Pricing.Adapter;\nusing Remundo.Pricing.Domain.Services;\nusing Remundo.Pricing.Shared.Events;\nusing Remundo.Pricing.Tests.Fakes;\nusing Remundo.Pricing.Tests.Utils;\nusing NLog;\n\nnamespace Remundo.Pricing.Tests;\n\npublic class SwitzerlandTests\n{\n    private InMemoryDomainRepository _inMemoryDomainRepo;\n    private Worker _sut;\n    private IHttpService _httpService;\n    private const string PAYLOAD_DIR = \"./PayloadSamples/Switzerland\";\n\n    [SetUp]\n    public void Setup()\n    {\n        _inMemoryDomainRepo = new InMemoryDomainRepository();\n        _httpService = new FakeHttpService();\n        _sut = new Worker(_inMemoryDomainRepo, LogManager.CreateNullLogger(), _httpService);\n    }\n\n    [Test]\n    public void Given_I_receive_CalculatePrice_command_Then_I_Expect_PriceCalculatedV6_event()\n    {\n        // Assign\n        var expectedPricingIdentity = \"CH\";\n        var expectedEmployerCosts = new Dictionary<string, decimal>\n        {\n            {\"Insurance UVGZ\", 184.8m.PennyUp() },\n            {\"Accident Insurance\", 216.24m.PennyUp() },\n            {\"Insurance NBUV\", 700.8m.PennyUp() },\n            {\"Insurance UVGZ-II\", 100.8m.PennyUp() },\n            {\"Pension AHV Administrative\",  216m.PennyUp()},\n            {\"Pension ALV\", 1320m.PennyUp() },\n            {\"Social Security-OSDI\", 6360m.PennyUp() },\n            {\"Unemployment\",  540m.PennyUp()},\n            {\"Unemployment ALVZ\", 0m },\n            {\"Family AHV\", 1620m.PennyUp()},\n            {\"Severance Cost\", 0m.PennyUp() },\n            {\"Medical Leave\", 3937.76m.PennyUp() },\n            {\"Occupational Health & Safety\", 1968.88m.PennyUp() },\n            {\"Professional Indemnity\", 1312.59m.PennyUp() },\n            {\"HR Support\", 5808m },\n            {\"Payroll Processing Fee\", 1584m },\n            {\"Special Prices\", 0m },\n        };\n        var cloudRequest = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-CH-1_0.json\");\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        var evt = (PriceCalculatedV7)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        var employerCosts = evt.Costs[\"Employer Cost\"].ToDictionary(x => x.Key, x => x.Value);\n        // Assert\n        Assert.That(evt.IsoCode, Is.EqualTo(expectedPricingIdentity));\n        Assert.That(employerCosts[\"Unemployment ALVZ\"] == 0, \"Unemployment ALVZ is not 0\");\n        CollectionAssert.AreEquivalent(expectedEmployerCosts, employerCosts);\n    }\n\n\n    [Test]\n    public void CalculatePrice_When_SalaryAboveUnemploymentCap_Then_UnemploymentALVZNotZero()\n    {\n        // Assign\n        var cloudRequest = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-CH-1_0.json\", new() { { \"AnnualSalary\", 2400000} });\n\n        // Act\n        _sut.Process(cloudRequest);\n\n        var evt = (PriceCalculatedV7)_inMemoryDomainRepo.EventStore.Single().Value[0];\n        var employerCosts = evt.Costs[\"Employer Cost\"].Where(x => x.Value != 0m).ToDictionary(x => x.Key, x => x.Value);\n        // Assert\n        Assert.That(employerCosts[\"Unemployment ALVZ\"] > 0, \"Unemployment ALVZ is less than or equal to 0\");\n    }\n\n    [Test]\n    public void Given_I_receive_ReCalculatePrice_command_Then_I_Expect_PriceCalculatedV6_event()\n    {\n        // Assign\n        var expectedPricingIdentity = \"CH\";\n        var expectedEmployerCosts = new Dictionary<string, decimal>\n        {\n            {\"Insurance UVGZ\", 185.03m.PennyUp() },\n            {\"Accident Insurance\", 216.5m.PennyUp() },\n            {\"Insurance NBUV\", 701.65m.PennyUp() },\n            {\"Insurance UVGZ-II\", 100.93m.PennyUp() },\n            {\"Pension AHV Administrative\",  216.26m.PennyUp()},\n            {\"Pension ALV\", 1321.59m.PennyUp() },\n            {\"Social Security-OSDI\", 6367.64m.PennyUp() },\n            {\"Unemployment\",  540.65m.PennyUp()},\n            //{\"Unemployment ALVZ\", 0m },\n            {\"Family AHV\", 1621.95m.PennyUp()},\n            //{\"Severance Cost\", 0m.PennyUp() },\n            {\"Medical Leave\", 3942.49m.PennyUp() },\n            {\"Occupational Health & Safety\", 1971.25m.PennyUp() },\n            {\"Professional Indemnity\", 1314.17m.PennyUp() },\n            {\"HR Support\", 5808m },\n            {\"Payroll Processing Fee\", 1584m },\n        };\n        var cloudRequest = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-CH-1_0.json\");\n        var recloudRequest = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/recalculateprice-CH-1_0.json\", \n            new() { \n                { \"Allowances\", new Dictionary<string, decimal> { { \"X\", 12 } } },\n            });\n\n        // Act\n        _sut.Process(cloudRequest);\n        _sut.Process(recloudRequest);\n\n        var evt = (PriceCalculatedV7)_inMemoryDomainRepo.EventStore.Single().Value[1];\n        var employerCosts = evt.Costs[\"Employer Cost\"].Where(x => x.Value != 0m).ToDictionary(x => x.Key, x => x.Value);\n        // Assert\n        Assert.That(evt.IsoCode, Is.EqualTo(expectedPricingIdentity));\n        CollectionAssert.AreEquivalent(expectedEmployerCosts, evt.Costs[\"Employer Cost\"].Where(x => x.Value != 0m).ToDictionary(x=>x.Key, x=>x.Value));\n    }\n\n    [Test]\n    public void Given_I_receive_ReCalculatePrice_command_WithInsurances_Then_I_Expect_PriceCalculatedV6_event()\n    {\n        // Assign\n        var expectedPricingIdentity = \"CH\";\n        var expectedEmployerCosts = new Dictionary<string, decimal>\n        {\n            {\"Insurance UVGZ\", 184.8m.PennyUp() },\n            {\"Accident Insurance\", 216.24m.PennyUp() },\n            {\"Insurance NBUV\", 700.8m.PennyUp() },\n            {\"Insurance UVGZ-II\", 100.8m.PennyUp() },\n            {\"Pension AHV Administrative\",  216m.PennyUp()},\n            {\"Pension ALV\", 1320m.PennyUp() },\n            {\"Social Security-OSDI\", 6360m.PennyUp() },\n            {\"Unemployment\",  540m.PennyUp()},\n            //{\"Unemployment ALVZ\", 0m },\n            {\"Family AHV\", 1620m.PennyUp()},\n            //{\"Severance Cost\", 0m.PennyUp() },\n            {\"Medical Leave\", 3937.76m.PennyUp() },\n            {\"Occupational Health & Safety\", 1968.88m.PennyUp() },\n            {\"Professional Indemnity\", 1312.59m.PennyUp() },\n            {\"HR Support\", 5808m },\n            {\"Payroll Processing Fee\", 1584m },\n        };\n        var cloudRequest = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/pricing-CH-1_0.json\");\n        var recloudRequest = Helpers.BuildCloudRequest($\"{PAYLOAD_DIR}/recalculateprice-CH-1_0.json\",\n            new() {\n                { \"MedicalInsurance\", true},\n            });\n\n        // Act\n        _sut.Process(cloudRequest);\n        _sut.Process(recloudRequest);\n\n        var evt = (PriceCalculatedV7)_inMemoryDomainRepo.EventStore.Single().Value[1];\n        var employerCosts = evt.Costs[\"Employer Cost\"].Where(x => x.Value != 0m).ToDictionary(x => x.Key, x => x.Value);\n        // Assert\n        Assert.That(evt.IsoCode, Is.EqualTo(expectedPricingIdentity));\n        CollectionAssert.AreEquivalent(expectedEmployerCosts, evt.Costs[\"Employer Cost\"].Where(x => x.Value != 0m).ToDictionary(x => x.Key, x => x.Value));\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/Fakes/FakeHttpService.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Models;\nusing Remundo.Pricing.Domain.Services;\nusing System.Text.Json.Nodes;\n\nnamespace Remundo.Pricing.Tests.Fakes;\n\npublic class FakeHttpService : IHttpService\n{\n    private static readonly IDictionary<string, decimal> _exchangeRates = new Dictionary<string, decimal>\n    {\n        { \"INR-EUR\", 0.011835m },\n        { \"INR-USD\", 0.012237m },\n        { \"EUR-EUR\", 1 },\n        { \"USD-EUR\", 0.967154m },\n    };\n    private static decimal GetFake(string fromCurrencyIsoCode, string toCurrencyIsoCode)\n    {\n        if (fromCurrencyIsoCode == toCurrencyIsoCode) return 1m;\n\n        if (fromCurrencyIsoCode == \"GBP\" && toCurrencyIsoCode == \"USD\") return 1.2m;\n        if (fromCurrencyIsoCode == \"GBP\" && toCurrencyIsoCode == \"EUR\") return 1.15m;\n        if (fromCurrencyIsoCode == \"EUR\" && toCurrencyIsoCode == \"USD\") return 0.98m;\n        if (fromCurrencyIsoCode == \"EUR\" && toCurrencyIsoCode == \"GBP\") return 0.846m;\n        if (fromCurrencyIsoCode == \"EUR\" && toCurrencyIsoCode == \"SGD\") return 1.42m;\n        if (fromCurrencyIsoCode == \"EUR\" && toCurrencyIsoCode == \"USD\") return 0.98m;\n        if (fromCurrencyIsoCode == \"USD\" && toCurrencyIsoCode == \"GBP\") return 0.833333m;\n        if (fromCurrencyIsoCode == \"USD\" && toCurrencyIsoCode == \"EUR\") return 1.02m;\n        if (fromCurrencyIsoCode == \"EUR\" && toCurrencyIsoCode == \"EUR\") return 1m;\n        if (fromCurrencyIsoCode == \"EUR\" && toCurrencyIsoCode == \"CHF\") return 0.94m;\n\n        if (fromCurrencyIsoCode == \"GBP\" && toCurrencyIsoCode == \"USD\") return 1.2m;\n        if (fromCurrencyIsoCode == \"EUR\" && toCurrencyIsoCode == \"SGD\") return 1.42m;\n        if (fromCurrencyIsoCode == \"CZK\" && toCurrencyIsoCode == \"USD\") return 1.18m;\n        if (fromCurrencyIsoCode == \"GBP\" && toCurrencyIsoCode == \"CHF\") return 1.1m;\n        if (fromCurrencyIsoCode == \"USD\" && toCurrencyIsoCode == \"CHF\") return 0.82m;\n        if (fromCurrencyIsoCode == \"EUR\" && toCurrencyIsoCode == \"CHF\") return 0.94m;\n\n\n        if (!_exchangeRates.ContainsKey($\"{fromCurrencyIsoCode}-{toCurrencyIsoCode}\") && !_exchangeRates.ContainsKey($\"{toCurrencyIsoCode}-{fromCurrencyIsoCode}\"))\n            //throw new Exception($\"required exchange rate '{fromCurrencyIsoCode}-{toCurrencyIsoCode}' not found\");\n            return 0.846m;\n\n        if (fromCurrencyIsoCode == \"INR\" && toCurrencyIsoCode == \"EUR\") return _exchangeRates.ContainsKey(\"INR-EUR\") ? _exchangeRates[\"INR-EUR\"] : 1 / _exchangeRates[\"EUR-INR\"];\n        if (fromCurrencyIsoCode == \"INR\" && toCurrencyIsoCode == \"USD\") return _exchangeRates.ContainsKey(\"INR-USD\") ? _exchangeRates[\"INR-USD\"] : 1 / _exchangeRates[\"USD-INR\"];\n        if (fromCurrencyIsoCode == \"EUR\" && toCurrencyIsoCode == \"EUR\") return _exchangeRates[\"EUR-EUR\"];\n\n        if (fromCurrencyIsoCode == \"EUR\" && toCurrencyIsoCode == \"INR\") return _exchangeRates.ContainsKey(\"EUR-INR\") ? _exchangeRates[\"EUR-INR\"] : 1 / _exchangeRates[\"INR-EUR\"];\n        if (fromCurrencyIsoCode == \"EUR\" && toCurrencyIsoCode == \"USD\") return _exchangeRates.ContainsKey(\"EUR-USD\") ? _exchangeRates[\"EUR-USD\"] : 1 / _exchangeRates[\"USD-EUR\"];\n        if (fromCurrencyIsoCode == \"USD\" && toCurrencyIsoCode == \"INR\") return _exchangeRates.ContainsKey(\"USD-INR\") ? _exchangeRates[\"USD-INR\"] : 1 / _exchangeRates[\"INR-USD\"];\n        if (fromCurrencyIsoCode == \"USD\" && toCurrencyIsoCode == \"EUR\") return _exchangeRates.ContainsKey(\"USD-EUR\") ? _exchangeRates[\"USD-EUR\"] : 1 / _exchangeRates[\"EUR-USD\"];\n\n        return 1m;\n    }\n\n    public Task<decimal> GetExchangeRateAsync(string from, string to)\n    {\n        return Task.FromResult(GetFake(from, to));\n    }\n\n    public PricingRules GetPricingRules(string tenantId, string isoCode, string orgId)\n    {\n        throw new NotImplementedException();\n    }\n\n    private static PricingRules GetFakePricingRule(string isoCode, string orgId)\n    {\n        if (orgId.Equals(\"null-insurance-value\"))\n        {\n            return new PricingRules\n            {\n                MSPFee = 2.6m,\n                PlatformFeePercentage = 8m,\n                ProfessionalIndemnity = 36.0m,\n                OccupationalHealthAndSafety = 30.0m,\n                MedicalLeave = 32.1m,\n                SeveranceCost = 12.0m,\n                HRSupportAmount = 34.1m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 12.0m,\n                OneOffOnboardingFeeNominal = 12.0m,\n                OneOffOnboardingFeePercentage = null,\n                OneOffOffboardingFeeNominal = 12.0m,\n                OneOffOffboardingFeePercentage = null,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = null,\n                    Currency = null,\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = null,\n                    Currency = null\n                }\n            };\n        }\n        if (orgId.Equals(\"Testing\"))\n        {\n            return new PricingRules\n            {\n                MSPFee = 2.6m,\n                PlatformFeePercentage = 8m,\n                ProfessionalIndemnity = 36.0m,\n                OccupationalHealthAndSafety = 30.0m,\n                MedicalLeave = 32.1m,\n                SeveranceCost = 12.0m,\n                HRSupportAmount = 34.1m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 12.0m,\n                OneOffOnboardingFeeNominal = 12.0m,\n                OneOffOnboardingFeePercentage = null,\n                OneOffOffboardingFeeNominal = 12.0m,\n                OneOffOffboardingFeePercentage = null,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1400,\n                    Currency = \"EUR\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1400,\n                    Currency = \"EUR\"\n                }\n            };\n        }\n        if (orgId.Equals(\"has mspFee\"))\n        {\n            return new PricingRules\n            {\n                MSPFee = 2.6m,\n                PlatformFeePercentage = 8m,\n                ProfessionalIndemnity = 36.0m,\n                OccupationalHealthAndSafety = 30.0m,\n                MedicalLeave = 32.1m,\n                SeveranceCost = 12.0m,\n                HRSupportAmount = 34.1m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 12.0m,\n                OneOffOnboardingFeeNominal = 12.0m,\n                OneOffOnboardingFeePercentage = null,\n                OneOffOffboardingFeeNominal = 12.0m,\n                OneOffOffboardingFeePercentage = null,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (orgId.Equals(\"123\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 36.0m,\n                OccupationalHealthAndSafety = 30.0m,\n                MedicalLeave = 32.1m,\n                SeveranceCost = 12.0m,\n                HRSupportAmount = 12m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 12.0m,\n                OneOffOnboardingFeeNominal = null,\n                OneOffOnboardingFeePercentage = 12.0m,\n                OneOffOffboardingFeeNominal = null,\n                OneOffOffboardingFeePercentage = 12.0m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (orgId.Equals(\"456\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 7.7m,\n                HRSupportAmount = 12m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = null,\n                OneOffOnboardingFeePercentage = 0m,\n                OneOffOffboardingFeeNominal = null,\n                OneOffOffboardingFeePercentage = 0m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (orgId.Equals(\"789\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,"}
{"text": "// file: src/Remundo.Pricing.Tests/Fakes/FakeHttpService.cs\n// service: src\n{\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (orgId.Equals(\"456\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 7.7m,\n                HRSupportAmount = 12m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = null,\n                OneOffOnboardingFeePercentage = 0m,\n                OneOffOffboardingFeeNominal = null,\n                OneOffOffboardingFeePercentage = 0m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (orgId.Equals(\"789\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 7.7m,\n                HRSupportAmount = 12m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = null,\n                OneOffOnboardingFeePercentage = 0m,\n                OneOffOffboardingFeeNominal = null,\n                OneOffOffboardingFeePercentage = 0m,\n                DepositFactor = 5m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (orgId.Equals(\"Platform is percentage\"))\n        {\n            return new PricingRules\n            {\n                PlatformFeePercentage = 15m,\n                PayrollProcessingFeePercentage = 10,\n                HRSupportAmountPercentage = 5,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (orgId.Equals(\"Platform is fixed fee\"))\n        {\n            return new PricingRules\n            {\n                PlatformFee = 500m,\n                PayrollProcessingFee = 100m,\n                HRSupportAmount = 100m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (orgId.Equals(\"domain\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 12.69m,\n                HRSupportAmount = 12m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = null,\n                OneOffOnboardingFeePercentage = 0m,\n                OneOffOffboardingFeeNominal = null,\n                OneOffOffboardingFeePercentage = 0m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (isoCode.Equals(\"AT\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 1.92m,\n                HRSupportAmount = 500m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 140m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = 0m,\n                OneOffOnboardingFeePercentage = null,\n                OneOffOffboardingFeeNominal = 0m,\n                OneOffOffboardingFeePercentage = null,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (isoCode.Equals(\"CH\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 0m,\n                HRSupportAmount = 484m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 132m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = 0m,\n                OneOffOnboardingFeePercentage = null,\n                OneOffOffboardingFeeNominal = 0m,\n                OneOffOffboardingFeePercentage = null,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 100,\n                    Currency = \"CHF\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 100,\n                    Currency = \"CHF\"\n                }\n            };\n        }\n        if (isoCode.Equals(\"IT\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                PlatformFee = 500m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = 0m,\n                OneOffOnboardingFeePercentage = null,\n                OneOffOffboardingFeeNominal = 0m,\n                OneOffOffboardingFeePercentage = null,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (isoCode.Equals(\"BE\"))\n        {\n            return new PricingRules\n            {"}
{"text": "// file: src/Remundo.Pricing.Tests/Fakes/FakeHttpService.cs\n// service: src\nValue = 100,\n                    Currency = \"CHF\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 100,\n                    Currency = \"CHF\"\n                }\n            };\n        }\n        if (isoCode.Equals(\"IT\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                PlatformFee = 500m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = 0m,\n                OneOffOnboardingFeePercentage = null,\n                OneOffOffboardingFeeNominal = 0m,\n                OneOffOffboardingFeePercentage = null,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (isoCode.Equals(\"BE\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 25m,\n                HRSupportAmount = 0m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = 0m,\n                OneOffOnboardingFeePercentage = null,\n                OneOffOffboardingFeeNominal = 0m,\n                OneOffOffboardingFeePercentage = null,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (isoCode.Equals(\"SK\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 12m,\n\n                HRSupportAmount = 0m,\n                PayrollProcessingFeePercentage = 3m,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = 0m,\n                OneOffOffboardingFeeNominal = 0m,\n                PlatformFee = 500m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (isoCode.Equals(\"GB\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 7.7m,\n                HRSupportAmount = 0m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12m,\n                SpecialPricesNominal = 0m,\n                SpecialPricesPercentage = null,\n                OneOffOnboardingFeeNominal = null,\n                OneOffOnboardingFeePercentage = 0m,\n                OneOffOffboardingFeeNominal = null,\n                OneOffOffboardingFeePercentage = 0m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (isoCode.Equals(\"GB-ENG\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 36.0m,\n                OccupationalHealthAndSafety = 30.0m,\n                MedicalLeave = 32.1m,\n                SeveranceCost = 12.0m,\n                HRSupportAmount = 34.1m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 12.0m,\n                OneOffOnboardingFeeNominal = 12.0m,\n                OneOffOnboardingFeePercentage = null,\n                OneOffOffboardingFeeNominal = 12.0m,\n                OneOffOffboardingFeePercentage = null,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (isoCode.Equals(\"IE\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 5.8m,\n                HRSupportAmount = 12m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = null,\n                OneOffOnboardingFeePercentage = 0m,\n                OneOffOffboardingFeeNominal = null,\n                OneOffOffboardingFeePercentage = 0m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (isoCode.Equals(\"LU\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 1m,\n                HRSupportAmount = 12m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = null,\n                OneOffOnboardingFeePercentage = 0m,\n                OneOffOffboardingFeeNominal = null,\n                OneOffOffboardingFeePercentage = 0m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (isoCode.Equals(\"PT\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 7.69230769230769m,\n                HRSupportAmount = 12m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,"}
{"text": "// file: src/Remundo.Pricing.Tests/Fakes/FakeHttpService.cs\n// service: src\n{\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 1m,\n                HRSupportAmount = 12m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = null,\n                OneOffOnboardingFeePercentage = 0m,\n                OneOffOffboardingFeeNominal = null,\n                OneOffOffboardingFeePercentage = 0m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (isoCode.Equals(\"PT\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 7.69230769230769m,\n                HRSupportAmount = 12m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = null,\n                OneOffOnboardingFeePercentage = 0m,\n                OneOffOffboardingFeeNominal = null,\n                OneOffOffboardingFeePercentage = 0m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (isoCode.Equals(\"ES\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 12.69m,\n                HRSupportAmount = 12m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = null,\n                OneOffOnboardingFeePercentage = 0m,\n                OneOffOffboardingFeeNominal = null,\n                OneOffOffboardingFeePercentage = 0m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (isoCode == \"DE\")\n        {\n            return new PricingRules\n            {\n                MSPFee = 0m,\n                PlatformFeePercentage = 8m,\n                ProfessionalIndemnity = 1.0m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 4.17m,\n                HRSupportAmount = 0m,\n                PayrollProcessingFee = 0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                PlatformFee = 0m,\n                OneOffOnboardingFeeNominal = 0m,\n                OneOffOnboardingFeePercentage = null,\n                OneOffOffboardingFeeNominal = 0m,\n                OneOffOffboardingFeePercentage = null,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (isoCode == \"CY\")\n        {\n            return new PricingRules\n            {\n                MSPFee = 0m,\n                PlatformFeePercentage = 8m,\n                ProfessionalIndemnity = 1.0m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 3.85m,\n                HRSupportAmount = 0m,\n                PayrollProcessingFee = 0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                PlatformFee = 0m,\n                OneOffOnboardingFeeNominal = 0m,\n                OneOffOnboardingFeePercentage = null,\n                OneOffOffboardingFeeNominal = 0m,\n                OneOffOffboardingFeePercentage = null,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (isoCode == \"HR\")\n        {\n            return new PricingRules\n            {\n                MSPFee = 0m,\n                ProfessionalIndemnity = 1.0m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 8.33m,\n                HRSupportAmount = 0m,\n                PayrollProcessingFee = 0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                PlatformFee = 0m,\n                OneOffOnboardingFeeNominal = 0m,\n                OneOffOnboardingFeePercentage = null,\n                OneOffOffboardingFeeNominal = 0m,\n                OneOffOffboardingFeePercentage = null,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (isoCode == \"CZ\")\n        {\n            return new PricingRules\n            {\n                MSPFee = 0m,\n                PlatformFeePercentage = 8m,\n                ProfessionalIndemnity = 1.0m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 8.3333m,\n                HRSupportAmount = 0m,\n                PayrollProcessingFee = 0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                PlatformFee = 0m,\n                OneOffOnboardingFeeNominal = 0m,\n                OneOffOnboardingFeePercentage = null,\n                OneOffOffboardingFeeNominal = 0m,\n                OneOffOffboardingFeePercentage = null,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (isoCode == \"NL\")\n        {\n            return new PricingRules\n            {\n                MSPFee = 0m,\n                PlatformFeePercentage = 8m,\n                ProfessionalIndemnity = 1.0m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 2.78m,\n                HRSupportAmount = 370m,"}
{"text": "// file: src/Remundo.Pricing.Tests/Fakes/FakeHttpService.cs\n// service: src\nreturn new PricingRules\n            {\n                MSPFee = 0m,\n                PlatformFeePercentage = 8m,\n                ProfessionalIndemnity = 1.0m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 8.3333m,\n                HRSupportAmount = 0m,\n                PayrollProcessingFee = 0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                PlatformFee = 0m,\n                OneOffOnboardingFeeNominal = 0m,\n                OneOffOnboardingFeePercentage = null,\n                OneOffOffboardingFeeNominal = 0m,\n                OneOffOffboardingFeePercentage = null,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (isoCode == \"NL\")\n        {\n            return new PricingRules\n            {\n                MSPFee = 0m,\n                PlatformFeePercentage = 8m,\n                ProfessionalIndemnity = 1.0m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 2.78m,\n                HRSupportAmount = 370m,\n                PayrollProcessingFee = 90m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                PlatformFee = 0m,\n                OneOffOnboardingFeeNominal = 0m,\n                OneOffOnboardingFeePercentage = null,\n                OneOffOffboardingFeeNominal = 0m,\n                OneOffOffboardingFeePercentage = null,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"EUR\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"EUR\"\n                }\n            };\n        }\n        if (isoCode == \"DK\")\n        {\n            return new PricingRules\n            {\n                MSPFee = 0m,\n                PlatformFeePercentage = 8m,\n                ProfessionalIndemnity = 1.0m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 8.33m,\n                HRSupportAmount = 2720m,\n                PayrollProcessingFee = 680m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                PlatformFee = 0m,\n                OneOffOnboardingFeeNominal = 0m,\n                OneOffOnboardingFeePercentage = null,\n                OneOffOffboardingFeeNominal = 0m,\n                OneOffOffboardingFeePercentage = null,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"EUR\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"EUR\"\n                }\n            };\n        }\n\n\n        return new PricingRules\n        {\n            ProfessionalIndemnity = 36.0m,\n            OccupationalHealthAndSafety = 30.0m,\n            MedicalLeave = 32.1m,\n            SeveranceCost = 12.0m,\n            HRSupportAmount = 34.1m,\n            PlatformFee = 500m,\n            PayrollProcessingFee = 12.0m,\n            SpecialPricesNominal = null,\n            SpecialPricesPercentage = 12.0m,\n            OneOffOnboardingFeeNominal = 12.0m,\n            OneOffOnboardingFeePercentage = null,\n            OneOffOffboardingFeeNominal = 12.0m,\n            OneOffOffboardingFeePercentage = null,\n            PremiumMedicalInsurance = new Insurance\n            {\n                Value = 1000,\n                Currency = \"GBP\"\n            },\n            DentalInsurance = new Insurance\n            {\n                Value = 1000,\n                Currency = \"GBP\"\n            }\n        };\n    }\n\n\n    public Task PostAsync(JsonObject obj)\n    {\n        return Task.CompletedTask;\n    }\n\n    Task<T> IHttpService.GetAsync<T>(string path)\n    {\n        if (path.Contains(\"/reference-data/pricingrules/employee/\"))\n        {\n            #region pricing rules\n            var split = path.Split('/');\n            var orgId = split[^1];\n            var isoCode = split[^3];\n            return Task.FromResult((T)Convert.ChangeType(GetFakePricingRule(isoCode, orgId), typeof(T)));\n            #endregion\n        }\n\n        if (path.Contains(\"/workingdays?\"))\n        {\n            return Task.FromResult((T)Convert.ChangeType(232, typeof(T)));\n        }\n\n        if (path.Contains(\"templates\"))\n        {\n            if (path.Contains(\"GB\") || path.Contains(\"CY\") || path.Contains(\"default\") || path.Contains(\"NL\") || path.Contains(\"DK\"))\n            {\n                return Task.FromResult((T)Convert.ChangeType(new TemplateInsurance\n                {\n                    Id = \"template-123\",\n                    TenantId = \"tenant-abc\",\n                    Name = \"Basic Insurance Template\",\n                    SubmitterId = \"admin\",\n                    SubmittedAt = DateTime.UtcNow,\n                    BasicInsurancePrices = new InsurancePrices\n                    {\n                        Medical = new Dictionary<CoverageTier, int>\n                        {\n                            { CoverageTier.WorkerOnly, 100 },\n                            { CoverageTier.WorkerAndSpouse, 200 }\n                        },\n                        Dental = new Dictionary<CoverageTier, int>\n                        {\n                            { CoverageTier.WorkerOnly, 120 },\n                            { CoverageTier.WorkerAndSpouse, 220 }\n                        }\n                    },\n                    StandardInsurancePrices = new InsurancePrices\n                    {\n                        Medical = new Dictionary<CoverageTier, int>\n                        {\n                            { CoverageTier.WorkerOnly, 123 }\n                        }\n                    },\n                    PremiumInsurancePrices = null,\n                    BasicInsuranceInfoTip = null,\n                    BasicInsuranceDisclaimer = null,\n                    BasicInsuranceAttachments = null,\n                    StandardInsuranceInfoTip = null,\n                    StandardInsuranceDisclaimer = null,\n                    StandardInsuranceAttachments = null,\n                    PremiumInsuranceInfoTip = null,\n                    PremiumInsuranceDisclaimer = null,\n                    PremiumInsuranceAttachments = null,\n                    Type = \"Template\",\n                    HasAttachments = false,\n                    Enabled = true,\n                    AppliedCountries = new HashSet<string> { \"CL\" },\n                    Applies = DateTime.UtcNow\n                }, typeof(T)));\n            }\n\n            return Task.FromResult((T)Convert.ChangeType(null, typeof(T)));\n        }\n\n        if (path.Contains(\"/currencies/exchange-rates/\"))\n        {\n            var split = path.Split('/');\n            var to = split[^1];\n            var from = split[^2];\n            return Task.FromResult((T)Convert.ChangeType(GetFake(from, to), typeof(T)));\n        }\n\n        if (path.Contains(\"/eorinstances/\"))\n        {\n            return Task.FromResult((T)Convert.ChangeType(new EorInstance\n            {\n                GrossSalaryElements = new Dictionary<string, decimal> { { \"Abc\", 1 } },\n                EmployerCostElements = new Dictionary<string, decimal> { { \"Def\", 2 } },\n                MonthlyTenantCosts = new Dictionary<string, decimal> { { \"Ghi\", 3 } },\n                MonthlyExtraCosts = new Dictionary<string, decimal> { { \"Jkl\", 4 } }\n            }, typeof(T)));\n        }\n\n        return Task.FromResult((T)Convert.ChangeType(null, typeof(T)));\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/Fakes/FakeHttpServiceOriginal.cs\n// service: src\n﻿using Remundo.Pricing.Domain.Aggregates.Entities;\nusing Remundo.Pricing.Domain.Services;\nusing System.Text.Json.Nodes;\n\nnamespace Remundo.Pricing.Tests.Fakes;\n\n///// WHY DO WE HAVE TWO OF THESE\npublic class FakeHttpServiceOriginal : IHttpService \n{\n    private static readonly IDictionary<string, decimal> _exchangeRates = new Dictionary<string, decimal>\n    {\n        { \"INR-EUR\", 0.011835m },\n        { \"INR-USD\", 0.012237m },\n        { \"EUR-EUR\", 1 },\n        { \"USD-EUR\", 0.967154m },\n        { \"GBP-EUR\", 1.15m },\n        { \"GBP-USD\", 1.25m },\n        { \"GBP-BGN\", 2.35m },\n        { \"EUR-BGN\", 1.96m },\n        { \"BGN-USD\", 0.57m }\n    };\n    private static decimal GetFake(string fromCurrencyIsoCode, string toCurrencyIsoCode)\n    {\n        if (fromCurrencyIsoCode == toCurrencyIsoCode)\n            return 1m; \n\n        if (!_exchangeRates.ContainsKey($\"{fromCurrencyIsoCode}-{toCurrencyIsoCode}\") && !_exchangeRates.ContainsKey($\"{toCurrencyIsoCode}-{fromCurrencyIsoCode}\"))\n            throw new Exception($\"required exchange rate '{fromCurrencyIsoCode}-{toCurrencyIsoCode}' not found\");\n\n        if (fromCurrencyIsoCode == \"INR\" && toCurrencyIsoCode == \"EUR\") return _exchangeRates.ContainsKey(\"INR-EUR\") ? _exchangeRates[\"INR-EUR\"] : 1 / _exchangeRates[\"EUR-INR\"];\n        if (fromCurrencyIsoCode == \"INR\" && toCurrencyIsoCode == \"USD\") return _exchangeRates.ContainsKey(\"INR-USD\") ? _exchangeRates[\"INR-USD\"] : 1 / _exchangeRates[\"USD-INR\"];\n        if (fromCurrencyIsoCode == \"EUR\" && toCurrencyIsoCode == \"EUR\") return _exchangeRates[\"EUR-EUR\"];\n\n        if (fromCurrencyIsoCode == \"EUR\" && toCurrencyIsoCode == \"INR\") return _exchangeRates.ContainsKey(\"EUR-INR\") ? _exchangeRates[\"EUR-INR\"] : 1 / _exchangeRates[\"INR-EUR\"];\n        if (fromCurrencyIsoCode == \"EUR\" && toCurrencyIsoCode == \"USD\") return _exchangeRates.ContainsKey(\"EUR-USD\") ? _exchangeRates[\"EUR-USD\"] : 1 / _exchangeRates[\"USD-EUR\"];\n        if (fromCurrencyIsoCode == \"USD\" && toCurrencyIsoCode == \"INR\") return _exchangeRates.ContainsKey(\"USD-INR\") ? _exchangeRates[\"USD-INR\"] : 1 / _exchangeRates[\"INR-USD\"];\n        if (fromCurrencyIsoCode == \"USD\" && toCurrencyIsoCode == \"EUR\") return _exchangeRates.ContainsKey(\"USD-EUR\") ? _exchangeRates[\"USD-EUR\"] : 1 / _exchangeRates[\"EUR-USD\"];\n\n        return 1m;\n    }\n\n    public Task<decimal> GetExchangeRateAsync(string from, string to)\n    {\n        return Task.FromResult(GetFake(from, to));\n    }\n\n    public PricingRules GetPricingRules(string tenantId, string isoCode, string orgId)\n    {\n        return GetFakePricingRule(tenantId, isoCode, orgId);\n    }\n\n    private PricingRules GetFakePricingRule(string tenantId, string isoCode, string orgId)\n    {\n        if (isoCode == \"DE\")\n        {\n            return new PricingRules\n            {\n                MSPFee = 0m,\n                PlatformFeePercentage = 8m,\n                ProfessionalIndemnity = 1.0m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 4.17m,\n                HRSupportAmount = 0m,\n                PayrollProcessingFee = 0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                PlatformFee = 0m,\n                OneOffOnboardingFeeNominal = 0m,\n                OneOffOnboardingFeePercentage = null,\n                OneOffOffboardingFeeNominal = 0m,\n                OneOffOffboardingFeePercentage = null,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (orgId != null && orgId.Equals(\"has mspFee\"))\n        {\n            return new PricingRules\n            {\n                MSPFee = 2.6m,\n                PlatformFeePercentage = 8m,\n                ProfessionalIndemnity = 36.0m,\n                OccupationalHealthAndSafety = 30.0m,\n                MedicalLeave = 32.1m,\n                SeveranceCost = 12.0m,\n                HRSupportAmount = 34.1m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 12.0m,\n                OneOffOnboardingFeeNominal = 12.0m,\n                OneOffOnboardingFeePercentage = null,\n                OneOffOffboardingFeeNominal = 12.0m,\n                OneOffOffboardingFeePercentage = null,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        if (orgId != null && orgId.Equals(\"123\"))\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 36.0m,\n                OccupationalHealthAndSafety = 30.0m,\n                MedicalLeave = 32.1m,\n                SeveranceCost = 12.0m,\n                HRSupportAmount = 12m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 12.0m,\n                OneOffOnboardingFeeNominal = null,\n                OneOffOnboardingFeePercentage = 12.0m,\n                OneOffOffboardingFeeNominal = null,\n                OneOffOffboardingFeePercentage = 12.0m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        else if (orgId != null && orgId.Equals(\"456\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 7.7m,\n                HRSupportAmount = 12m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = null,\n                OneOffOnboardingFeePercentage = 0m,\n                OneOffOffboardingFeeNominal = null,\n                OneOffOffboardingFeePercentage = 0m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        else if (orgId != null && orgId.Equals(\"789\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 7.7m,\n                HRSupportAmount = 12m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = null,\n                OneOffOnboardingFeePercentage = 0m,\n                OneOffOffboardingFeeNominal = null,\n                OneOffOffboardingFeePercentage = 0m,\n                DepositFactor = 5m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        else if (orgId != null && orgId.Equals(\"Platform is percentage\"))\n        {\n            return new PricingRules\n            {\n                PlatformFeePercentage = 15m,\n                PayrollProcessingFeePercentage = 10,\n                HRSupportAmountPercentage = 5,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        else if (orgId != null && orgId.Equals(\"Platform is fixed fee\"))"}
{"text": "// file: src/Remundo.Pricing.Tests/Fakes/FakeHttpServiceOriginal.cs\n// service: src\nPayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = null,\n                OneOffOnboardingFeePercentage = 0m,\n                OneOffOffboardingFeeNominal = null,\n                OneOffOffboardingFeePercentage = 0m,\n                DepositFactor = 5m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        else if (orgId != null && orgId.Equals(\"Platform is percentage\"))\n        {\n            return new PricingRules\n            {\n                PlatformFeePercentage = 15m,\n                PayrollProcessingFeePercentage = 10,\n                HRSupportAmountPercentage = 5,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        else if (orgId != null && orgId.Equals(\"Platform is fixed fee\"))\n        {\n            return new PricingRules\n            {\n                PlatformFee = 500m,\n                PayrollProcessingFee = 100m,\n                HRSupportAmount = 100m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        else if (orgId != null && orgId.Equals(\"domain\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 7.7m,\n                HRSupportAmount = 12m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = null,\n                OneOffOnboardingFeePercentage = 0m,\n                OneOffOffboardingFeeNominal = null,\n                OneOffOffboardingFeePercentage = 0m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        else if (isoCode.Equals(\"GB\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 7.7m,\n                HRSupportAmount = 12m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = 0m,\n                SpecialPricesPercentage = null,\n                OneOffOnboardingFeeNominal = null,\n                OneOffOnboardingFeePercentage = 0m,\n                OneOffOffboardingFeeNominal = null,\n                OneOffOffboardingFeePercentage = 0m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        else if (isoCode.Equals(\"GB-ENG\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 7.7m,\n                HRSupportAmount = 12m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = null,\n                OneOffOnboardingFeePercentage = 0m,\n                OneOffOffboardingFeeNominal = null,\n                OneOffOffboardingFeePercentage = 0m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        else if (isoCode.Equals(\"IE\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 5.8m,\n                HRSupportAmount = 12m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = null,\n                OneOffOnboardingFeePercentage = 0m,\n                OneOffOffboardingFeeNominal = null,\n                OneOffOffboardingFeePercentage = 0m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        else if (isoCode.Equals(\"LU\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 1m,\n                HRSupportAmount = 12m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = null,\n                OneOffOnboardingFeePercentage = 0m,\n                OneOffOffboardingFeeNominal = null,\n                OneOffOffboardingFeePercentage = 0m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        else if (isoCode.Equals(\"PT\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 7.69230769230769m,\n                HRSupportAmount = 12m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = null,\n                OneOffOnboardingFeePercentage = 0m,\n                OneOffOffboardingFeeNominal = null,\n                OneOffOffboardingFeePercentage = 0m,"}
{"text": "// file: src/Remundo.Pricing.Tests/Fakes/FakeHttpServiceOriginal.cs\n// service: src\nMedicalLeave = 3m,\n                SeveranceCost = 1m,\n                HRSupportAmount = 12m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = null,\n                OneOffOnboardingFeePercentage = 0m,\n                OneOffOffboardingFeeNominal = null,\n                OneOffOffboardingFeePercentage = 0m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        else if (isoCode.Equals(\"PT\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 7.69230769230769m,\n                HRSupportAmount = 12m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = null,\n                OneOffOnboardingFeePercentage = 0m,\n                OneOffOffboardingFeeNominal = null,\n                OneOffOffboardingFeePercentage = 0m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        else if (isoCode.Equals(\"ES\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 12.69m,\n                HRSupportAmount = 12m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = null,\n                OneOffOnboardingFeePercentage = 0m,\n                OneOffOffboardingFeeNominal = null,\n                OneOffOffboardingFeePercentage = 0m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n\n        else if (isoCode.Equals(\"AT\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 1.53m,\n                HRSupportAmount = 500m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 140m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = 0m,\n                OneOffOnboardingFeePercentage = null,\n                OneOffOffboardingFeeNominal = 0m,\n                OneOffOffboardingFeePercentage = null,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        else if (isoCode.Equals(\"IT\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 7.69m,\n                HRSupportAmount = 500m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 140m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = 0m,\n                OneOffOnboardingFeePercentage = null,\n                OneOffOffboardingFeeNominal = 0m,\n                OneOffOffboardingFeePercentage = null,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        else if (isoCode.Equals(\"BE\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 25m,\n                HRSupportAmount = 0m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = 0m,\n                OneOffOnboardingFeePercentage = null,\n                OneOffOffboardingFeeNominal = 0m,\n                OneOffOffboardingFeePercentage = null,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        else if (isoCode.Equals(\"SK\"))\n        {\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 1m,\n                OccupationalHealthAndSafety = 1.5m,\n                MedicalLeave = 3m,\n                SeveranceCost = 12m,\n\n                HRSupportAmount = 0m,\n                PayrollProcessingFeePercentage = 3m,\n                SpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = 0m,\n                OneOffOffboardingFeeNominal = 0m,\n                PlatformFee = 500m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        else\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 36.0m,\n                OccupationalHealthAndSafety = 30.0m,\n                MedicalLeave = 32.1m,\n                SeveranceCost = 12.0m,\n                HRSupportAmount = 34.1m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 12.0m,\n                OneOffOnboardingFeeNominal = 12.0m,\n                OneOffOnboardingFeePercentage = null,\n                OneOffOffboardingFeeNominal = 12.0m,\n                OneOffOffboardingFeePercentage = null,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,"}
{"text": "// file: src/Remundo.Pricing.Tests/Fakes/FakeHttpServiceOriginal.cs\n// service: src\nSpecialPricesPercentage = 0m,\n                OneOffOnboardingFeeNominal = 0m,\n                OneOffOffboardingFeeNominal = 0m,\n                PlatformFee = 500m,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n        }\n        else\n            return new PricingRules\n            {\n                ProfessionalIndemnity = 36.0m,\n                OccupationalHealthAndSafety = 30.0m,\n                MedicalLeave = 32.1m,\n                SeveranceCost = 12.0m,\n                HRSupportAmount = 34.1m,\n                PlatformFee = 500m,\n                PayrollProcessingFee = 12.0m,\n                SpecialPricesNominal = null,\n                SpecialPricesPercentage = 12.0m,\n                OneOffOnboardingFeeNominal = 12.0m,\n                OneOffOnboardingFeePercentage = null,\n                OneOffOffboardingFeeNominal = 12.0m,\n                OneOffOffboardingFeePercentage = null,\n                PremiumMedicalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                },\n                DentalInsurance = new Insurance\n                {\n                    Value = 1000,\n                    Currency = \"GBP\"\n                }\n            };\n    }\n\n    public Task PostAsync(JsonObject obj)\n    {\n        return Task.CompletedTask;\n    }\n\n    Task<T> IHttpService.GetAsync<T>(string path)\n    {\n\n        if (path.Contains(\"/reference-data/pricingrules/employee/\"))\n        {\n            #region pricing rules\n            var split = path.Split('/');\n            var orgId = split[^1];\n            var isoCode = split[^3];\n            if (orgId.Equals(\"has mspFee\"))\n            {\n                return Task.FromResult((T)Convert.ChangeType(new PricingRules\n                {\n                    MSPFee = 2.6m,\n                    PlatformFeePercentage = 8m,\n                    ProfessionalIndemnity = 1.0m,\n                    OccupationalHealthAndSafety = 1.5m,\n                    MedicalLeave = 3m,\n                    SeveranceCost = 2.8m,\n                    HRSupportAmount = 0m,\n                    PlatformFee = 0m,\n                    PayrollProcessingFee = 0m,\n                    SpecialPricesNominal = null,\n                    SpecialPricesPercentage = 0m,\n                    OneOffOnboardingFeeNominal = null,\n                    OneOffOnboardingFeePercentage = 0m,\n                    OneOffOffboardingFeeNominal = null,\n                    OneOffOffboardingFeePercentage = 12.0m,\n                    PremiumMedicalInsurance = new Insurance\n                    {\n                        Value = 0,\n                        Currency = \"GBP\"\n                    },\n                    DentalInsurance = new Insurance\n                    {\n                        Value = 0,\n                        Currency = \"GBP\"\n                    }\n                }, typeof(T)));\n            }\n            if (isoCode.Equals(\"FR\"))\n                return Task.FromResult((T)Convert.ChangeType(new PricingRules\n                {\n                    ProfessionalIndemnity = 1.0m,\n                    OccupationalHealthAndSafety = 1.5m,\n                    MedicalLeave = 3m,\n                    SeveranceCost = 2.8m,\n                    HRSupportAmount = 0m,\n                    PlatformFee = 0m,\n                    PayrollProcessingFee = 0m,\n                    SpecialPricesNominal = null,\n                    SpecialPricesPercentage = 0m,\n                    OneOffOnboardingFeeNominal = null,\n                    OneOffOnboardingFeePercentage = 0m,\n                    OneOffOffboardingFeeNominal = null,\n                    OneOffOffboardingFeePercentage = 12.0m,\n                    PremiumMedicalInsurance = new Insurance\n                    {\n                        Value = 0,\n                        Currency = \"GBP\"\n                    },\n                    DentalInsurance = new Insurance\n                    {\n                        Value = 0,\n                        Currency = \"GBP\"\n                    }\n                }, typeof(T)));\n            if (orgId.Equals(\"123\"))\n                return Task.FromResult((T)Convert.ChangeType(new PricingRules\n                {\n                    ProfessionalIndemnity = 36.0m,\n                    OccupationalHealthAndSafety = 30.0m,\n                    MedicalLeave = 32.1m,\n                    SeveranceCost = 12.0m,\n                    HRSupportAmount = 34.1m,\n                    PlatformFee = 500m,\n                    PayrollProcessingFee = 12.0m,\n                    SpecialPricesNominal = null,\n                    SpecialPricesPercentage = 12.0m,\n                    OneOffOnboardingFeeNominal = null,\n                    OneOffOnboardingFeePercentage = 12.0m,\n                    OneOffOffboardingFeeNominal = null,\n                    OneOffOffboardingFeePercentage = 12.0m,\n                    PremiumMedicalInsurance = new Insurance\n                    {\n                        Value = 1000,\n                        Currency = \"GBP\"\n                    },\n                    DentalInsurance = new Insurance\n                    {\n                        Value = 1000,\n                        Currency = \"GBP\"\n                    }\n                }, typeof(T)));\n            else if (orgId.Equals(\"456\"))\n            {\n                return Task.FromResult((T)Convert.ChangeType(new PricingRules\n                {\n                    ProfessionalIndemnity = 1m,\n                    OccupationalHealthAndSafety = 1.5m,\n                    MedicalLeave = 3m,\n                    SeveranceCost = 7.7m,\n                    HRSupportAmount = 12m,\n                    PlatformFee = 500m,\n                    PayrollProcessingFee = 12.0m,\n                    SpecialPricesNominal = null,\n                    SpecialPricesPercentage = 0m,\n                    OneOffOnboardingFeeNominal = null,\n                    OneOffOnboardingFeePercentage = 0m,\n                    OneOffOffboardingFeeNominal = null,\n                    OneOffOffboardingFeePercentage = 0m,\n                    PremiumMedicalInsurance = new Insurance\n                    {\n                        Value = 1000,\n                        Currency = \"GBP\"\n                    },\n                    DentalInsurance = new Insurance\n                    {\n                        Value = 1000,\n                        Currency = \"GBP\"\n                    }\n                }, typeof(T)));\n            }\n            else if (orgId.Equals(\"IE\"))\n            {\n                return Task.FromResult((T)Convert.ChangeType(new PricingRules\n                {\n                    ProfessionalIndemnity = 1m,\n                    OccupationalHealthAndSafety = 1.5m,\n                    MedicalLeave = 3m,\n                    SeveranceCost = 5.8m,\n                    HRSupportAmount = 12m,\n                    PlatformFee = 500m,\n                    PayrollProcessingFee = 12.0m,\n                    SpecialPricesNominal = null,\n                    SpecialPricesPercentage = 0m,\n                    OneOffOnboardingFeeNominal = null,\n                    OneOffOnboardingFeePercentage = 0m,\n                    OneOffOffboardingFeeNominal = null,\n                    OneOffOffboardingFeePercentage = 0m,\n                    PremiumMedicalInsurance = new Insurance\n                    {\n                        Value = 1000,\n                        Currency = \"GBP\"\n                    },\n                    DentalInsurance = new Insurance\n                    {\n                        Value = 1000,\n                        Currency = \"GBP\"\n                    }\n                }, typeof(T)));\n            }\n            else if (orgId.Equals(\"LU\"))\n            {\n                return Task.FromResult((T)Convert.ChangeType(new PricingRules\n                {\n                    ProfessionalIndemnity = 1m,\n                    OccupationalHealthAndSafety = 1.5m,\n                    MedicalLeave = 3m,\n                    SeveranceCost = 1m,\n                    HRSupportAmount = 12m,\n                    PlatformFee = 500m,\n                    PayrollProcessingFee = 12.0m,\n                    SpecialPricesNominal = null,\n                    SpecialPricesPercentage = 0m,\n                    OneOffOnboardingFeeNominal = null,\n                    OneOffOnboardingFeePercentage = 0m,\n                    OneOffOffboardingFeeNominal = null,\n                    OneOffOffboardingFeePercentage = 0m,\n                    PremiumMedicalInsurance = new Insurance"}
{"text": "// file: src/Remundo.Pricing.Tests/Fakes/FakeHttpServiceOriginal.cs\n// service: src\nSeveranceCost = 5.8m,\n                    HRSupportAmount = 12m,\n                    PlatformFee = 500m,\n                    PayrollProcessingFee = 12.0m,\n                    SpecialPricesNominal = null,\n                    SpecialPricesPercentage = 0m,\n                    OneOffOnboardingFeeNominal = null,\n                    OneOffOnboardingFeePercentage = 0m,\n                    OneOffOffboardingFeeNominal = null,\n                    OneOffOffboardingFeePercentage = 0m,\n                    PremiumMedicalInsurance = new Insurance\n                    {\n                        Value = 1000,\n                        Currency = \"GBP\"\n                    },\n                    DentalInsurance = new Insurance\n                    {\n                        Value = 1000,\n                        Currency = \"GBP\"\n                    }\n                }, typeof(T)));\n            }\n            else if (orgId.Equals(\"LU\"))\n            {\n                return Task.FromResult((T)Convert.ChangeType(new PricingRules\n                {\n                    ProfessionalIndemnity = 1m,\n                    OccupationalHealthAndSafety = 1.5m,\n                    MedicalLeave = 3m,\n                    SeveranceCost = 1m,\n                    HRSupportAmount = 12m,\n                    PlatformFee = 500m,\n                    PayrollProcessingFee = 12.0m,\n                    SpecialPricesNominal = null,\n                    SpecialPricesPercentage = 0m,\n                    OneOffOnboardingFeeNominal = null,\n                    OneOffOnboardingFeePercentage = 0m,\n                    OneOffOffboardingFeeNominal = null,\n                    OneOffOffboardingFeePercentage = 0m,\n                    PremiumMedicalInsurance = new Insurance\n                    {\n                        Value = 1000,\n                        Currency = \"GBP\"\n                    },\n                    DentalInsurance = new Insurance\n                    {\n                        Value = 1000,\n                        Currency = \"GBP\"\n                    }\n                }, typeof(T)));\n            }\n            else\n                return Task.FromResult((T)Convert.ChangeType(new PricingRules\n                {\n                    ProfessionalIndemnity = 36.0m,\n                    OccupationalHealthAndSafety = 30.0m,\n                    MedicalLeave = 32.1m,\n                    SeveranceCost = 12.0m,\n                    HRSupportAmount = 34.1m,\n                    PlatformFee = 500m,\n                    PayrollProcessingFee = 12.0m,\n                    SpecialPricesNominal = null,\n                    SpecialPricesPercentage = 12.0m,\n                    OneOffOnboardingFeeNominal = 12.0m,\n                    OneOffOnboardingFeePercentage = null,\n                    OneOffOffboardingFeeNominal = 12.0m,\n                    OneOffOffboardingFeePercentage = null,\n                    PremiumMedicalInsurance = new Insurance\n                    {\n                        Value = 1000,\n                        Currency = \"GBP\"\n                    },\n                    DentalInsurance = new Insurance\n                    {\n                        Value = 1000,\n                        Currency = \"GBP\"\n                    }\n                }, typeof(T)));\n            #endregion\n        }\n\n        if (path.Contains(\"/workingdays?\"))\n        {\n            return Task.FromResult((T)Convert.ChangeType(232, typeof(T)));\n        }\n\n        if (path.Contains(\"/currencies/exchange-rates/\"))\n        {\n            var split = path.Split('/');\n            var to = split[^1];\n            var from = split[^2];\n            return Task.FromResult((T)Convert.ChangeType(GetFake(from, to), typeof(T)));\n        }\n\n        return Task.FromResult((T)Convert.ChangeType(null, typeof(T)));\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/Fakes/InMemoryDomainRepository.cs\n// service: src\n﻿using Evento;\n\nnamespace Remundo.Pricing.Tests.Fakes\n{\n    public class InMemoryDomainRepository : IDomainRepository\n    {\n        private readonly Dictionary<string, List<Event>> _eventStore = new Dictionary<string, List<Event>>();\n        private IAggregate _aggregate;\n\n        public Dictionary<string, List<Event>> EventStore => _eventStore;\n        public IEnumerable<Event> Save<TAggregate>(TAggregate aggregate) where TAggregate : IAggregate\n        {\n            var uncommittedEvents = aggregate.UncommitedEvents().ToList();\n            if (!_eventStore.ContainsKey(aggregate.AggregateId))\n            {\n                _eventStore.Add(aggregate.AggregateId, aggregate.UncommitedEvents().ToList());\n            }\n            else\n            {\n                _eventStore[aggregate.AggregateId].AddRange(aggregate.UncommitedEvents().ToList());\n            }\n            aggregate.ClearUncommitedEvents();\n            _aggregate = aggregate;\n            return uncommittedEvents;\n        }\n\n        public Task<IEnumerable<Event>> SaveAsync<TAggregate>(TAggregate aggregate) where TAggregate : IAggregate\n        {\n            var uncommittedEvents = aggregate.UncommitedEvents().ToList();\n            if (!_eventStore.ContainsKey(aggregate.AggregateId))\n            {\n                _eventStore.Add(aggregate.AggregateId, aggregate.UncommitedEvents().ToList());\n            }\n            else\n            {\n                _eventStore[aggregate.AggregateId].AddRange(aggregate.UncommitedEvents().ToList());\n            }\n            aggregate.ClearUncommitedEvents();\n            _aggregate = aggregate;\n            return new Task<IEnumerable<Event>>(uncommittedEvents.AsEnumerable);\n        }\n\n        public TResult GetById<TResult>(string correlationId) where TResult : IAggregate, new()\n        {\n            if (_aggregate != null && _aggregate.AggregateId.EndsWith(correlationId))\n                return (TResult)_aggregate;\n            throw new AggregateNotFoundException(\"inmemory\");\n        }\n\n        public TResult GetById<TResult>(string correlationId, int eventsToLoad) where TResult : IAggregate, new()\n        {\n            if (_aggregate != null && _aggregate.AggregateId.EndsWith(correlationId))\n                return (TResult)_aggregate;\n            throw new AggregateNotFoundException(\"inmemory\");\n        }\n\n        public void DeleteAggregate<TAggregate>(string correlationId, bool hard)\n        {\n\n        }\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/convert-to-EUR.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-GB-ENG\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"ToCurrencyIsoCode\": \"EUR\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/convert-to-GBP.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-GB-ENG\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"ToCurrencyIsoCode\": \"GBP\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/convert-to-USD.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-GB-ENG\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"ToCurrencyIsoCode\": \"USD\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/recalculateprice-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-GB-ENG\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"AnnualSalary\": 45000\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/recalculateprice-V2-GB-tenantCosts-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-GB-ENG\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"AnnualSalary\": 45000,\n    \"TenantId\": \"Amdocs\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Austria/pricing-austria-1_0.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-AT/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"ToCurrencyIsoCode\": \"EUR\",\n    \"DisabilityInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"LifeInsurance\": false,\n    \"Allowances\": {\n      \"X\": 12\n    }\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Austria/recalculateprice-AT-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-AT\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Belgium/pricing-belgium-1_0.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-BE/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"ToCurrencyIsoCode\": \"EUR\",\n    \"DisabilityInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"LifeInsurance\": false,\n    \"Allowances\": {\n      \"X\": 12\n    }\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Belgium/recalculateprice-BE-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-BE\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Bulgaria/pricing-bg-1_0-deposit-factor.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-BG/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"DeathInsuranceSelected\": false,\n    \"MedicalInsuranceSelected\": false,\n    \"DentalInsuranceSelected\": false,\n    \"OrganisationId\": \"789\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Bulgaria/pricing-bg-1_0.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-BG/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"ToCurrencyIsoCode\": \"EUR\",\n    \"DisabilityInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"LifeInsurance\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Bulgaria/pricing-bg-recalculate-tenantCosts.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-BG\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"123\",\n  \"Time\": \"2022-05-20T13:14:36.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"TenantId\": \"test\",\n    \"AnnualSalary\": 50000\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Bulgaria/pricing-bg-vesting-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-BG\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"123\",\n  \"Time\": \"2022-05-20T13:14:36.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 12,\n    \"VestingDataAmount\": 1000,\n    \"VestingDataCliffMonths\": 12,\n    \"VestingDataTotalMonths\": 15\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Bulgaria/pricing-bg-with-tenant-id-1_0.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-BG/1.0\",\n  \"data\": {\n    \"AnnualSalary\": 120000,\n    \"CorrelationId\": \"123\",\n    \"DisabilityInsurance\": false,\n    \"LifeInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"OrganisationId\": \"has mspFee\",\n    \"TenantId\": \"test\",\n    \"ToCurrencyIsoCode\": \"EUR\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Bulgaria/pricing-bg-wrongId-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-BG\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"123\",\n  \"Time\": \"2022-05-20T13:14:36.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"1234\",\n    \"OneOffDataAmount\": 12,\n    \"VestingDataAmount\": 1000,\n    \"VestingDataCliffMonths\": 12,\n    \"VestingDataTotalMonths\": 15\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Croatia/pricing-croatia-1_0.json\n// service: src\n{\n    \"type\": \"CalculatePrice\",\n    \"source\": \"pricing-Europe\",\n    \"id\": \"123\",\n    \"time\": \"2022-04-06T17:29:06.722Z\",\n    \"dataContentType\": \"application/json\",\n    \"dataSchema\": \"pricing-HR/1.0\",\n    \"data\": {\n        \"CorrelationId\": \"123\",\n        \"AnnualSalary\": 1000,\n        \"ToCurrencyIsoCode\": \"EUR\",\n        \"DisabilityInsurance\": false,\n        \"MedicalInsurance\": false,\n        \"LifeInsurance\": false,\n        \"Allowances\": {\n            \"X\": 12\n        }\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Croatia/recalculateprice-HR-1_0.json\n// service: src\n{\n    \"Type\": \"RecalculatePriceV2-HR\",\n    \"Source\": \"pricing-Europe\",\n    \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n    \"Time\": \"2022-05-20T13:14:35.926Z\",\n    \"DataContentType\": \"application/json\",\n    \"DataSchema\": \"recalculateprice/1.0\",\n    \"Data\": {\n        \"PriceId\": \"123\"\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Cyprus/pricing-CY-1_0-CurrencyV2.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-CY/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"Allowances\": { \"Car/Transportation\": 536 },\n    \"AnnualSalary\": 50000,\n    \"LifeInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"DisabilityInsurance\": false,\n    \"ToCurrencyIsoCode\": \"USD\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Cyprus/pricing-CY-1_0-deposit-factor.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-CY/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"DisabilityInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"LifeInsurance\": false,\n    \"OrganisationId\":  \"789\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Cyprus/pricing-CY-1_0-platformFee-fixed-fee.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"abcdefgh\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-CY/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"abc123\",\n    \"AnnualSalary\": 1000,\n    \"OrganisationId\": \"Platform is fixed fee\",\n    \"IsoCode\":  \"ES\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Cyprus/pricing-CY-1_0-platformFee-percentage.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"abcdefgh\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-CY/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"abc123\",\n    \"AnnualSalary\": 50000,\n    \"OrganisationId\": \"Platform is percentage\",\n    \"IsoCode\":  \"ES\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Cyprus/pricing-CY-1_0-pricecalculatedV2.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-CY/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"LifeInsuranceSelected\": false,\n    \"MedicalInsuranceSelected\": false,\n    \"DisabilityInsuranceSelected\": false,\n    \"DentalInsuranceSelected\": false,\n    \"DeathInsuranceSelected\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Cyprus/pricing-CY-1_0-RecalculatePrice-InsurancesV2-2.0.json\n// service: src\n{\n  \"type\": \"RecalculatePriceV2-CY\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"MedicalInsuranceNewSelected\": true,\n    \"DentalInsuranceSelected\": false,\n    \"DeathInsuranceSelected\": false,\n    \"SelectedInsuranceDetails\": {\n      \"Basic_MedicalInsurance_WorkerOnly\": true,\n      \"Basic_MedicalInsurance_WorkerAndSpouse\": false,\n      \"Basic_DentalInsurance_WorkerOnly\": false,\n      \"Basic_DentalInsurance_WorkerAndSpouse\": false,\n      \"Standard_MedicalInsurance_WorkerOnly\": false\n    }\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Cyprus/pricing-CY-1_0-RecalculatePrice-InsurancesV2.json\n// service: src\n{\n  \"type\": \"RecalculatePriceV2-CY\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"MedicalInsuranceNewSelected\": true,\n    \"DentalInsuranceSelected\": false,\n    \"DeathInsuranceSelected\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Cyprus/pricing-CY-1_0-RecalculatePrice-V1.json\n// service: src\n{\n  \"type\": \"RecalculatePrice-CY-V1\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"LifeInsurance\": true,\n    \"MedicalInsurance\": true,\n    \"DisabilityInsurance\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Cyprus/pricing-CY-1_0-RecalculatePrice.json\n// service: src\n{\n  \"type\": \"RecalculatePrice-CY\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"LifeInsurance\": true,\n    \"MedicalInsurance\": true,\n    \"DisabilityInsurance\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Cyprus/pricing-CY-1_0-RecalculatePriceNew.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-CY\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"95979a0f-e137-4d3c-a897-d9ba10486758\",\n  \"Time\": \"2023-01-26T12:00:20.274Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"LifeInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"DisabilityInsurance\": false,\n    \"MedicalInsuranceNew\": true,\n    \"DentalInsurance\": false,\n    \"DeathInsurance\": false,\n    \"CorrelationId\": \"062eadb6-fba5-4294-a494-82519cbe303c\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Cyprus/pricing-CY-1_0-removesigningbonus.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-CY\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 0,\n    \"VestingDataAmount\": 0,\n    \"VestingDataCliffMonths\": 12,\n    \"VestingDataTotalMonths\": 15\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Cyprus/pricing-CY-1_0-with-domain-and-allowances.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-CY/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"ToCurrencyIsoCode\": \"EUR\",\n    \"DisabilityInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"LifeInsurance\": false,\n    \"Allowances\": { \"Car/Transportation\": 536.00 },\n    \"OrganisationId\": \"CY\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Cyprus/pricing-CY-1_0.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-CY/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"Allowances\": { \"Car/Transportation\": 536 },\n    \"AnnualSalary\": 50000,\n    \"LifeInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"DisabilityInsurance\": false,\n    \"ToCurrencyIsoCode\": \"USD\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Cyprus/pricing-CY-removevesting-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-CY\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 12,\n    \"VestingDataAmount\": 0,\n    \"VestingDataCliffMonths\": 0,\n    \"VestingDataTotalMonths\": 0\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Cyprus/pricing-CY-signingbonus-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-CY\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 12,\n    \"VestingDataAmount\": 1000,\n    \"VestingDataCliffMonths\": 12,\n    \"VestingDataTotalMonths\": 15\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Cyprus/pricing-CY-signingbonus-2_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-CY\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 12\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Cyprus/pricing-CY-tenantCosts.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-CY/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"Allowances\": { \"Car/Transportation\": 536 },\n    \"AnnualSalary\": 50000,\n    \"ToCurrencyIsoCode\": \"USD\",\n    \"TenantId\": \"test\",\n    \"OrganisationId\": \"has mspFee\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Cyprus/pricing-CY-vesting-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-CY\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 12,\n    \"VestingDataAmount\": 1000,\n    \"VestingDataCliffMonths\": 12,\n    \"VestingDataTotalMonths\": 15\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Cyprus/recalculateprice-CY-tenantCosts.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-CY\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"ToCurrencyIsoCode\": \"USD\",\n    \"AnnualSalary\": 120000,\n    \"TenantId\":  \"test\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Cyprus/recalculateprice-CY-USD-10000.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-CY\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"ToCurrencyIsoCode\": \"USD\",\n    \"AnnualSalary\": 120000 \n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/CzechRepublic/pricing-CZ-1_0-pricecalculatedV2.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-CZ/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"LifeInsuranceSelected\": false,\n    \"MedicalInsuranceSelected\": false,\n    \"DisabilityInsuranceSelected\": false,\n    \"DentalInsuranceSelected\": false,\n    \"DeathInsuranceSelected\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/CzechRepublic/pricing-CZ-1_0-RecalculatePrice.json\n// service: src\n{\n  \"type\": \"RecalculatePriceV2-CZ\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"LifeInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"DisabilityInsurance\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Default/pricing-Default-1_0-CurrencyV2.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-Default/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"Allowances\": { \"Car/Transportation\": 536 },\n    \"AnnualSalary\": 50000,\n    \"LifeInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"DisabilityInsurance\": false,\n    \"ToCurrencyIsoCode\": \"USD\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Default/pricing-Default-1_0-platformFee-fixed-fee.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"abcdefgh\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-Default/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"abc123\",\n    \"AnnualSalary\": 1000,\n    \"OrganisationId\": \"Platform is fixed fee\",\n    \"IsoCode\":  \"GB\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Default/pricing-Default-1_0-platformFee-percentage.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"abcdefgh\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-Default/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"abc123\",\n    \"AnnualSalary\": 50000,\n    \"OrganisationId\": \"Platform is percentage\",\n    \"IsoCode\":  \"GB\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Default/pricing-Default-1_0-pricecalculatedV2.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-Default/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"LifeInsuranceSelected\": false,\n    \"MedicalInsuranceSelected\": true,\n    \"DisabilityInsuranceSelected\": false,\n    \"DentalInsuranceSelected\": false,\n    \"DeathInsuranceSelected\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Default/pricing-Default-1_0-RecalculatePrice-InsurancesV2.json\n// service: src\n{\n  \"type\": \"RecalculatePrice-Default\",\n  \"source\": \"pricing-Default\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"MedicalInsuranceNewSelected\": true,\n    \"DentalInsuranceSelected\": false,\n    \"DeathInsuranceSelected\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Default/pricing-Default-1_0-RecalculatePrice-V1.json\n// service: src\n{\n  \"type\": \"RecalculatePrice-Default\",\n  \"source\": \"pricing-Default\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"LifeInsurance\": true,\n    \"MedicalInsurance\": true,\n    \"DisabilityInsurance\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Default/pricing-Default-1_0-RecalculatePrice-v2.json\n// service: src\n{\n  \"type\": \"RecalculatePriceV2-Default\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"LifeInsurance\": false,\n    \"MedicalInsurance\": true,\n    \"DisabilityInsurance\": false,\n    \"IsoCode\": \"CH\",\n    \"LocalCurrency\": \"CHF\",\n    \"MedicalInsuranceSelected\": false,\n    \"TenantId\": \"XML-INT\",\n    \"ToCurrencyIsoCode\": \"CHF\",\n    \"OrganisationId\": \"Testing\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Default/pricing-Default-1_0-RecalculatePrice-v3.json\n// service: src\n{\n  \"type\": \"RecalculatePriceV2-Default\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"LifeInsurance\": false,\n    \"MedicalInsurance\": true,\n    \"DisabilityInsurance\": false,\n    \"IsoCode\": \"CH\",\n    \"LocalCurrency\": \"CHF\",\n    \"MedicalInsuranceSelected\": false,\n    \"TenantId\": \"XML-INT\",\n    \"ToCurrencyIsoCode\": \"EUR\",\n    \"OrganisationId\": \"Testing\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Default/pricing-Default-1_0-RecalculatePrice.json\n// service: src\n{\n  \"type\": \"RecalculatePriceV2-Default\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"LifeInsurance\": false,\n    \"MedicalInsurance\": true,\n    \"DisabilityInsurance\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Default/pricing-Default-1_0-RecalculatePriceNew.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-Default\",\n  \"Source\": \"pricing-Default\",\n  \"Id\": \"95979a0f-e137-4d3c-a897-d9ba10486758\",\n  \"Time\": \"2023-01-26T12:00:20.274Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"LifeInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"DisabilityInsurance\": false,\n    \"MedicalInsuranceNew\": true,\n    \"DentalInsurance\": false,\n    \"DeathInsurance\": false,\n    \"CorrelationId\": \"062eadb6-fba5-4294-a494-82519cbe303c\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Default/pricing-Default-1_0-removesigningbonus.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-Default\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 0,\n    \"VestingDataAmount\": 0,\n    \"VestingDataCliffMonths\": 12,\n    \"VestingDataTotalMonths\": 15\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Default/pricing-Default-1_0-v2.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-Default/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 50000,\n    \"LifeInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"DisabilityInsurance\": false,\n    \"IsoCode\": \"CH\",\n    \"LocalCurrencyIsoCode\": \"CHF\",\n    \"MedicalInsuranceSelected\": false,\n    \"TenantId\": \"XML-INT\",\n    \"ToCurrencyIsoCode\": \"CHF\",\n    \"OrganisationId\": \"Testing\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Default/pricing-Default-1_0-with-domain-and-allowances.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-Default/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"ToCurrencyIsoCode\": \"AFN\",\n    \"DisabilityInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"LifeInsurance\": false,\n    \"Allowances\": { \"Car/Transportation\": 536.0 },\n    \"OrganisationId\": \"domain\",\n    \"IsoCode\": \"AF\",\n    \"LocalCurrencyIsoCode\": \"AFN\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Default/pricing-Default-1_0-with-tenant-id.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-Default/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 60000,\n    \"TenantId\": \"Amdocs\",\n    \"OrganisationId\": \"has mspFee\",\n    \"IsoCode\": \"SE\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Default/pricing-Default-1_0-XXisocode.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-Default/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 50000,\n    \"LifeInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"DisabilityInsurance\": false,\n    \"IsoCode\": \"XX\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Default/pricing-Default-1_0.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-Default/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 50000,\n    \"LifeInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"DisabilityInsurance\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Default/pricing-Default-removevesting-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-Default\",\n  \"source\": \"pricing-Default\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 12,\n    \"VestingDataAmount\": 0,\n    \"VestingDataCliffMonths\": 0,\n    \"VestingDataTotalMonths\": 0\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Default/pricing-Default-signingbonus-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-Default\",\n  \"source\": \"pricing-Default\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 12,\n    \"VestingDataAmount\": 1000,\n    \"VestingDataCliffMonths\": 12,\n    \"VestingDataTotalMonths\": 15\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Default/pricing-Default-signingbonus-2_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-Default\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 12,\n    \"IsoCode\": \"AF\",\n    \"ToCurrencyIsoCode\": \"AFN\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Default/pricing-Default-vesting-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-Default\",\n  \"source\": \"pricing-Default\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 12,\n    \"VestingDataAmount\": 1000,\n    \"VestingDataCliffMonths\": 12,\n    \"VestingDataTotalMonths\": 15\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Default/recalculateprice-ES-USD-10000.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-Default\",\n  \"Source\": \"pricing-Default\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"ToCurrencyIsoCode\": \"USD\",\n    \"AnnualSalary\": 120000\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Default/recalculateprice-V2-Default-tenantCosts.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-Default\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"123\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"ToCurrencyIsoCode\": \"USD\",\n    \"AnnualSalary\": 120000,\n    \"TenantId\": \"Amdocs\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Denmark/pricing-DK-1_0.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-DK/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 48000,\n    \"ToCurrencyIsoCode\": \"DKK\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Denmark/recalculateprice-DK-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-DK\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-1000-one-off-bonus.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-GB-ENG\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 1000\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-15000.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-06-23T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-GB-ENG/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 15000,\n    \"ToCurrencyIsoCode\": \"GBP\",\n    \"DeathInsuranceSelected\": true\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-1_0.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-GB/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 50000,\n    \"ToCurrencyIsoCode\": \"GBP\",\n    \"DisabilityInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"LifeInsurance\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-bigger-than-100000.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-GB-ENG/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 150000,\n    \"ToCurrencyIsoCode\": \"GBP\",\n    \"LifeInsurance\": true,\n    \"MedicalInsurance\": true,\n    \"DisabilityInsurance\": true\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-convert-to-usd.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-GB-ENG/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 50000,\n    \"ToCurrencyIsoCode\": \"USD\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-england-1_0-all-insurances.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-GB-ENG\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"123\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"AnnualSalary\": 50000,\n    \"ToCurrencyIsoCode\": \"GBP\",\n    \"SelectedInsuranceDetails\": {\n      \"Basic_MedicalInsurance_WorkerOnly\": true,\n      \"Basic_MedicalInsurance_WorkerAndSpouse\": true,\n      \"Basic_DentalInsurance_WorkerOnly\": true,\n      \"Basic_DentalInsurance_WorkerAndSpouse\": true,\n      \"Standard_MedicalInsurance_WorkerOnly\": true\n    }\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-england-1_0-deposit-factor.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-GB-ENG/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"DeathInsuranceSelected\": false,\n    \"MedicalInsuranceSelected\": false,\n    \"DentalInsuranceSelected\": false,\n    \"OrganisationId\": \"789\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-england-1_0-Overhead.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-GB-ENG/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"Allowances\":  {\"Car/Transportation\":  536.00},\n    \"ToCurrencyIsoCode\": \"GBP\",\n    \"DisabilityInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"LifeInsurance\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-england-1_0-platformFee-fixed-fee.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"abcdefgh\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-GB-ENG/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"abc123\",\n    \"AnnualSalary\": 1000,\n    \"OrganisationId\": \"Platform is fixed fee\",\n    \"IsoCode\": \"GB\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-england-1_0-platformFee-percentage.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"abcdefgh\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-GB-ENG/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"abc123\",\n    \"AnnualSalary\": 50000,\n    \"OrganisationId\": \"Platform is percentage\",\n    \"IsoCode\": \"GB\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-england-1_0-under-nin-threshold.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-GB-ENG/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 7200,\n    \"ToCurrencyIsoCode\": \"GBP\",\n    \"DisabilityInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"LifeInsurance\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-england-1_0-uneven_pennies.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-GB-ENG/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 21386.58,\n    \"ToCurrencyIsoCode\": \"GBP\",\n    \"LifeInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"DisabilityInsurance\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-england-1_0-V2.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-GB-ENG/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 50000,\n    \"ToCurrencyIsoCode\": \"GBP\",\n    \"DisabilityInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"LifeInsurance\": false,\n    \"OrganisationId\": \"null-insurance-value\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-england-1_0-with-domain-60000.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-GB-ENG/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 60000,\n    \"ToCurrencyIsoCode\": \"GBP\",\n    \"DisabilityInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"LifeInsurance\": false,\n    \"OrganisationId\":  \"456\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-england-1_0-with-domain-and-allowances-with-insurances.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-GB-ENG\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 6000,\n    \"VestingDataAmount\": 0,\n    \"VestingDataCliffMonths\": 0,\n    \"VestingDataTotalMonths\": 0,\n    \"Allowances\": { \"Car/Transportation\": 536.00 },\n    \"OrganisationId\": \"456\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-england-1_0-with-domain-and-allowances.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-GB-ENG/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 21386.58,\n    \"ToCurrencyIsoCode\": \"GBP\",\n    \"DisabilityInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"LifeInsurance\": false,\n    \"Allowances\": { \"Car/Transportation\": 536.00 },\n    \"OrganisationId\": \"456\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-england-1_0-with-domain.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-GB-ENG/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"ToCurrencyIsoCode\": \"GBP\",\n    \"DisabilityInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"LifeInsurance\": false,\n    \"OrganisationId\":  \"123\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-england-1_0-with-tenant-id.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-GB-ENG/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 60000,\n    \"ToCurrencyIsoCode\": \"GBP\",\n    \"DisabilityInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"LifeInsurance\": false,\n    \"TenantId\": \"Amdocs\",\n    \"OrganisationId\":  \"has mspFee\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-england-1_0.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-GB-ENG/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 50000,\n    \"ToCurrencyIsoCode\": \"GBP\",\n    \"DisabilityInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"LifeInsurance\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-negative.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-GB-ENG/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": -50000,\n    \"ToCurrencyIsoCode\": \"GBP\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-oneoffdata-1.0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-GB-ENG\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 12,\n    \"VestingDataAmount\": 0,\n    \"VestingDataCliffMonths\": 0,\n    \"VestingDataTotalMonths\": 0\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-oneoffdata-2.0.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-GB-ENG\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 6000,\n    \"VestingDataAmount\": 0,\n    \"VestingDataCliffMonths\": 0,\n    \"VestingDataTotalMonths\": 0\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-oneoffdata-3.0.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-GB-ENG\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 6000,\n    \"VestingDataAmount\": 0,\n    \"VestingDataCliffMonths\": 0,\n    \"VestingDataTotalMonths\": 0,\n    \"SelectedInsuranceDetails\": {\n      \"Basic_MedicalInsurance_WorkerOnly\": true,\n      \"Basic_MedicalInsurance_WorkerAndSpouse\": false,\n      \"Basic_DentalInsurance_WorkerOnly\": false,\n      \"Basic_DentalInsurance_WorkerAndSpouse\": false,\n      \"Standard_MedicalInsurance_WorkerOnly\": false\n    }\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-removesigningbonus-1.0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-GB-ENG\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 0\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-removevesting-1.0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-GB-ENG\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"123\",\n  \"Time\": \"2022-05-20T13:14:36.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"VestingDataAmount\": 0,\n    \"VestingDataCliffMonths\": 0,\n    \"VestingDataTotalMonths\": 0\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-too-many-digits.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-06-23T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-GB-ENG/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 15000.23234232,\n    \"ToCurrencyIsoCode\": \"GBP\",\n    \"LifeInsurance\": true\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/pricing-uk-vesting-1.0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-GB-ENG\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"123\",\n  \"Time\": \"2022-05-20T13:14:36.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\":  12,\n    \"VestingDataAmount\": 1000,\n    \"VestingDataCliffMonths\": 12,\n    \"VestingDataTotalMonths\": 15\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/recalculateprice-V2-GB-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-GB\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"AnnualSalary\": 45000,\n    \"TenantId\": \"XML-INT\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/England/recalculateprice-V2-GB-ENG-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-GB-ENG\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"AnnualSalary\": 45000,\n    \"TenantId\": \"XML-INT\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/France/pricing-FR-1_0-deposit-factor.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-FR/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"DeathInsuranceSelected\": false,\n    \"MedicalInsuranceSelected\": false,\n    \"DentalInsuranceSelected\": false,\n    \"OrganisationId\": \"789\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/France/pricing-fr-1_0.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-FR/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"ToCurrencyIsoCode\": \"EUR\",\n    \"DisabilityInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"LifeInsurance\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/France/pricing-fr-recalculate-tenantCosts.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-FR\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"123\",\n  \"Time\": \"2022-05-20T13:14:36.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"TenantId\": \"test\",\n    \"AnnualSalary\": 50000\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/France/pricing-fr-vesting-1.0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-FR\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"123\",\n  \"Time\": \"2022-05-20T13:14:36.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\":  12,\n    \"VestingDataAmount\": 1000,\n    \"VestingDataCliffMonths\": 12,\n    \"VestingDataTotalMonths\": 15\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/France/pricing-fr-with-tenant-id-1_0.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-FR/1.0\",\n  \"data\": {\n    \"AnnualSalary\": 120000,\n    \"CorrelationId\": \"123\",\n    \"DisabilityInsurance\": false,\n    \"LifeInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"OrganisationId\": \"has mspFee\",\n    \"TenantId\": \"test\",\n    \"ToCurrencyIsoCode\": \"EUR\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/France/pricing-fr-wrongId-1.0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-FR\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"123\",\n  \"Time\": \"2022-05-20T13:14:36.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"1234\",\n    \"OneOffDataAmount\":  12,\n    \"VestingDataAmount\": 1000,\n    \"VestingDataCliffMonths\": 12,\n    \"VestingDataTotalMonths\": 15\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Germany/pricing-DE-1_0.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-DE/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"Allowances\": { },\n    \"AnnualSalary\": 120000,\n    \"LifeInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"DisabilityInsurance\": false  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Germany/recalculateprice-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-DE\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"Allowances\": {\n      \"X\": 12\n    }\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Ireland/pricing-IE-1_0-60000.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-IE/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 84000,\n    \"AnnualAdditionalSalary\": 0,\n    \"MedicalInsuranceSelected\": false,\n    \"DentalInsuranceSelected\": false,\n    \"DeathInsuranceSelected\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Ireland/pricing-IE-1_0-deposit-factor.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-IE/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"DeathInsuranceSelected\": false,\n    \"MedicalInsuranceSelected\": false,\n    \"DentalInsuranceSelected\": false,\n    \"OrganisationId\": \"789\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Ireland/pricing-IE-1_0-insurances.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-IE/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"AnnualAdditionalSalary\": 0,\n    \"MedicalInsuranceSelected\": true,\n    \"DentalInsuranceSelected\": true,\n    \"DeathInsuranceSelected\": true\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Ireland/pricing-IE-1_0-Overhead.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-IE/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"Allowances\": { \"Car\": 536 },\n    \"AnnualAdditionalSalary\": 0,\n    \"LifeInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"DisabilityInsurance\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Ireland/pricing-IE-1_0-platformFee-fixed-fee.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"abcdefgh\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-IE/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"abc123\",\n    \"AnnualSalary\": 1000,\n    \"OrganisationId\": \"Platform is fixed fee\",\n    \"IsoCode\":  \"IE\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Ireland/pricing-IE-1_0-platformFee-percentage.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"abcdefgh\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-IE/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"abc123\",\n    \"AnnualSalary\": 50000,\n    \"OrganisationId\": \"Platform is percentage\",\n    \"IsoCode\":  \"IE\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Ireland/pricing-IE-1_0-removesigningbonus.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-IE\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 0,\n    \"VestingDataAmount\": 1000,\n    \"VestingDataCliffMonths\": 12,\n    \"VestingDataTotalMonths\": 15\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Ireland/pricing-IE-1_0-tenantCosts.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-IE/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 50000,\n    \"TenantId\": \"test\",\n    \"OrganisationId\": \"has mspFee\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Ireland/pricing-IE-1_0-with-domain-and-allowances.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-IE/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"ToCurrencyIsoCode\": \"EUR\",\n    \"DisabilityInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"LifeInsurance\": false,\n    \"Allowances\": { \"Car/Transportation\": 536.00 },\n    \"OrganisationId\": \"IE\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Ireland/pricing-IE-1_0.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-IE/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 50000,\n    \"AnnualAdditionalSalary\": 0,\n    \"MedicalInsuranceSelected\": false,\n    \"DentalInsuranceSelected\": false,\n    \"DeathInsuranceSelected\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Ireland/pricing-IE-2_0.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-IE/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 50000,\n    \"AnnualAdditionalSalary\": 0,\n    \"MedicalInsuranceSelected\": false,\n    \"DentalInsuranceSelected\": false,\n    \"DeathInsuranceSelected\": false,\n    \"OrganisationId\": \"IE\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Ireland/pricing-IE-oneoffdata-1.0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-IE\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 12,\n    \"VestingDataAmount\": 1000,\n    \"VestingDataCliffMonths\": 12,\n    \"VestingDataTotalMonths\": 15\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Ireland/pricing-IE-removevesting-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-IE\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 12,\n    \"VestingDataAmount\": 0,\n    \"VestingDataCliffMonths\": 0,\n    \"VestingDataTotalMonths\": 0\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Ireland/pricing-IE-signingbonus-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-IE\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 12,\n    \"VestingDataAmount\": 1000,\n    \"VestingDataCliffMonths\": 12,\n    \"VestingDataTotalMonths\": 15\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Ireland/pricing-IE-signingbonus-2_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-IE\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 12,\n    \"VestingDataAmount\": 1000,\n    \"VestingDataCliffMonths\": 12,\n    \"VestingDataTotalMonths\": 15\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Ireland/pricing-IE-vesting-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-IE\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:36.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\":  12,\n    \"VestingDataAmount\": 1000,\n    \"VestingDataCliffMonths\": 12,\n    \"VestingDataTotalMonths\": 15\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Ireland/recalculateprice-IE-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-IE\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"AnnualSalary\": 45000\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Ireland/recalculateprice-IE-tenantCosts.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-IE\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"AnnualSalary\": 45000\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Italy/pricing-IT-1_0-dirigenti.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-IT/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 60000,\n    \"ToCurrencyIsoCode\": \"EUR\",\n    \"DisabilityInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"LifeInsurance\": false,\n    \"ContractTerm\": \"Fixed Term\",\n    \"ContractType\":  \"Dirigenti\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Italy/pricing-IT-1_0-quadri.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-IT/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 60000,\n    \"ToCurrencyIsoCode\": \"EUR\",\n    \"DisabilityInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"LifeInsurance\": false,\n    \"ContractTerm\": \"Fixed Term\",\n    \"ContractType\":  \"Quadri\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Italy/pricing-IT-1_0.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-IT/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 60000,\n    \"ToCurrencyIsoCode\": \"EUR\",\n    \"DisabilityInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"LifeInsurance\": false,\n    \"ContractTerm\": \"Fixed Term\",\n    \"ContractType\":  \"Ordinary\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Italy/recalculateprice-IT-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-IT\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Luxembourg/CalculatePriceV2.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-LU/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"Allowances\": null,\n    \"AnnualSalary\": 50000,\n    \"LifeInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"DisabilityInsurance\": false,\n    \"ToCurrencyIsoCode\": \"EUR\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Luxembourg/pricing-LU-1_0-Currency(USDTOEUR).json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-LU/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"Allowances\":  {\"Car/Transportation\":  536},\n    \"AnnualSalary\": 50000,\n    \"LifeInsurance\": true,\n    \"MedicalInsurance\": true,\n    \"DisabilityInsurance\": false,\n    \"ToCurrencyIsoCode\":  \"EUR\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Luxembourg/pricing-LU-1_0-Currency.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-LU/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"Allowances\": { \"Car/Transportation\": 536 },\n    \"AnnualSalary\": 50000,\n    \"LifeInsurance\": true,\n    \"MedicalInsurance\": true,\n    \"DisabilityInsurance\": false,\n    \"ToCurrencyIsoCode\": \"USD\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Luxembourg/pricing-LU-1_0-deposit-factor.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-LU/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"DeathInsuranceSelected\": false,\n    \"MedicalInsuranceSelected\": false,\n    \"DentalInsuranceSelected\": false,\n    \"OrganisationId\": \"789\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Luxembourg/pricing-LU-1_0-platformFee-fixed-fee.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"abcdefgh\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-LU/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"abc123\",\n    \"AnnualSalary\": 1000,\n    \"OrganisationId\": \"Platform is fixed fee\",\n    \"IsoCode\":  \"LU\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Luxembourg/pricing-LU-1_0-platformFee-percentage.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"abcdefgh\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-LU/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"abc123\",\n    \"AnnualSalary\": 50000,\n    \"OrganisationId\": \"Platform is percentage\",\n    \"IsoCode\":  \"LU\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Luxembourg/pricing-LU-1_0-RecalculatePrice.json\n// service: src\n{\n  \"type\": \"RecalculatePrice-LU\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"DeathInsuranceSelected\": true,\n    \"MedicalInsurance\": true,\n    \"DentalInsuranceSelected\": false,\n    \"Allowances\": { \"Transport\": 3600 }\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Luxembourg/pricing-LU-1_0-with-domain-and-allowances.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-LU/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"ToCurrencyIsoCode\": \"EUR\",\n    \"DisabilityInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"LifeInsurance\": false,\n    \"Allowances\": { \"Car/Transportation\": 536.00 },\n    \"OrganisationId\": \"LU\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Luxembourg/pricing-LU-1_0.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-LU/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"DeathInsuranceSelected\": false,\n    \"MedicalInsuranceSelected\": false,\n    \"DentalInsuranceSelected\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Luxembourg/pricing-LU-recalculateprice-tenantCosts.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-LU\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"AnnualSalary\": 70000\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Luxembourg/pricing-LU-removesigningbonus-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"SigningBonusAmount\": 0\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Luxembourg/pricing-LU-removevesting-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-LU\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:36.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"VestingBonusAmount\": 0,\n    \"VestingBonusCliffMonths\": 0,\n    \"VestingBonusTotalMonths\": 0\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Luxembourg/pricing-LU-signingbonus-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-LU\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"SigningBonusAmount\": 12\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Luxembourg/pricing-LU-signingbonus-2_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-LU\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 12\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Luxembourg/pricing-LU-tenantCosts.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-LU/1.0\",\n  \"data\": {\n    \"AnnualSalary\": 120000,\n    \"CorrelationId\": \"123\",\n    \"OrganisationId\": \"has mspFee\",\n    \"TenantId\": \"test\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Luxembourg/pricing-LU-vesting-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice\",\n  \"Source\": \"pricing-GB\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:36.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"VestingBonusAmount\": 1000,\n    \"VestingBonusCliffMonths\": 12,\n    \"VestingBonusTotalMonths\": 15\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Luxembourg/RecalculatePriceV2.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-LU\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Netherlands/pricing-NL-1_0.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-NL/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 48000,\n    \"ContractTerm\": \"Open Ended\",\n    \"ToCurrencyIsoCode\": \"EUR\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Netherlands/recalculateprice-NL-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-NL\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Portugal/CalculatePriceV2.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-PT/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"TenantId\": \"XML-INT\",\n    \"OrganisationId\": \"org-123\",\n    \"Allowances\": null,\n    \"AnnualSalary\": 50000,\n    \"LifeInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"DisabilityInsurance\": false,\n    \"ToCurrencyIsoCode\": \"EUR\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Portugal/pricing-PT-1_0-CurrencyV2.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-PT/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"Allowances\": { \"Car/Transportation\": 536 },\n    \"AnnualSalary\": 50000,\n    \"LifeInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"DisabilityInsurance\": false,\n    \"ToCurrencyIsoCode\": \"USD\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Portugal/pricing-PT-1_0-deposit-factor.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-PT/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"DisabilityInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"LifeInsurance\": false,\n    \"OrganisationId\":  \"789\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Portugal/pricing-PT-1_0-platformFee-fixed-fee.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"abcdefgh\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-PT/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"abc123\",\n    \"AnnualSalary\": 1000,\n    \"OrganisationId\": \"Platform is fixed fee\",\n    \"IsoCode\": \"PT\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Portugal/pricing-PT-1_0-platformFee-percentage.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"abcdefgh\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-PT/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"abc123\",\n    \"AnnualSalary\": 50000,\n    \"OrganisationId\": \"Platform is percentage\",\n    \"IsoCode\": \"PT\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Portugal/pricing-PT-1_0-pricecalculatedV2.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-PT/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"LifeInsuranceSelected\": false,\n    \"MedicalInsuranceSelected\": true,\n    \"DisabilityInsuranceSelected\": false,\n    \"DentalInsuranceSelected\": false,\n    \"DeathInsuranceSelected\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Portugal/pricing-PT-1_0-RecalculatePrice-InsurancesV2.json\n// service: src\n{\n  \"type\": \"RecalculatePrice-PT\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"LifeInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"DisabilityInsurance\": false,    \n    \"DentalInsuranceSelected\": false,\n    \"DeathInsuranceSelected\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Portugal/pricing-PT-1_0-RecalculatePrice.json\n// service: src\n{\n  \"type\": \"RecalculatePrice-PT\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"LifeInsurance\": true,\n    \"MedicalInsurance\": true,\n    \"DisabilityInsurance\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Portugal/pricing-PT-1_0-RecalculatePriceNew.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-PT\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"95979a0f-e137-4d3c-a897-d9ba10486758\",\n  \"Time\": \"2023-01-26T12:00:20.274Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"098df0b0-bd75-4f32-8063-58f64b163e12\",\n    \"LifeInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"DisabilityInsurance\": false,\n    \"MedicalInsuranceNew\": true,\n    \"DentalInsurance\": false,\n    \"DeathInsurance\": false,\n    \"CorrelationId\": \"062eadb6-fba5-4294-a494-82519cbe303c\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Portugal/pricing-PT-1_0-removesigningbonus.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-PT\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 0\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Portugal/pricing-PT-1_0-with-domain-and-allowances.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-PT/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"ToCurrencyIsoCode\": \"EUR\",\n    \"DisabilityInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"LifeInsurance\": false,\n    \"Allowances\": { \"Car/Transportation\": 536.00 },\n    \"OrganisationId\": \"PT\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Portugal/pricing-PT-removevesting-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-PT\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 12,\n    \"VestingDataAmount\": 0,\n    \"VestingDataCliffMonths\": 0,\n    \"VestingDataTotalMonths\": 0\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Portugal/pricing-PT-signingbonus-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-PT\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 12,\n    \"VestingDataAmount\": 1000,\n    \"VestingDataCliffMonths\": 12,\n    \"VestingDataTotalMonths\": 15\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Portugal/pricing-PT-signingbonus-2_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-PT\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 12\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Portugal/pricing-PT-tenantCosts.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-PT/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"MedicalInsuranceSelected\": true,\n    \"TenantId\": \"test\",\n    \"OrganisationId\": \"has mspFee\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Portugal/pricing-PT-vesting-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-PT\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 12,\n    \"VestingDataAmount\": 1000,\n    \"VestingDataCliffMonths\": 12,\n    \"VestingDataTotalMonths\": 15\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Portugal/recalculateprice-PT-tenantCosts.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-PT\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"ToCurrencyIsoCode\": \"USD\",\n    \"AnnualSalary\": 120000,\n    \"TenantId\":  \"test\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Portugal/recalculateprice-PT-USD-10000.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-PT\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"ToCurrencyIsoCode\": \"USD\",\n    \"AnnualSalary\": 120000 \n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Portugal/RecalculatePriceV2.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-PT\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Slovakia/pricing-SK-1_0.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-SK/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 50000,\n    \"ToCurrencyIsoCode\": \"EUR\",\n    \"DisabilityInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"LifeInsurance\": false,\n    \"Allowances\": {\n      \"X\": 12\n    }\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Slovakia/recalculateprice-SK-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-SK\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"AnnualSalary\": 13332\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Spain/CalculatePriceV2.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-ES/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"Allowances\": null,\n    \"AnnualSalary\": 50000,\n    \"LifeInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"DisabilityInsurance\": false,\n    \"ToCurrencyIsoCode\": \"EUR\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Spain/pricing-ES-1_0-CurrencyV2.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-ES/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"Allowances\": { \"Car/Transportation\": 536 },\n    \"AnnualSalary\": 50000,\n    \"LifeInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"DisabilityInsurance\": false,\n    \"ToCurrencyIsoCode\": \"USD\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Spain/pricing-ES-1_0-deposit-factor.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-ES/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"DisabilityInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"LifeInsurance\": false,\n    \"OrganisationId\":  \"789\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Spain/pricing-ES-1_0-platformFee-fixed-fee.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"abcdefgh\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-ES/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"abc123\",\n    \"AnnualSalary\": 1000,\n    \"OrganisationId\": \"Platform is fixed fee\",\n    \"IsoCode\":  \"ES\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Spain/pricing-ES-1_0-platformFee-percentage.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"abcdefgh\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-ES/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"abc123\",\n    \"AnnualSalary\": 50000,\n    \"OrganisationId\": \"Platform is percentage\",\n    \"IsoCode\":  \"ES\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Spain/pricing-ES-1_0-pricecalculatedV2.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-ES/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"LifeInsuranceSelected\": false,\n    \"MedicalInsuranceSelected\": true,\n    \"DisabilityInsuranceSelected\": false,\n    \"DentalInsuranceSelected\": false,\n    \"DeathInsuranceSelected\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Spain/pricing-ES-1_0-RecalculatePrice-InsurancesV2.json\n// service: src\n{\n  \"type\": \"RecalculatePrice-ES\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"MedicalInsuranceNewSelected\": true,\n    \"DentalInsuranceSelected\": false,\n    \"DeathInsuranceSelected\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Spain/pricing-ES-1_0-RecalculatePrice-V1.json\n// service: src\n{\n  \"type\": \"RecalculatePrice-ES-V1\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"LifeInsurance\": true,\n    \"MedicalInsurance\": true,\n    \"DisabilityInsurance\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Spain/pricing-ES-1_0-RecalculatePrice.json\n// service: src\n{\n  \"type\": \"RecalculatePrice-ES\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"LifeInsurance\": true,\n    \"MedicalInsurance\": true,\n    \"DisabilityInsurance\": false\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Spain/pricing-ES-1_0-RecalculatePriceNew.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-ES\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"95979a0f-e137-4d3c-a897-d9ba10486758\",\n  \"Time\": \"2023-01-26T12:00:20.274Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"LifeInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"DisabilityInsurance\": false,\n    \"MedicalInsuranceNew\": true,\n    \"DentalInsurance\": false,\n    \"DeathInsurance\": false,\n    \"CorrelationId\": \"062eadb6-fba5-4294-a494-82519cbe303c\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Spain/pricing-ES-1_0-removesigningbonus.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-ES\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 0,\n    \"VestingDataAmount\": 0,\n    \"VestingDataCliffMonths\": 12,\n    \"VestingDataTotalMonths\": 15\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Spain/pricing-ES-1_0-with-domain-and-allowances.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-ES/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000,\n    \"ToCurrencyIsoCode\": \"EUR\",\n    \"DisabilityInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"LifeInsurance\": false,\n    \"Allowances\": { \"Car/Transportation\": 536.00 },\n    \"OrganisationId\": \"ES\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Spain/pricing-ES-1_0.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-ES/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"Allowances\": { \"Car/Transportation\": 536 },\n    \"AnnualSalary\": 50000,\n    \"LifeInsurance\": false,\n    \"MedicalInsurance\": false,\n    \"DisabilityInsurance\": false,\n    \"ToCurrencyIsoCode\": \"USD\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Spain/pricing-ES-removevesting-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-ES\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 12,\n    \"VestingDataAmount\": 0,\n    \"VestingDataCliffMonths\": 0,\n    \"VestingDataTotalMonths\": 0\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Spain/pricing-ES-signingbonus-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-ES\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 12,\n    \"VestingDataAmount\": 1000,\n    \"VestingDataCliffMonths\": 12,\n    \"VestingDataTotalMonths\": 15\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Spain/pricing-ES-signingbonus-2_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-ES\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 12\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Spain/pricing-ES-tenantCosts.json\n// service: src\n{\n  \"type\": \"CalculatePriceV2\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-ES/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"Allowances\": { \"Car/Transportation\": 536 },\n    \"AnnualSalary\": 50000,\n    \"ToCurrencyIsoCode\": \"USD\",\n    \"TenantId\": \"test\",\n    \"OrganisationId\": \"has mspFee\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Spain/pricing-ES-vesting-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-ES\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"recalculateprice/1.0\",\n  \"data\": {\n    \"PriceId\": \"123\",\n    \"OneOffDataAmount\": 12,\n    \"VestingDataAmount\": 1000,\n    \"VestingDataCliffMonths\": 12,\n    \"VestingDataTotalMonths\": 15\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Spain/recalculateprice-ES-tenantCosts.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-ES\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"ToCurrencyIsoCode\": \"USD\",\n    \"AnnualSalary\": 120000,\n    \"TenantId\":  \"test\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Spain/recalculateprice-ES-USD-10000.json\n// service: src\n{\n  \"Type\": \"RecalculatePrice-ES\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\",\n    \"ToCurrencyIsoCode\": \"USD\",\n    \"AnnualSalary\": 120000 \n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Spain/RecalculatePriceV2.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-ES\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Switzerland/pricing-CH-1_0.json\n// service: src\n{\n  \"type\": \"CalculatePrice\",\n  \"source\": \"pricing-Europe\",\n  \"id\": \"123\",\n  \"time\": \"2022-04-06T17:29:06.722Z\",\n  \"dataContentType\": \"application/json\",\n  \"dataSchema\": \"pricing-CH/1.0\",\n  \"data\": {\n    \"CorrelationId\": \"123\",\n    \"AnnualSalary\": 120000\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/PayloadSamples/Switzerland/recalculateprice-CH-1_0.json\n// service: src\n{\n  \"Type\": \"RecalculatePriceV2-CH\",\n  \"Source\": \"pricing-Europe\",\n  \"Id\": \"486151ae-47ea-4197-9e49-29c4fca1a9aa\",\n  \"Time\": \"2022-05-20T13:14:35.926Z\",\n  \"DataContentType\": \"application/json\",\n  \"DataSchema\": \"recalculateprice/1.0\",\n  \"Data\": {\n    \"PriceId\": \"123\"\n  }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/Utils/Helpers.cs\n// service: src\n﻿using System.Text.Json;\nusing CloudEventData;\nusing Newtonsoft.Json.Linq;\n\nnamespace Remundo.Pricing.Tests.Utils\n{\n    public static class Helpers\n    {\n        public static CloudEventRequest BuildCloudRequest(string payloadPath)\n        {\n            var request = File.ReadAllText(payloadPath);\n            var req = JsonSerializer.Deserialize<CloudEventRequest>(request, new JsonSerializerOptions(JsonSerializerDefaults.Web));\n            req.Data = req.Data.ToString();\n            return req;\n        }\n\n        public static CloudEventRequest BuildCloudRequest(string payloadPath, Dictionary<string, dynamic> data)\n        {\n            var req = BuildCloudRequest(payloadPath);\n            return EditCloudRequest(req, data);\n        }\n\n        public static CloudEventRequest EditCloudRequest(CloudEventRequest request, Dictionary<string, dynamic> newValues)\n        {\n            JObject data = JObject.Parse(request.Data);\n\n            foreach (var (key, value) in newValues)\n            {\n                data[key] = JToken.FromObject(value);\n            }\n            request.Data = data.ToString();\n            return request;\n        }\n    }\n}"}
{"text": "// file: src/Remundo.Pricing.Tests/Utils/Usings.cs\n// service: src\nglobal using NUnit.Framework;"}
